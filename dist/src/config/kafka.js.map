{"version":3,"sources":["../../../src/config/kafka.ts"],"sourcesContent":["import { Kafka, Producer, Consumer, EachMessagePayload } from 'kafkajs';\nimport { PrismaClient } from '@prisma/client';\nimport { Server as SocketIOServer } from 'socket.io';\n\nconst prisma = new PrismaClient();\n\n// Flag to track if Kafka is available\nlet kafkaEnabled = false;\nlet producer: Producer | null = null;\nlet consumer: Consumer | null = null;\n\n// Only initialize Kafka if explicitly enabled\nif (process.env.ENABLE_KAFKA === 'true') {\n  const kafka = new Kafka({\n    clientId: 'fieldsy-chat',\n    brokers: [process.env.KAFKA_BROKER || 'localhost:9092'],\n    retry: {\n      initialRetryTime: 100,\n      retries: 3, // Reduce retries to fail faster\n    },\n  });\n\n  producer = kafka.producer();\n  consumer = kafka.consumer({ groupId: 'chat-service-group' });\n}\n\n// Message types\nexport interface ChatMessage {\n  conversationId: string;\n  senderId: string;\n  receiverId: string;\n  content: string;\n  timestamp: Date;\n}\n\n// Store Socket.io instance for direct message handling\nlet socketIO: SocketIOServer | null = null;\n\n// Initialize Kafka producer and consumer (if enabled)\nexport const initializeKafka = async (io: SocketIOServer) => {\n  socketIO = io; // Store the Socket.io instance\n  \n  if (!producer || !consumer) {\n    console.log('Kafka is disabled. Messages will be handled directly.');\n    kafkaEnabled = false;\n    return;\n  }\n\n  try {\n    // Connect producer\n    await producer.connect();\n    console.log('Kafka producer connected');\n\n    // Connect consumer\n    await consumer.connect();\n    console.log('Kafka consumer connected');\n\n    kafkaEnabled = true;\n\n    // Subscribe to the chat topic\n    await consumer.subscribe({ topic: 'chat-messages', fromBeginning: false });\n\n    // Run the consumer\n    await consumer.run({\n      eachMessage: async ({ topic, partition, message }: EachMessagePayload) => {\n        try {\n          if (!message.value) return;\n          \n          const chatMessage: ChatMessage = JSON.parse(message.value.toString());\n          await processMessage(chatMessage, io);\n        } catch (error) {\n          console.error('Error processing Kafka message:', error);\n        }\n      },\n    });\n  } catch (error) {\n    console.error('Kafka initialization failed, falling back to direct processing:', error);\n    kafkaEnabled = false;\n  }\n};\n\n// Process message (used by both Kafka and direct processing)\nasync function processMessage(chatMessage: ChatMessage, io: SocketIOServer) {\n  try {\n    console.log('[ProcessMessage] Processing message:', {\n      conversationId: chatMessage.conversationId,\n      senderId: chatMessage.senderId,\n      receiverId: chatMessage.receiverId\n    });\n    \n    // Save message to database\n    const savedMessage = await prisma.message.create({\n      data: {\n        conversationId: chatMessage.conversationId,\n        senderId: chatMessage.senderId,\n        receiverId: chatMessage.receiverId,\n        content: chatMessage.content,\n        createdAt: chatMessage.timestamp,\n      },\n      include: {\n        sender: {\n          select: {\n            id: true,\n            name: true,\n            image: true,\n          },\n        },\n      },\n    });\n\n    // Update conversation's last message\n    await prisma.conversation.update({\n      where: { id: chatMessage.conversationId },\n      data: {\n        lastMessage: chatMessage.content,\n        lastMessageAt: chatMessage.timestamp,\n      },\n    });\n\n    // Emit to Socket.io rooms\n    const conversationRoom = `conversation:${chatMessage.conversationId}`;\n    const receiverRoom = `user-${chatMessage.receiverId}`;\n    \n    console.log('[ProcessMessage] Emitting to rooms:', {\n      conversationRoom,\n      receiverRoom\n    });\n    \n    // Check if anyone is in these rooms\n    const conversationSockets = await io.in(conversationRoom).fetchSockets();\n    const receiverSockets = await io.in(receiverRoom).fetchSockets();\n    \n    console.log('[ProcessMessage] Room status:', {\n      conversationRoom: `${conversationSockets.length} sockets`,\n      receiverRoom: `${receiverSockets.length} sockets`\n    });\n    \n    // Emit to conversation room\n    io.to(conversationRoom).emit('new-message', savedMessage);\n    \n    // Notify receiver if not in conversation room - use hyphen for consistency\n    io.to(receiverRoom).emit('new-message-notification', {\n      conversationId: chatMessage.conversationId,\n      message: savedMessage,\n    });\n    \n    // Also emit to the receiver's room with the standard 'new-message' event\n    io.to(receiverRoom).emit('new-message', savedMessage);\n\n    console.log(`[ProcessMessage] Message processed and emitted: ${savedMessage.id}`);\n    return savedMessage;\n  } catch (error) {\n    console.error('Error processing message:', error);\n    throw error;\n  }\n}\n\n// Send message to Kafka or process directly\nexport const sendMessageToKafka = async (message: ChatMessage) => {\n  try {\n    if (kafkaEnabled && producer) {\n      // Send to Kafka if available\n      await producer.send({\n        topic: 'chat-messages',\n        messages: [\n          {\n            key: message.conversationId,\n            value: JSON.stringify(message),\n          },\n        ],\n      });\n      console.log('Message sent to Kafka');\n    } else {\n      // Process directly if Kafka is not available\n      if (socketIO) {\n        const savedMessage = await processMessage(message, socketIO);\n        console.log('Message processed directly (Kafka disabled)');\n        return savedMessage;\n      } else {\n        throw new Error('Socket.io not initialized');\n      }\n    }\n  } catch (error) {\n    console.error('Error handling message:', error);\n    // If Kafka fails, try direct processing as fallback\n    if (socketIO && error instanceof Error && !error.message.includes('Socket.io')) {\n      console.log('Kafka failed, processing message directly');\n      return await processMessage(message, socketIO);\n    }\n    throw error;\n  }\n};\n\n// Graceful shutdown\nexport const shutdownKafka = async () => {\n  if (producer) {\n    await producer.disconnect();\n  }\n  if (consumer) {\n    await consumer.disconnect();\n  }\n  if (kafkaEnabled) {\n    console.log('Kafka connections closed');\n  }\n};"],"names":["initializeKafka","sendMessageToKafka","shutdownKafka","prisma","PrismaClient","kafkaEnabled","producer","consumer","process","env","ENABLE_KAFKA","kafka","Kafka","clientId","brokers","KAFKA_BROKER","retry","initialRetryTime","retries","groupId","socketIO","io","console","log","connect","subscribe","topic","fromBeginning","run","eachMessage","partition","message","value","chatMessage","JSON","parse","toString","processMessage","error","conversationId","senderId","receiverId","savedMessage","create","data","content","createdAt","timestamp","include","sender","select","id","name","image","conversation","update","where","lastMessage","lastMessageAt","conversationRoom","receiverRoom","conversationSockets","in","fetchSockets","receiverSockets","length","to","emit","send","messages","key","stringify","Error","includes","disconnect"],"mappings":"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"}