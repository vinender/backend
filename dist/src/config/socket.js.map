{"version":3,"sources":["../../../src/config/socket.ts"],"sourcesContent":["import { Server as HTTPServer } from 'http';\nimport { Server as SocketIOServer, Socket } from 'socket.io';\nimport jwt from 'jsonwebtoken';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\ninterface AuthSocket extends Socket {\n  userId?: string;\n  userRole?: string;\n}\n\nexport const initializeSocket = (server: HTTPServer) => {\n  const io = new SocketIOServer(server, {\n    cors: {\n      origin: process.env.FRONTEND_URL || 'http://localhost:3001',\n      credentials: true,\n    },\n  });\n\n  // Authentication middleware\n  io.use(async (socket: AuthSocket, next) => {\n    try {\n      const token = socket.handshake.auth.token;\n      \n      if (!token) {\n        return next(new Error('Authentication required'));\n      }\n\n      const decoded = jwt.verify(token, process.env.JWT_SECRET as string) as any;\n      \n      console.log('WebSocket Auth - Decoded token:', {\n        id: decoded.id,\n        userId: decoded.userId,\n        email: decoded.email,\n        role: decoded.role\n      });\n      \n      // Get userId from token (it's stored as 'id' in the JWT)\n      const userId = decoded.id || decoded.userId;\n      \n      if (!userId) {\n        console.error('No userId found in token');\n        return next(new Error('Invalid token - no user ID'));\n      }\n      \n      // Verify user exists\n      const user = await prisma.user.findUnique({\n        where: { id: userId },\n        select: { id: true, role: true, name: true, email: true }\n      });\n\n      if (!user) {\n        return next(new Error('User not found'));\n      }\n\n      socket.userId = user.id;\n      socket.userRole = user.role;\n      (socket as any).userEmail = user.email;\n      \n      next();\n    } catch (error) {\n      next(new Error('Invalid token'));\n    }\n  });\n\n  // Connection handler\n  io.on('connection', async (socket: AuthSocket) => {\n    console.log('=== WebSocket Connection ===');\n    console.log('User connected:');\n    console.log('  - ID (ObjectId):', socket.userId);\n    console.log('  - Email:', (socket as any).userEmail);\n    console.log('  - Role:', socket.userRole);\n    console.log('  - Socket ID:', socket.id);\n    \n    // Join user's personal room with proper format\n    const userRoom = `user-${socket.userId}`;\n    socket.join(userRoom);\n    console.log(`  - Joined room: ${userRoom}`);\n    \n    // Log all rooms this socket is in\n    console.log('  - Socket is in rooms:', Array.from(socket.rooms));\n    \n    // Check how many sockets are in the user's room\n    const socketsInRoom = await io.in(userRoom).fetchSockets();\n    console.log(`  - Total sockets in ${userRoom}: ${socketsInRoom.length}`);\n\n    // Automatically join all conversation rooms for this user\n    try {\n      const conversations = await prisma.conversation.findMany({\n        where: {\n          participants: {\n            has: socket.userId\n          }\n        },\n        select: { id: true }\n      });\n\n      conversations.forEach(conv => {\n        const convRoom = `conversation:${conv.id}`;\n        socket.join(convRoom);\n        console.log(`  - Auto-joined conversation room: ${convRoom}`);\n      });\n      \n      console.log(`  - Total conversation rooms joined: ${conversations.length}`);\n    } catch (error) {\n      console.error('Error auto-joining conversations:', error);\n    }\n\n    // Also handle explicit join-conversations event\n    socket.on('join-conversations', async () => {\n      try {\n        const conversations = await prisma.conversation.findMany({\n          where: {\n            participants: {\n              has: socket.userId\n            }\n          },\n          select: { id: true }\n        });\n\n        conversations.forEach(conv => {\n          socket.join(`conversation:${conv.id}`);\n        });\n        \n        console.log(`[join-conversations] User ${socket.userId} joined ${conversations.length} conversation rooms`);\n      } catch (error) {\n        console.error('Error joining conversations:', error);\n      }\n    });\n\n    // Handle joining a specific conversation\n    socket.on('join-conversation', (conversationId: string) => {\n      socket.join(`conversation:${conversationId}`);\n    });\n\n    // Handle leaving a conversation\n    socket.on('leave-conversation', (conversationId: string) => {\n      socket.leave(`conversation:${conversationId}`);\n    });\n\n    // Handle typing indicator\n    socket.on('typing', ({ conversationId, isTyping }) => {\n      socket.to(`conversation:${conversationId}`).emit('user-typing', {\n        userId: socket.userId,\n        isTyping\n      });\n    });\n\n    // Handle message read\n    socket.on('mark-as-read', async ({ messageIds }) => {\n      try {\n        await prisma.message.updateMany({\n          where: {\n            id: { in: messageIds },\n            receiverId: socket.userId\n          },\n          data: {\n            isRead: true,\n            readAt: new Date()\n          }\n        });\n\n        // Notify sender that message was read\n        const messages = await prisma.message.findMany({\n          where: { id: { in: messageIds } },\n          select: { senderId: true, conversationId: true }\n        });\n\n        messages.forEach(msg => {\n          io.to(`user-${msg.senderId}`).emit('message-read', {\n            messageIds,\n            conversationId: msg.conversationId\n          });\n        });\n      } catch (error) {\n        console.error('Error marking messages as read:', error);\n      }\n    });\n\n    // Handle disconnect\n    socket.on('disconnect', () => {\n      console.log(`User ${socket.userId} disconnected`);\n    });\n  });\n\n  return io;\n};"],"names":["initializeSocket","prisma","PrismaClient","server","io","SocketIOServer","cors","origin","process","env","FRONTEND_URL","credentials","use","socket","next","token","handshake","auth","Error","decoded","jwt","verify","JWT_SECRET","console","log","id","userId","email","role","error","user","findUnique","where","select","name","userRole","userEmail","on","userRoom","join","Array","from","rooms","socketsInRoom","in","fetchSockets","length","conversations","conversation","findMany","participants","has","forEach","conv","convRoom","conversationId","leave","isTyping","to","emit","messageIds","message","updateMany","receiverId","data","isRead","readAt","Date","messages","senderId","msg"],"mappings":"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"}