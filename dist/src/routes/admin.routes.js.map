{"version":3,"sources":["../../../src/routes/admin.routes.ts"],"sourcesContent":["import { Router } from 'express';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport { PrismaClient } from '@prisma/client';\nimport { authenticateAdmin } from '../middleware/admin.middleware';\n\nconst router = Router();\nconst prisma = new PrismaClient();\n\n// Admin login endpoint\nrouter.post('/login', async (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    if (!email || !password) {\n      return res.status(400).json({ error: 'Email and password are required' });\n    }\n\n    // Find admin user - first find by email, then check role\n    const admin = await prisma.user.findFirst({\n      where: { \n        email,\n        role: 'ADMIN'\n      }\n    });\n\n    if (!admin) {\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n\n    // Verify password\n    const validPassword = await bcrypt.compare(password, admin.password || '');\n    if (!validPassword) {\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n\n    // Generate JWT token\n    const token = jwt.sign(\n      { userId: admin.id, email: admin.email, role: admin.role },\n      process.env.JWT_SECRET || 'your-secret-key',\n      { expiresIn: '24h' }\n    );\n\n    // Return admin data without password\n    const { password: _, ...adminData } = admin;\n\n    res.json({\n      success: true,\n      token,\n      admin: adminData\n    });\n\n  } catch (error) {\n    console.error('Admin login error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Verify admin token endpoint\nrouter.get('/verify', authenticateAdmin, async (req, res) => {\n  try {\n    const admin = (req as any).admin;\n    const { password: _, ...adminData } = admin;\n\n    res.json({\n      success: true,\n      admin: adminData\n    });\n\n  } catch (error) {\n    console.error('Admin verify error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Get dashboard statistics\nrouter.get('/stats', authenticateAdmin, async (req, res) => {\n  try {\n    const { period = 'Today' } = req.query;\n    \n    // Get current date and calculate date ranges based on period\n    const now = new Date();\n    const startOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    \n    let startDate: Date;\n    let compareStartDate: Date;\n    let compareEndDate: Date;\n    \n    switch(period) {\n      case 'Today':\n        startDate = startOfToday;\n        compareStartDate = new Date(startOfToday);\n        compareStartDate.setDate(compareStartDate.getDate() - 1);\n        compareEndDate = new Date(startOfToday);\n        compareEndDate.setMilliseconds(compareEndDate.getMilliseconds() - 1);\n        break;\n      case 'Weekly':\n        startDate = new Date(startOfToday);\n        startDate.setDate(startDate.getDate() - 7);\n        compareStartDate = new Date(startDate);\n        compareStartDate.setDate(compareStartDate.getDate() - 7);\n        compareEndDate = new Date(startDate);\n        compareEndDate.setMilliseconds(compareEndDate.getMilliseconds() - 1);\n        break;\n      case 'Monthly':\n        startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n        compareStartDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);\n        compareEndDate = new Date(now.getFullYear(), now.getMonth(), 0, 23, 59, 59, 999);\n        break;\n      case 'Yearly':\n        startDate = new Date(now.getFullYear(), 0, 1);\n        compareStartDate = new Date(now.getFullYear() - 1, 0, 1);\n        compareEndDate = new Date(now.getFullYear() - 1, 11, 31, 23, 59, 59, 999);\n        break;\n      default:\n        startDate = startOfToday;\n        compareStartDate = new Date(startOfToday);\n        compareStartDate.setDate(compareStartDate.getDate() - 1);\n        compareEndDate = new Date(startOfToday);\n        compareEndDate.setMilliseconds(compareEndDate.getMilliseconds() - 1);\n    }\n\n    // Get current statistics\n    const [\n      totalUsers,\n      totalFields,\n      totalBookings,\n      totalRevenue,\n      upcomingBookings,\n      recentBookings,\n      dogOwners,\n      fieldOwners,\n      // Yesterday's stats for comparison\n      yesterdayUsers,\n      yesterdayFields,\n      yesterdayBookings,\n      yesterdayRevenue,\n      yesterdayUpcomingBookings\n    ] = await Promise.all([\n      // Current stats\n      prisma.user.count(),\n      prisma.field.count(),\n      prisma.booking.count(),\n      prisma.booking.aggregate({\n        _sum: { totalPrice: true },\n        where: { paymentStatus: 'PAID' }\n      }),\n      prisma.booking.count({\n        where: {\n          date: { gte: now },\n          status: { in: ['PENDING', 'CONFIRMED'] }\n        }\n      }),\n      prisma.booking.findMany({\n        take: 5,\n        orderBy: { createdAt: 'desc' },\n        include: {\n          user: true,\n          field: true\n        }\n      }),\n      prisma.user.count({ where: { role: 'DOG_OWNER' } }),\n      prisma.user.count({ where: { role: 'FIELD_OWNER' } }),\n      \n      // Previous period stats for comparison\n      prisma.user.count({\n        where: {\n          createdAt: { lte: compareEndDate }\n        }\n      }),\n      prisma.field.count({\n        where: {\n          createdAt: { lte: compareEndDate }\n        }\n      }),\n      prisma.booking.count({\n        where: {\n          createdAt: { lte: compareEndDate }\n        }\n      }),\n      prisma.booking.aggregate({\n        _sum: { totalPrice: true },\n        where: {\n          paymentStatus: 'PAID',\n          createdAt: { lte: compareEndDate }\n        }\n      }),\n      prisma.booking.count({\n        where: {\n          date: { gte: compareStartDate },\n          createdAt: { lte: compareEndDate },\n          status: { in: ['PENDING', 'CONFIRMED'] }\n        }\n      })\n    ]);\n\n    // Calculate growth percentages\n    const calculateGrowth = (current: number, yesterday: number): number => {\n      if (!yesterday || yesterday === 0) {\n        return current > 0 ? 100 : 0;\n      }\n      return Number(((current - yesterday) / yesterday * 100).toFixed(1));\n    };\n\n    const currentRevenue = totalRevenue._sum.totalPrice || 0;\n    const yesterdayRevenueValue = yesterdayRevenue._sum.totalPrice || 0;\n\n    res.json({\n      success: true,\n      stats: {\n        totalUsers,\n        totalFields,\n        totalBookings,\n        totalRevenue: currentRevenue,\n        upcomingBookings,\n        dogOwners,\n        fieldOwners,\n        recentBookings,\n        // Growth percentages\n        growth: {\n          users: calculateGrowth(totalUsers, yesterdayUsers),\n          fields: calculateGrowth(totalFields, yesterdayFields),\n          bookings: calculateGrowth(totalBookings, yesterdayBookings),\n          revenue: calculateGrowth(currentRevenue, yesterdayRevenueValue),\n          upcomingBookings: calculateGrowth(upcomingBookings, yesterdayUpcomingBookings)\n        }\n      }\n    });\n\n  } catch (error) {\n    console.error('Stats error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Get total revenue\nrouter.get('/revenue/total', authenticateAdmin, async (req, res) => {\n  try {\n    const totalRevenue = await prisma.booking.aggregate({\n      _sum: { totalPrice: true },\n      where: { paymentStatus: 'PAID' }\n    });\n\n    res.json({\n      success: true,\n      totalRevenue: totalRevenue._sum.totalPrice || 0\n    });\n  } catch (error) {\n    console.error('Revenue error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Get all bookings for admin\nrouter.get('/bookings', authenticateAdmin, async (req, res) => {\n  try {\n    const { page = '1', limit = '10' } = req.query;\n    const skip = (parseInt(page as string) - 1) * parseInt(limit as string);\n\n    const [bookings, total] = await Promise.all([\n      prisma.booking.findMany({\n        skip,\n        take: parseInt(limit as string),\n        orderBy: { createdAt: 'desc' },\n        include: {\n          user: true,\n          field: {\n            include: {\n              owner: true\n            }\n          },\n          payment: true\n        }\n      }),\n      prisma.booking.count()\n    ]);\n\n    res.json({\n      success: true,\n      bookings,\n      total,\n      pages: Math.ceil(total / parseInt(limit as string))\n    });\n\n  } catch (error) {\n    console.error('Get bookings error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Get booking details\nrouter.get('/bookings/:id', authenticateAdmin, async (req, res) => {\n  try {\n    const booking = await prisma.booking.findUnique({\n      where: { id: req.params.id },\n      include: {\n        user: true,\n        field: {\n          include: {\n            owner: true\n          }\n        },\n        payment: true\n      }\n    });\n\n    if (!booking) {\n      return res.status(404).json({ error: 'Booking not found' });\n    }\n\n    res.json({\n      success: true,\n      booking\n    });\n\n  } catch (error) {\n    console.error('Get booking details error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Get user details with bookings\nrouter.get('/users/:id', authenticateAdmin, async (req, res) => {\n  try {\n    const user = await prisma.user.findUnique({\n      where: { id: req.params.id },\n      select: {\n        id: true,\n        email: true,\n        name: true,\n        role: true,\n        phone: true,\n        image: true,\n        googleImage: true,\n        emailVerified: true,\n        createdAt: true,\n        updatedAt: true,\n        _count: {\n          select: {\n            bookings: true,\n            ownedFields: true\n          }\n        },\n        bookings: {\n          orderBy: { createdAt: 'desc' },\n          select: {\n            id: true,\n            date: true,\n            startTime: true,\n            endTime: true,\n            numberOfDogs: true,\n            totalPrice: true,\n            status: true,\n            paymentStatus: true,\n            createdAt: true,\n            field: {\n              select: {\n                name: true,\n                location: true\n              }\n            }\n          }\n        }\n      }\n    });\n\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    res.json({\n      success: true,\n      user\n    });\n\n  } catch (error) {\n    console.error('Get user details error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Get all users for admin\nrouter.get('/users', authenticateAdmin, async (req, res) => {\n  try {\n    const { page = '1', limit = '10', role } = req.query;\n    const skip = (parseInt(page as string) - 1) * parseInt(limit as string);\n\n    const where = role ? { role: role as any } : {};\n\n    const [users, total] = await Promise.all([\n      prisma.user.findMany({\n        where,\n        skip,\n        take: parseInt(limit as string),\n        orderBy: { createdAt: 'desc' },\n        select: {\n          id: true,\n          email: true,\n          name: true,\n          role: true,\n          phone: true,\n          emailVerified: true,\n          createdAt: true,\n          _count: {\n            select: {\n              bookings: true,\n              ownedFields: true\n            }\n          }\n        }\n      }),\n      prisma.user.count({ where })\n    ]);\n\n    res.json({\n      success: true,\n      users,\n      total,\n      pages: Math.ceil(total / parseInt(limit as string))\n    });\n\n  } catch (error) {\n    console.error('Get users error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Get all fields for admin\nrouter.get('/fields', authenticateAdmin, async (req, res) => {\n  try {\n    const { page = '1', limit = '10' } = req.query;\n    const skip = (parseInt(page as string) - 1) * parseInt(limit as string);\n\n    const [fields, total] = await Promise.all([\n      prisma.field.findMany({\n        skip,\n        take: parseInt(limit as string),\n        orderBy: { createdAt: 'desc' },\n        include: {\n          owner: true,\n          _count: {\n            select: {\n              bookings: true\n            }\n          }\n        }\n      }),\n      prisma.field.count()\n    ]);\n\n    res.json({\n      success: true,\n      fields,\n      total,\n      pages: Math.ceil(total / parseInt(limit as string))\n    });\n\n  } catch (error) {\n    console.error('Get fields error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Get all notifications for admin (including both dog owner and field owner notifications)\nrouter.get('/notifications', authenticateAdmin, async (req, res) => {\n  try {\n    const { page = '1', limit = '20' } = req.query;\n    const skip = (parseInt(page as string) - 1) * parseInt(limit as string);\n\n    // Get admin user ID to also show admin-specific notifications\n    const adminId = (req as any).userId;\n\n    // Get all notifications (system-wide) with user details\n    const [notifications, total, unreadCount] = await Promise.all([\n      prisma.notification.findMany({\n        skip,\n        take: parseInt(limit as string),\n        orderBy: { createdAt: 'desc' },\n        include: {\n          user: {\n            select: {\n              id: true,\n              name: true,\n              email: true,\n              role: true\n            }\n          }\n        }\n      }),\n      prisma.notification.count(),\n      // Count unread admin notifications\n      prisma.notification.count({\n        where: {\n          OR: [\n            { userId: adminId }, // Admin's own notifications\n            { type: { in: ['user_registered', 'field_added', 'payment_received', 'booking_received'] } } // System-wide events\n          ],\n          read: false\n        }\n      })\n    ]);\n\n    res.json({\n      success: true,\n      notifications,\n      total,\n      unreadCount,\n      pages: Math.ceil(total / parseInt(limit as string))\n    });\n\n  } catch (error) {\n    console.error('Get admin notifications error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Mark notification as read for admin\nrouter.patch('/notifications/:id/read', authenticateAdmin, async (req, res) => {\n  try {\n    const notification = await prisma.notification.update({\n      where: { id: req.params.id },\n      data: {\n        read: true,\n        readAt: new Date()\n      }\n    });\n\n    res.json({\n      success: true,\n      notification\n    });\n\n  } catch (error) {\n    console.error('Mark notification as read error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Mark all admin notifications as read\nrouter.patch('/notifications/read-all', authenticateAdmin, async (req, res) => {\n  try {\n    const adminId = (req as any).userId;\n\n    // Mark all system-wide notifications as read\n    await prisma.notification.updateMany({\n      where: {\n        OR: [\n          { userId: adminId },\n          { type: { in: ['user_registered', 'field_added', 'payment_received', 'booking_received'] } }\n        ],\n        read: false\n      },\n      data: {\n        read: true,\n        readAt: new Date()\n      }\n    });\n\n    res.json({\n      success: true,\n      message: 'All notifications marked as read'\n    });\n\n  } catch (error) {\n    console.error('Mark all notifications as read error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Delete notification for admin\nrouter.delete('/notifications/:id', authenticateAdmin, async (req, res) => {\n  try {\n    await prisma.notification.delete({\n      where: { id: req.params.id }\n    });\n\n    res.json({\n      success: true,\n      message: 'Notification deleted'\n    });\n\n  } catch (error) {\n    console.error('Delete notification error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Get all payments for admin\nrouter.get('/payments', authenticateAdmin, async (req, res) => {\n  try {\n    const { page = '1', limit = '10' } = req.query;\n    const skip = (parseInt(page as string) - 1) * parseInt(limit as string);\n\n    const [payments, total] = await Promise.all([\n      prisma.payment.findMany({\n        skip,\n        take: parseInt(limit as string),\n        orderBy: { createdAt: 'desc' },\n        include: {\n          booking: {\n            include: {\n              user: true,\n              field: true\n            }\n          }\n        }\n      }),\n      prisma.payment.count()\n    ]);\n\n    res.json({\n      success: true,\n      payments,\n      total,\n      pages: Math.ceil(total / parseInt(limit as string))\n    });\n\n  } catch (error) {\n    console.error('Get payments error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Get booking stats based on period\nrouter.get('/booking-stats', authenticateAdmin, async (req, res) => {\n  try {\n    const { period = 'Today' } = req.query;\n    \n    const now = new Date();\n    const startOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    \n    let startDate: Date;\n    let endDate = now;\n    \n    switch(period) {\n      case 'Today':\n        startDate = startOfToday;\n        break;\n      case 'Weekly':\n        startDate = new Date(startOfToday);\n        startDate.setDate(startDate.getDate() - 7);\n        break;\n      case 'Monthly':\n        startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n        break;\n      case 'Yearly':\n        startDate = new Date(now.getFullYear(), 0, 1);\n        break;\n      default:\n        startDate = startOfToday;\n    }\n\n    // Get booking stats by status\n    const [completed, cancelled, refunded, pending, confirmed] = await Promise.all([\n      prisma.booking.count({\n        where: {\n          status: 'COMPLETED',\n          createdAt: { gte: startDate, lte: endDate }\n        }\n      }),\n      prisma.booking.count({\n        where: {\n          status: 'CANCELLED',\n          createdAt: { gte: startDate, lte: endDate }\n        }\n      }),\n      prisma.booking.count({\n        where: {\n          paymentStatus: 'REFUNDED',\n          createdAt: { gte: startDate, lte: endDate }\n        }\n      }),\n      prisma.booking.count({\n        where: {\n          status: 'PENDING',\n          createdAt: { gte: startDate, lte: endDate }\n        }\n      }),\n      prisma.booking.count({\n        where: {\n          status: 'CONFIRMED',\n          createdAt: { gte: startDate, lte: endDate }\n        }\n      })\n    ]);\n\n    // Calculate data points for chart\n    let chartData = [];\n    if (period === 'Today' || period === 'Weekly') {\n      // Show daily data\n      const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n      for (let i = 0; i < 7; i++) {\n        const dayStart = new Date(startDate);\n        dayStart.setDate(startDate.getDate() + i);\n        const dayEnd = new Date(dayStart);\n        dayEnd.setDate(dayEnd.getDate() + 1);\n        \n        const [dayCompleted, dayCancelled, dayRefunded] = await Promise.all([\n          prisma.booking.count({\n            where: {\n              status: 'COMPLETED',\n              createdAt: { gte: dayStart, lt: dayEnd }\n            }\n          }),\n          prisma.booking.count({\n            where: {\n              status: 'CANCELLED',\n              createdAt: { gte: dayStart, lt: dayEnd }\n            }\n          }),\n          prisma.booking.count({\n            where: {\n              paymentStatus: 'REFUNDED',\n              createdAt: { gte: dayStart, lt: dayEnd }\n            }\n          })\n        ]);\n        \n        const dayIndex = dayStart.getDay();\n        chartData.push({\n          day: days[dayIndex === 0 ? 6 : dayIndex - 1],\n          values: [dayCompleted, dayCancelled, dayRefunded]\n        });\n      }\n    } else if (period === 'Monthly') {\n      // Show weekly data for the month\n      const weeks = ['Week 1', 'Week 2', 'Week 3', 'Week 4'];\n      for (let i = 0; i < 4; i++) {\n        const weekStart = new Date(startDate);\n        weekStart.setDate(startDate.getDate() + (i * 7));\n        const weekEnd = new Date(weekStart);\n        weekEnd.setDate(weekEnd.getDate() + 7);\n        \n        const [weekCompleted, weekCancelled, weekRefunded] = await Promise.all([\n          prisma.booking.count({\n            where: {\n              status: 'COMPLETED',\n              createdAt: { gte: weekStart, lt: weekEnd }\n            }\n          }),\n          prisma.booking.count({\n            where: {\n              status: 'CANCELLED',\n              createdAt: { gte: weekStart, lt: weekEnd }\n            }\n          }),\n          prisma.booking.count({\n            where: {\n              paymentStatus: 'REFUNDED',\n              createdAt: { gte: weekStart, lt: weekEnd }\n            }\n          })\n        ]);\n        \n        chartData.push({\n          day: weeks[i],\n          values: [weekCompleted, weekCancelled, weekRefunded]\n        });\n      }\n    } else {\n      // Show monthly data for the year\n      const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n      for (let i = 0; i < 12; i++) {\n        const monthStart = new Date(now.getFullYear(), i, 1);\n        const monthEnd = new Date(now.getFullYear(), i + 1, 0);\n        \n        const [monthCompleted, monthCancelled, monthRefunded] = await Promise.all([\n          prisma.booking.count({\n            where: {\n              status: 'COMPLETED',\n              createdAt: { gte: monthStart, lte: monthEnd }\n            }\n          }),\n          prisma.booking.count({\n            where: {\n              status: 'CANCELLED',\n              createdAt: { gte: monthStart, lte: monthEnd }\n            }\n          }),\n          prisma.booking.count({\n            where: {\n              paymentStatus: 'REFUNDED',\n              createdAt: { gte: monthStart, lte: monthEnd }\n            }\n          })\n        ]);\n        \n        chartData.push({\n          day: months[i],\n          values: [monthCompleted, monthCancelled, monthRefunded]\n        });\n      }\n    }\n\n    res.json({\n      success: true,\n      stats: {\n        completed,\n        cancelled,\n        refunded,\n        pending,\n        confirmed,\n        total: completed + cancelled + refunded + pending + confirmed\n      },\n      chartData\n    });\n\n  } catch (error) {\n    console.error('Booking stats error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Get field utilization stats\nrouter.get('/field-utilization', authenticateAdmin, async (req, res) => {\n  try {\n    const { period = 'Today' } = req.query;\n    \n    const now = new Date();\n    const startOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    \n    let startDate: Date;\n    let endDate = now;\n    \n    switch(period) {\n      case 'Today':\n        startDate = startOfToday;\n        break;\n      case 'Weekly':\n        startDate = new Date(startOfToday);\n        startDate.setDate(startDate.getDate() - 7);\n        break;\n      case 'Monthly':\n        startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n        break;\n      case 'Yearly':\n        startDate = new Date(now.getFullYear(), 0, 1);\n        break;\n      default:\n        startDate = startOfToday;\n    }\n\n    // Get top fields by bookings\n    const topFields = await prisma.field.findMany({\n      take: 5,\n      orderBy: {\n        bookings: {\n          _count: 'desc'\n        }\n      },\n      include: {\n        _count: {\n          select: {\n            bookings: {\n              where: {\n                createdAt: { gte: startDate, lte: endDate }\n              }\n            }\n          }\n        }\n      }\n    });\n\n    // Calculate utilization chart data\n    let chartData = [];\n    \n    if (period === 'Today' || period === 'Weekly') {\n      // Show daily utilization\n      const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n      for (let i = 0; i < 7; i++) {\n        const dayStart = new Date(startDate);\n        dayStart.setDate(startDate.getDate() + i);\n        const dayEnd = new Date(dayStart);\n        dayEnd.setDate(dayEnd.getDate() + 1);\n        \n        const [fieldsWithBookings, totalBookings, avgUtilization] = await Promise.all([\n          prisma.field.count({\n            where: {\n              bookings: {\n                some: {\n                  createdAt: { gte: dayStart, lt: dayEnd }\n                }\n              }\n            }\n          }),\n          prisma.booking.count({\n            where: {\n              createdAt: { gte: dayStart, lt: dayEnd }\n            }\n          }),\n          prisma.field.count()\n        ]);\n        \n        const utilizationRate = avgUtilization > 0 ? Math.round((fieldsWithBookings / avgUtilization) * 100) : 0;\n        const dayIndex = dayStart.getDay();\n        \n        chartData.push({\n          day: days[dayIndex === 0 ? 6 : dayIndex - 1],\n          values: [fieldsWithBookings, totalBookings, utilizationRate]\n        });\n      }\n    } else if (period === 'Monthly') {\n      // Show weekly utilization\n      const weeks = ['Week 1', 'Week 2', 'Week 3', 'Week 4'];\n      for (let i = 0; i < 4; i++) {\n        const weekStart = new Date(startDate);\n        weekStart.setDate(startDate.getDate() + (i * 7));\n        const weekEnd = new Date(weekStart);\n        weekEnd.setDate(weekEnd.getDate() + 7);\n        \n        const [fieldsWithBookings, totalBookings, avgUtilization] = await Promise.all([\n          prisma.field.count({\n            where: {\n              bookings: {\n                some: {\n                  createdAt: { gte: weekStart, lt: weekEnd }\n                }\n              }\n            }\n          }),\n          prisma.booking.count({\n            where: {\n              createdAt: { gte: weekStart, lt: weekEnd }\n            }\n          }),\n          prisma.field.count()\n        ]);\n        \n        const utilizationRate = avgUtilization > 0 ? Math.round((fieldsWithBookings / avgUtilization) * 100) : 0;\n        \n        chartData.push({\n          day: weeks[i],\n          values: [fieldsWithBookings, totalBookings, utilizationRate]\n        });\n      }\n    } else {\n      // Show monthly utilization\n      const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n      for (let i = 0; i < 12; i++) {\n        const monthStart = new Date(now.getFullYear(), i, 1);\n        const monthEnd = new Date(now.getFullYear(), i + 1, 0);\n        \n        const [fieldsWithBookings, totalBookings, avgUtilization] = await Promise.all([\n          prisma.field.count({\n            where: {\n              bookings: {\n                some: {\n                  createdAt: { gte: monthStart, lte: monthEnd }\n                }\n              }\n            }\n          }),\n          prisma.booking.count({\n            where: {\n              createdAt: { gte: monthStart, lte: monthEnd }\n            }\n          }),\n          prisma.field.count()\n        ]);\n        \n        const utilizationRate = avgUtilization > 0 ? Math.round((fieldsWithBookings / avgUtilization) * 100) : 0;\n        \n        chartData.push({\n          day: months[i],\n          values: [fieldsWithBookings, totalBookings, utilizationRate]\n        });\n      }\n    }\n\n    res.json({\n      success: true,\n      topFields,\n      chartData\n    });\n\n  } catch (error) {\n    console.error('Field utilization error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Get all claims for admin\nrouter.get('/claims', authenticateAdmin, async (req, res) => {\n  try {\n    const { status, page = '1', limit = '10' } = req.query;\n    const skip = (parseInt(page as string) - 1) * parseInt(limit as string);\n    \n    const where: any = {};\n    if (status) {\n      where.status = status;\n    }\n\n    const [claimsWithoutField, total] = await Promise.all([\n      prisma.fieldClaim.findMany({\n        where,\n        orderBy: {\n          createdAt: 'desc'\n        },\n        skip,\n        take: parseInt(limit as string)\n      }),\n      prisma.fieldClaim.count({ where })\n    ]);\n\n    // Fetch field data separately to handle null fields gracefully\n    const claims = await Promise.all(\n      claimsWithoutField.map(async (claim) => {\n        let field = null;\n        if (claim.fieldId) {\n          try {\n            field = await prisma.field.findUnique({\n              where: { id: claim.fieldId },\n              select: {\n                id: true,\n                name: true,\n                address: true,\n                city: true,\n                state: true\n              }\n            });\n          } catch (err) {\n            // Field might not exist, continue with null\n          }\n        }\n        return {\n          ...claim,\n          field\n        };\n      })\n    );\n\n    res.json({\n      success: true,\n      claims,\n      total,\n      pages: Math.ceil(total / parseInt(limit as string)),\n      currentPage: parseInt(page as string)\n    });\n\n  } catch (error) {\n    console.error('Get claims error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Get single claim details for admin\nrouter.get('/claims/:claimId', authenticateAdmin, async (req, res) => {\n  try {\n    const { claimId } = req.params;\n\n    const claim = await prisma.fieldClaim.findUnique({\n      where: { id: claimId }\n    });\n\n    if (!claim) {\n      return res.status(404).json({ error: 'Claim not found' });\n    }\n\n    // Fetch field data separately to handle null fields\n    let field = null;\n    if (claim.fieldId) {\n      try {\n        field = await prisma.field.findUnique({\n          where: { id: claim.fieldId },\n          select: {\n            id: true,\n            name: true,\n            address: true,\n            city: true,\n            state: true,\n            location: true\n          }\n        });\n      } catch (err) {\n        // Field might not exist, continue with null\n      }\n    }\n\n    res.json({\n      success: true,\n      claim: {\n        ...claim,\n        field\n      }\n    });\n\n  } catch (error) {\n    console.error('Get claim details error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Update claim status (approve/reject) for admin\nrouter.patch('/claims/:claimId/status', authenticateAdmin, async (req, res) => {\n  try {\n    const { claimId } = req.params;\n    const { status, reviewNotes } = req.body;\n    const adminId = (req as any).userId;\n\n    if (!['APPROVED', 'REJECTED'].includes(status)) {\n      return res.status(400).json({ error: 'Invalid status. Must be APPROVED or REJECTED' });\n    }\n\n    // Update the claim\n    const updatedClaim = await prisma.fieldClaim.update({\n      where: { id: claimId },\n      data: {\n        status,\n        reviewNotes,\n        reviewedAt: new Date(),\n        reviewedBy: adminId\n      },\n      include: {\n        field: true\n      }\n    });\n\n    // If approved, update the field\n    if (status === 'APPROVED' && updatedClaim.field) {\n      await prisma.field.update({\n        where: { id: updatedClaim.fieldId },\n        data: {\n          isClaimed: true,\n          ownerId: updatedClaim.userId || undefined\n        }\n      });\n    }\n\n    res.json({\n      success: true,\n      claim: updatedClaim,\n      message: `Claim ${status.toLowerCase()} successfully`\n    });\n\n  } catch (error) {\n    console.error('Update claim status error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\nexport default router;"],"names":["router","Router","prisma","PrismaClient","post","req","res","email","password","body","status","json","error","admin","user","findFirst","where","role","validPassword","bcrypt","compare","token","jwt","sign","userId","id","process","env","JWT_SECRET","expiresIn","_","adminData","success","console","get","authenticateAdmin","period","query","now","Date","startOfToday","getFullYear","getMonth","getDate","startDate","compareStartDate","compareEndDate","setDate","setMilliseconds","getMilliseconds","totalUsers","totalFields","totalBookings","totalRevenue","upcomingBookings","recentBookings","dogOwners","fieldOwners","yesterdayUsers","yesterdayFields","yesterdayBookings","yesterdayRevenue","yesterdayUpcomingBookings","Promise","all","count","field","booking","aggregate","_sum","totalPrice","paymentStatus","date","gte","in","findMany","take","orderBy","createdAt","include","lte","calculateGrowth","current","yesterday","Number","toFixed","currentRevenue","yesterdayRevenueValue","stats","growth","users","fields","bookings","revenue","page","limit","skip","parseInt","total","owner","payment","pages","Math","ceil","findUnique","params","select","name","phone","image","googleImage","emailVerified","updatedAt","_count","ownedFields","startTime","endTime","numberOfDogs","location","adminId","notifications","unreadCount","notification","OR","type","read","patch","update","data","readAt","updateMany","message","delete","payments","endDate","completed","cancelled","refunded","pending","confirmed","chartData","days","i","dayStart","dayEnd","dayCompleted","dayCancelled","dayRefunded","lt","dayIndex","getDay","push","day","values","weeks","weekStart","weekEnd","weekCompleted","weekCancelled","weekRefunded","months","monthStart","monthEnd","monthCompleted","monthCancelled","monthRefunded","topFields","fieldsWithBookings","avgUtilization","some","utilizationRate","round","claimsWithoutField","fieldClaim","claims","map","claim","fieldId","address","city","state","err","currentPage","claimId","reviewNotes","includes","updatedClaim","reviewedAt","reviewedBy","isClaimed","ownerId","undefined","toLowerCase"],"mappings":"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"}