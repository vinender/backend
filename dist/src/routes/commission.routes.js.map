{"version":3,"sources":["../../../src/routes/commission.routes.ts"],"sourcesContent":["import { Router } from 'express';\nimport prisma from '../config/database';\nimport { authenticateAdmin } from '../middleware/admin.middleware';\n\nconst router = Router();\n\n// Get system commission settings\nrouter.get('/settings', authenticateAdmin, async (req, res) => {\n  try {\n\n    // Get or create system settings\n    let settings = await prisma.systemSettings.findFirst();\n    \n    if (!settings) {\n      settings = await prisma.systemSettings.create({\n        data: {\n          defaultCommissionRate: 20 // Default 20% commission\n        }\n      });\n    }\n\n    res.json({\n      success: true,\n      data: settings\n    });\n  } catch (error) {\n    console.error('Error fetching commission settings:', error);\n    res.status(500).json({ \n      success: false, \n      message: 'Failed to fetch commission settings' \n    });\n  }\n});\n\n// Update default commission rate\nrouter.put('/settings', authenticateAdmin, async (req, res) => {\n  try {\n\n    const { defaultCommissionRate } = req.body;\n\n    // Validate commission rate\n    if (typeof defaultCommissionRate !== 'number' || defaultCommissionRate < 0 || defaultCommissionRate > 100) {\n      return res.status(400).json({\n        success: false,\n        message: 'Commission rate must be between 0 and 100'\n      });\n    }\n\n    // Get or create system settings\n    let settings = await prisma.systemSettings.findFirst();\n    \n    if (settings) {\n      settings = await prisma.systemSettings.update({\n        where: { id: settings.id },\n        data: { defaultCommissionRate }\n      });\n    } else {\n      settings = await prisma.systemSettings.create({\n        data: { defaultCommissionRate }\n      });\n    }\n\n    res.json({\n      success: true,\n      data: settings,\n      message: 'Default commission rate updated successfully'\n    });\n  } catch (error) {\n    console.error('Error updating commission settings:', error);\n    res.status(500).json({ \n      success: false, \n      message: 'Failed to update commission settings' \n    });\n  }\n});\n\n// Get field owner commission rate\nrouter.get('/field-owner/:userId', authenticateAdmin, async (req, res) => {\n  try {\n\n    const { userId } = req.params;\n\n    const user = await prisma.user.findUnique({\n      where: { id: userId },\n      select: {\n        id: true,\n        name: true,\n        email: true,\n        commissionRate: true\n      }\n    });\n\n    if (!user) {\n      return res.status(404).json({\n        success: false,\n        message: 'Field owner not found'\n      });\n    }\n\n    // Get default commission if user doesn't have custom rate\n    let defaultRate = 20;\n    if (!user.commissionRate) {\n      const settings = await prisma.systemSettings.findFirst();\n      if (settings) {\n        defaultRate = settings.defaultCommissionRate;\n      }\n    }\n\n    res.json({\n      success: true,\n      data: {\n        ...user,\n        effectiveCommissionRate: user.commissionRate || defaultRate,\n        isUsingDefault: !user.commissionRate\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching field owner commission:', error);\n    res.status(500).json({ \n      success: false, \n      message: 'Failed to fetch field owner commission' \n    });\n  }\n});\n\n// Update field owner commission rate\nrouter.put('/field-owner/:userId', authenticateAdmin, async (req, res) => {\n  try {\n\n    const { userId } = req.params;\n    const { commissionRate, useDefault } = req.body;\n\n    // If useDefault is true, set commission to null to use system default\n    if (useDefault) {\n      const user = await prisma.user.update({\n        where: { id: userId },\n        data: { commissionRate: null }\n      });\n\n      return res.json({\n        success: true,\n        data: user,\n        message: 'Field owner set to use default commission rate'\n      });\n    }\n\n    // Validate commission rate\n    if (typeof commissionRate !== 'number' || commissionRate < 0 || commissionRate > 100) {\n      return res.status(400).json({\n        success: false,\n        message: 'Commission rate must be between 0 and 100'\n      });\n    }\n\n    const user = await prisma.user.update({\n      where: { id: userId },\n      data: { commissionRate }\n    });\n\n    res.json({\n      success: true,\n      data: user,\n      message: 'Field owner commission rate updated successfully'\n    });\n  } catch (error) {\n    console.error('Error updating field owner commission:', error);\n    res.status(500).json({ \n      success: false, \n      message: 'Failed to update field owner commission' \n    });\n  }\n});\n\n// Get all field owners with commission rates\nrouter.get('/field-owners', authenticateAdmin, async (req, res) => {\n  try {\n\n    const { page = 1, limit = 10, search = '' } = req.query;\n    const skip = (Number(page) - 1) * Number(limit);\n\n    // Build search filter\n    const searchFilter = search\n      ? {\n          OR: [\n            { name: { contains: String(search), mode: 'insensitive' as const } },\n            { email: { contains: String(search), mode: 'insensitive' as const } }\n          ]\n        }\n      : {};\n\n    // Get field owners with commission rates\n    const fieldOwners = await prisma.user.findMany({\n      where: {\n        role: 'FIELD_OWNER',\n        ...searchFilter\n      },\n      select: {\n        id: true,\n        name: true,\n        email: true,\n        phone: true,\n        commissionRate: true,\n        createdAt: true,\n        _count: {\n          select: {\n            ownedFields: true\n          }\n        }\n      },\n      skip,\n      take: Number(limit),\n      orderBy: { createdAt: 'desc' }\n    });\n\n    // Get total count\n    const total = await prisma.user.count({\n      where: {\n        role: 'FIELD_OWNER',\n        ...searchFilter\n      }\n    });\n\n    // Get default commission rate\n    const settings = await prisma.systemSettings.findFirst();\n    const defaultRate = settings?.defaultCommissionRate || 20;\n\n    // Add effective commission rate to each field owner\n    const fieldOwnersWithEffectiveRate = fieldOwners.map(owner => ({\n      ...owner,\n      effectiveCommissionRate: owner.commissionRate || defaultRate,\n      isUsingDefault: !owner.commissionRate,\n      fieldsCount: owner._count.ownedFields\n    }));\n\n    res.json({\n      success: true,\n      data: {\n        fieldOwners: fieldOwnersWithEffectiveRate,\n        defaultCommissionRate: defaultRate,\n        pagination: {\n          page: Number(page),\n          limit: Number(limit),\n          total,\n          totalPages: Math.ceil(total / Number(limit))\n        }\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching field owners with commission:', error);\n    res.status(500).json({ \n      success: false, \n      message: 'Failed to fetch field owners' \n    });\n  }\n});\n\nexport default router;"],"names":["router","Router","get","authenticateAdmin","req","res","settings","prisma","systemSettings","findFirst","create","data","defaultCommissionRate","json","success","error","console","status","message","put","body","update","where","id","userId","params","user","findUnique","select","name","email","commissionRate","defaultRate","effectiveCommissionRate","isUsingDefault","useDefault","page","limit","search","query","skip","Number","searchFilter","OR","contains","String","mode","fieldOwners","findMany","role","phone","createdAt","_count","ownedFields","take","orderBy","total","count","fieldOwnersWithEffectiveRate","map","owner","fieldsCount","pagination","totalPages","Math","ceil"],"mappings":"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"}