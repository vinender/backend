{"version":3,"sources":["../../../src/routes/admin-payout.routes.ts"],"sourcesContent":["import { Router } from 'express';\nimport { protect } from '../middleware/auth.middleware';\nimport { requireRole } from '../middleware/role.middleware';\nimport refundService from '../services/refund.service';\nimport { processAutomaticTransfers } from '../jobs/payout.job';\n\nconst router = Router();\n\n// Require admin role for all routes\nrouter.use(protect);\nrouter.use(requireRole('ADMIN'));\n\n// Manually trigger payout processing for testing\nrouter.post('/process-payouts', async (req, res) => {\n  try {\n    console.log('Manually triggering payout processing...');\n    \n    // Process completed bookings past cancellation period\n    await refundService.processCompletedBookingPayouts();\n    \n    // Process automatic transfers\n    await processAutomaticTransfers();\n    \n    res.json({\n      success: true,\n      message: 'Payout processing triggered successfully'\n    });\n  } catch (error: any) {\n    console.error('Manual payout trigger error:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to process payouts'\n    });\n  }\n});\n\n// Get payout statistics\nrouter.get('/payout-stats', async (req, res) => {\n  try {\n    const prisma = (await import('../config/database')).default;\n    \n    // Get overall statistics\n    const [totalPayouts, pendingPayouts, completedPayouts, failedPayouts] = await Promise.all([\n      prisma.payout.count(),\n      prisma.payout.count({ where: { status: 'pending' } }),\n      prisma.payout.count({ where: { status: 'paid' } }),\n      prisma.payout.count({ where: { status: 'failed' } })\n    ]);\n\n    // Get total amounts\n    const [totalAmount, pendingAmount, paidAmount] = await Promise.all([\n      prisma.payout.aggregate({\n        _sum: { amount: true }\n      }),\n      prisma.payout.aggregate({\n        where: { status: 'pending' },\n        _sum: { amount: true }\n      }),\n      prisma.payout.aggregate({\n        where: { status: 'paid' },\n        _sum: { amount: true }\n      })\n    ]);\n\n    // Get bookings awaiting payout\n    const bookingsAwaitingPayout = await prisma.booking.count({\n      where: {\n        status: 'COMPLETED',\n        payoutStatus: null,\n        date: {\n          lte: new Date(Date.now() - 24 * 60 * 60 * 1000) // 24 hours old\n        }\n      }\n    });\n\n    res.json({\n      success: true,\n      stats: {\n        payouts: {\n          total: totalPayouts,\n          pending: pendingPayouts,\n          completed: completedPayouts,\n          failed: failedPayouts\n        },\n        amounts: {\n          total: totalAmount._sum.amount || 0,\n          pending: pendingAmount._sum.amount || 0,\n          paid: paidAmount._sum.amount || 0\n        },\n        bookingsAwaitingPayout\n      }\n    });\n  } catch (error: any) {\n    console.error('Payout stats error:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to get payout statistics'\n    });\n  }\n});\n\nexport default router;"],"names":["router","Router","use","protect","requireRole","post","req","res","console","log","refundService","processCompletedBookingPayouts","processAutomaticTransfers","json","success","message","error","status","get","prisma","default","totalPayouts","pendingPayouts","completedPayouts","failedPayouts","Promise","all","payout","count","where","totalAmount","pendingAmount","paidAmount","aggregate","_sum","amount","bookingsAwaitingPayout","booking","payoutStatus","date","lte","Date","now","stats","payouts","total","pending","completed","failed","amounts","paid"],"mappings":";;;;+BAqGA;;;eAAA;;;yBArGuB;gCACC;gCACI;sEACF;2BACgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAE1C,MAAMA,SAASC,IAAAA,eAAM;AAErB,oCAAoC;AACpCD,OAAOE,GAAG,CAACC,uBAAO;AAClBH,OAAOE,GAAG,CAACE,IAAAA,2BAAW,EAAC;AAEvB,iDAAiD;AACjDJ,OAAOK,IAAI,CAAC,oBAAoB,OAAOC,KAAKC;IAC1C,IAAI;QACFC,QAAQC,GAAG,CAAC;QAEZ,sDAAsD;QACtD,MAAMC,sBAAa,CAACC,8BAA8B;QAElD,8BAA8B;QAC9B,MAAMC,IAAAA,oCAAyB;QAE/BL,IAAIM,IAAI,CAAC;YACPC,SAAS;YACTC,SAAS;QACX;IACF,EAAE,OAAOC,OAAY;QACnBR,QAAQQ,KAAK,CAAC,gCAAgCA;QAC9CT,IAAIU,MAAM,CAAC,KAAKJ,IAAI,CAAC;YACnBC,SAAS;YACTE,OAAOA,MAAMD,OAAO,IAAI;QAC1B;IACF;AACF;AAEA,wBAAwB;AACxBf,OAAOkB,GAAG,CAAC,iBAAiB,OAAOZ,KAAKC;IACtC,IAAI;QACF,MAAMY,SAAS,AAAC,CAAA,MAAM,mEAAA,QAAO,uBAAoB,EAAGC,OAAO;QAE3D,yBAAyB;QACzB,MAAM,CAACC,cAAcC,gBAAgBC,kBAAkBC,cAAc,GAAG,MAAMC,QAAQC,GAAG,CAAC;YACxFP,OAAOQ,MAAM,CAACC,KAAK;YACnBT,OAAOQ,MAAM,CAACC,KAAK,CAAC;gBAAEC,OAAO;oBAAEZ,QAAQ;gBAAU;YAAE;YACnDE,OAAOQ,MAAM,CAACC,KAAK,CAAC;gBAAEC,OAAO;oBAAEZ,QAAQ;gBAAO;YAAE;YAChDE,OAAOQ,MAAM,CAACC,KAAK,CAAC;gBAAEC,OAAO;oBAAEZ,QAAQ;gBAAS;YAAE;SACnD;QAED,oBAAoB;QACpB,MAAM,CAACa,aAAaC,eAAeC,WAAW,GAAG,MAAMP,QAAQC,GAAG,CAAC;YACjEP,OAAOQ,MAAM,CAACM,SAAS,CAAC;gBACtBC,MAAM;oBAAEC,QAAQ;gBAAK;YACvB;YACAhB,OAAOQ,MAAM,CAACM,SAAS,CAAC;gBACtBJ,OAAO;oBAAEZ,QAAQ;gBAAU;gBAC3BiB,MAAM;oBAAEC,QAAQ;gBAAK;YACvB;YACAhB,OAAOQ,MAAM,CAACM,SAAS,CAAC;gBACtBJ,OAAO;oBAAEZ,QAAQ;gBAAO;gBACxBiB,MAAM;oBAAEC,QAAQ;gBAAK;YACvB;SACD;QAED,+BAA+B;QAC/B,MAAMC,yBAAyB,MAAMjB,OAAOkB,OAAO,CAACT,KAAK,CAAC;YACxDC,OAAO;gBACLZ,QAAQ;gBACRqB,cAAc;gBACdC,MAAM;oBACJC,KAAK,IAAIC,KAAKA,KAAKC,GAAG,KAAK,KAAK,KAAK,KAAK,MAAM,eAAe;gBACjE;YACF;QACF;QAEAnC,IAAIM,IAAI,CAAC;YACPC,SAAS;YACT6B,OAAO;gBACLC,SAAS;oBACPC,OAAOxB;oBACPyB,SAASxB;oBACTyB,WAAWxB;oBACXyB,QAAQxB;gBACV;gBACAyB,SAAS;oBACPJ,OAAOf,YAAYI,IAAI,CAACC,MAAM,IAAI;oBAClCW,SAASf,cAAcG,IAAI,CAACC,MAAM,IAAI;oBACtCe,MAAMlB,WAAWE,IAAI,CAACC,MAAM,IAAI;gBAClC;gBACAC;YACF;QACF;IACF,EAAE,OAAOpB,OAAY;QACnBR,QAAQQ,KAAK,CAAC,uBAAuBA;QACrCT,IAAIU,MAAM,CAAC,KAAKJ,IAAI,CAAC;YACnBC,SAAS;YACTE,OAAOA,MAAMD,OAAO,IAAI;QAC1B;IACF;AACF;MAEA,WAAef"}