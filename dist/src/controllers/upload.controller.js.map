{"version":3,"sources":["../../../src/controllers/upload.controller.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';\nimport multer from 'multer';\nimport sharp from 'sharp';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Initialize S3 client\nconst s3Client = new S3Client({\n  region: process.env.AWS_REGION || 'us-east-1',\n  credentials: {\n    accessKeyId: process.env.AWS_ACCESS_KEY_ID!,\n    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!,\n  },\n});\n\n// Configure multer for memory storage\nconst storage = multer.memoryStorage();\nexport const upload = multer({\n  storage,\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB\n  },\n  fileFilter: (req, file, cb) => {\n    // Accept images only\n    if (!file.mimetype.startsWith('image/')) {\n      return cb(new Error('Only image files are allowed'));\n    }\n    cb(null, true);\n  },\n});\n\n// Upload file directly to S3\nexport const uploadDirect = async (req: Request, res: Response) => {\n  try {\n    if (!req.file) {\n      return res.status(400).json({\n        success: false,\n        message: 'No file uploaded',\n      });\n    }\n\n    const { folder = 'uploads', convertToWebp = 'true' } = req.body;\n    \n    let fileBuffer = req.file.buffer;\n    let mimeType = req.file.mimetype;\n    let fileExtension = req.file.originalname.split('.').pop() || 'jpg';\n\n    // Convert to WebP if requested and it's an image\n    if (convertToWebp === 'true' && req.file.mimetype.startsWith('image/')) {\n      try {\n        fileBuffer = await sharp(req.file.buffer)\n          .webp({ quality: 80 })\n          .toBuffer();\n        mimeType = 'image/webp';\n        fileExtension = 'webp';\n      } catch (error) {\n        console.error('Error converting to WebP:', error);\n        // Continue with original file if conversion fails\n      }\n    }\n\n    // Generate unique filename\n    const fileName = `${uuidv4()}.${fileExtension}`;\n    const key = `${folder}/${fileName}`;\n\n    // Upload to S3 with public-read ACL\n    const command = new PutObjectCommand({\n      Bucket: process.env.AWS_S3_BUCKET!,\n      Key: key,\n      Body: fileBuffer,\n      ContentType: mimeType,\n      ACL: 'public-read', // Make the file publicly accessible\n    });\n\n    await s3Client.send(command);\n\n    // Return the file URL\n    const fileUrl = `https://${process.env.AWS_S3_BUCKET}.s3.${process.env.AWS_REGION || 'us-east-1'}.amazonaws.com/${key}`;\n\n    res.status(200).json({\n      success: true,\n      fileUrl,\n      key,\n    });\n  } catch (error: any) {\n    console.error('Error uploading file:', error);\n    res.status(500).json({\n      success: false,\n      message: error.message || 'Failed to upload file',\n    });\n  }\n};\n\n// Upload multiple files\nexport const uploadMultiple = async (req: Request, res: Response) => {\n  try {\n    const files = req.files as Express.Multer.File[];\n    \n    if (!files || files.length === 0) {\n      return res.status(400).json({\n        success: false,\n        message: 'No files uploaded',\n      });\n    }\n\n    const { folder = 'uploads', convertToWebp = 'true' } = req.body;\n    const uploadedFiles = [];\n\n    for (const file of files) {\n      let fileBuffer = file.buffer;\n      let mimeType = file.mimetype;\n      let fileExtension = file.originalname.split('.').pop() || 'jpg';\n\n      // Convert to WebP if requested\n      if (convertToWebp === 'true' && file.mimetype.startsWith('image/')) {\n        try {\n          fileBuffer = await sharp(file.buffer)\n            .webp({ quality: 80 })\n            .toBuffer();\n          mimeType = 'image/webp';\n          fileExtension = 'webp';\n        } catch (error) {\n          console.error('Error converting to WebP:', error);\n        }\n      }\n\n      const fileName = `${uuidv4()}.${fileExtension}`;\n      const key = `${folder}/${fileName}`;\n\n      const command = new PutObjectCommand({\n        Bucket: process.env.AWS_S3_BUCKET!,\n        Key: key,\n        Body: fileBuffer,\n        ContentType: mimeType,\n        ACL: 'public-read',\n      });\n\n      await s3Client.send(command);\n\n      const fileUrl = `https://${process.env.AWS_S3_BUCKET}.s3.${process.env.AWS_REGION || 'us-east-1'}.amazonaws.com/${key}`;\n      \n      uploadedFiles.push({\n        fileUrl,\n        key,\n        originalName: file.originalname,\n      });\n    }\n\n    res.status(200).json({\n      success: true,\n      files: uploadedFiles,\n    });\n  } catch (error: any) {\n    console.error('Error uploading files:', error);\n    res.status(500).json({\n      success: false,\n      message: error.message || 'Failed to upload files',\n    });\n  }\n};"],"names":["upload","uploadDirect","uploadMultiple","s3Client","S3Client","region","process","env","AWS_REGION","credentials","accessKeyId","AWS_ACCESS_KEY_ID","secretAccessKey","AWS_SECRET_ACCESS_KEY","storage","multer","memoryStorage","limits","fileSize","fileFilter","req","file","cb","mimetype","startsWith","Error","res","status","json","success","message","folder","convertToWebp","body","fileBuffer","buffer","mimeType","fileExtension","originalname","split","pop","sharp","webp","quality","toBuffer","error","console","fileName","uuidv4","key","command","PutObjectCommand","Bucket","AWS_S3_BUCKET","Key","Body","ContentType","ACL","send","fileUrl","files","length","uploadedFiles","push","originalName"],"mappings":"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"}