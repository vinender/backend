{"version":3,"sources":["../../../src/controllers/auto-payout.controller.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { automaticPayoutService } from '../services/auto-payout.service';\nimport { asyncHandler } from '../utils/asyncHandler';\nimport { AppError } from '../utils/AppError';\nimport prisma from '../config/database';\n\nclass AutoPayoutController {\n  /**\n   * Manually trigger payout processing (Admin only)\n   */\n  triggerPayoutProcessing = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const userRole = (req as any).user.role;\n    \n    if (userRole !== 'ADMIN') {\n      throw new AppError('Only admins can trigger manual payout processing', 403);\n    }\n\n    const results = await automaticPayoutService.processEligiblePayouts();\n\n    res.json({\n      success: true,\n      message: 'Payout processing completed',\n      data: {\n        processed: results.processed,\n        skipped: results.skipped,\n        failed: results.failed,\n        details: results.details\n      }\n    });\n  });\n\n  /**\n   * Get payout summary for field owner\n   */\n  getPayoutSummary = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const userId = (req as any).user.id;\n    const userRole = (req as any).user.role;\n    \n    if (userRole !== 'FIELD_OWNER' && userRole !== 'ADMIN') {\n      throw new AppError('Only field owners can view payout summary', 403);\n    }\n\n    const summary = await automaticPayoutService.getPayoutSummary(userId);\n\n    res.json({\n      success: true,\n      data: summary\n    });\n  });\n\n  /**\n   * Process a specific booking payout (Admin only)\n   */\n  processBookingPayout = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const userRole = (req as any).user.role;\n    const { bookingId } = req.params;\n    \n    if (userRole !== 'ADMIN') {\n      throw new AppError('Only admins can manually process payouts', 403);\n    }\n\n    const payout = await automaticPayoutService.processBookingPayoutAfterCancellationWindow(bookingId);\n\n    if (!payout) {\n      return res.json({\n        success: false,\n        message: 'Booking not eligible for payout or already processed'\n      });\n    }\n\n    res.json({\n      success: true,\n      message: 'Payout processed successfully',\n      data: payout\n    });\n  });\n\n  /**\n   * Process refund with fee adjustment\n   */\n  processRefundWithFees = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const { bookingId } = req.params;\n    const { reason } = req.body;\n    const userId = (req as any).user.id;\n    const userRole = (req as any).user.role;\n\n    // Verify authorization\n    if (userRole !== 'ADMIN') {\n      // If not admin, verify the user owns the booking\n      const booking = await prisma.booking.findUnique({\n        where: { id: bookingId }\n      });\n\n      if (!booking) {\n        throw new AppError('Booking not found', 404);\n      }\n\n      if (booking.userId !== userId) {\n        throw new AppError('You are not authorized to refund this booking', 403);\n      }\n    }\n\n    const refund = await automaticPayoutService.processRefundWithFeeAdjustment(\n      bookingId,\n      reason || 'Customer requested refund'\n    );\n\n    res.json({\n      success: true,\n      message: 'Refund processed successfully. The amount will be credited to your account within 5-7 business days.',\n      data: refund\n    });\n  });\n}\n\nexport default new AutoPayoutController();"],"names":["AutoPayoutController","triggerPayoutProcessing","asyncHandler","req","res","next","userRole","user","role","AppError","results","automaticPayoutService","processEligiblePayouts","json","success","message","data","processed","skipped","failed","details","getPayoutSummary","userId","id","summary","processBookingPayout","bookingId","params","payout","processBookingPayoutAfterCancellationWindow","processRefundWithFees","reason","body","booking","prisma","findUnique","where","refund","processRefundWithFeeAdjustment"],"mappings":";;;;+BAmHA;;;eAAA;;;mCAlHuC;8BACV;0BACJ;iEACN;;;;;;AAEnB,MAAMA;IACJ;;GAEC,GACDC,0BAA0BC,IAAAA,0BAAY,EAAC,OAAOC,KAAcC,KAAeC;QACzE,MAAMC,WAAW,AAACH,IAAYI,IAAI,CAACC,IAAI;QAEvC,IAAIF,aAAa,SAAS;YACxB,MAAM,IAAIG,kBAAQ,CAAC,oDAAoD;QACzE;QAEA,MAAMC,UAAU,MAAMC,yCAAsB,CAACC,sBAAsB;QAEnER,IAAIS,IAAI,CAAC;YACPC,SAAS;YACTC,SAAS;YACTC,MAAM;gBACJC,WAAWP,QAAQO,SAAS;gBAC5BC,SAASR,QAAQQ,OAAO;gBACxBC,QAAQT,QAAQS,MAAM;gBACtBC,SAASV,QAAQU,OAAO;YAC1B;QACF;IACF,GAAG;IAEH;;GAEC,GACDC,mBAAmBnB,IAAAA,0BAAY,EAAC,OAAOC,KAAcC,KAAeC;QAClE,MAAMiB,SAAS,AAACnB,IAAYI,IAAI,CAACgB,EAAE;QACnC,MAAMjB,WAAW,AAACH,IAAYI,IAAI,CAACC,IAAI;QAEvC,IAAIF,aAAa,iBAAiBA,aAAa,SAAS;YACtD,MAAM,IAAIG,kBAAQ,CAAC,6CAA6C;QAClE;QAEA,MAAMe,UAAU,MAAMb,yCAAsB,CAACU,gBAAgB,CAACC;QAE9DlB,IAAIS,IAAI,CAAC;YACPC,SAAS;YACTE,MAAMQ;QACR;IACF,GAAG;IAEH;;GAEC,GACDC,uBAAuBvB,IAAAA,0BAAY,EAAC,OAAOC,KAAcC,KAAeC;QACtE,MAAMC,WAAW,AAACH,IAAYI,IAAI,CAACC,IAAI;QACvC,MAAM,EAAEkB,SAAS,EAAE,GAAGvB,IAAIwB,MAAM;QAEhC,IAAIrB,aAAa,SAAS;YACxB,MAAM,IAAIG,kBAAQ,CAAC,4CAA4C;QACjE;QAEA,MAAMmB,SAAS,MAAMjB,yCAAsB,CAACkB,2CAA2C,CAACH;QAExF,IAAI,CAACE,QAAQ;YACX,OAAOxB,IAAIS,IAAI,CAAC;gBACdC,SAAS;gBACTC,SAAS;YACX;QACF;QAEAX,IAAIS,IAAI,CAAC;YACPC,SAAS;YACTC,SAAS;YACTC,MAAMY;QACR;IACF,GAAG;IAEH;;GAEC,GACDE,wBAAwB5B,IAAAA,0BAAY,EAAC,OAAOC,KAAcC,KAAeC;QACvE,MAAM,EAAEqB,SAAS,EAAE,GAAGvB,IAAIwB,MAAM;QAChC,MAAM,EAAEI,MAAM,EAAE,GAAG5B,IAAI6B,IAAI;QAC3B,MAAMV,SAAS,AAACnB,IAAYI,IAAI,CAACgB,EAAE;QACnC,MAAMjB,WAAW,AAACH,IAAYI,IAAI,CAACC,IAAI;QAEvC,uBAAuB;QACvB,IAAIF,aAAa,SAAS;YACxB,iDAAiD;YACjD,MAAM2B,UAAU,MAAMC,iBAAM,CAACD,OAAO,CAACE,UAAU,CAAC;gBAC9CC,OAAO;oBAAEb,IAAIG;gBAAU;YACzB;YAEA,IAAI,CAACO,SAAS;gBACZ,MAAM,IAAIxB,kBAAQ,CAAC,qBAAqB;YAC1C;YAEA,IAAIwB,QAAQX,MAAM,KAAKA,QAAQ;gBAC7B,MAAM,IAAIb,kBAAQ,CAAC,iDAAiD;YACtE;QACF;QAEA,MAAM4B,SAAS,MAAM1B,yCAAsB,CAAC2B,8BAA8B,CACxEZ,WACAK,UAAU;QAGZ3B,IAAIS,IAAI,CAAC;YACPC,SAAS;YACTC,SAAS;YACTC,MAAMqB;QACR;IACF,GAAG;AACL;MAEA,WAAe,IAAIrC"}