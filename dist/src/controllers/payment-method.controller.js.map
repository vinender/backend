{"version":3,"sources":["../../../src/controllers/payment-method.controller.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport { stripe } from '../config/stripe.config';\nimport prisma from '../config/database';\n\ninterface AuthRequest extends Request {\n  user?: any;\n}\n\nexport const paymentMethodController = {\n  // Create or get Stripe customer for user\n  async getOrCreateStripeCustomer(userId: string) {\n    const user = await prisma.user.findUnique({\n      where: { id: userId }\n    });\n\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    // If user already has a Stripe customer ID, verify it still exists\n    if (user.stripeCustomerId) {\n      try {\n        // Try to retrieve the customer from Stripe\n        const customer = await stripe.customers.retrieve(user.stripeCustomerId);\n        \n        // Check if customer is deleted\n        if ((customer as any).deleted) {\n          console.log(`Stripe customer ${user.stripeCustomerId} was deleted, creating new one`);\n        } else {\n          // Customer exists and is valid\n          return user.stripeCustomerId;\n        }\n      } catch (error: any) {\n        // Customer doesn't exist in Stripe (404 error)\n        if (error.statusCode === 404 || error.code === 'resource_missing') {\n          console.log(`Stripe customer ${user.stripeCustomerId} not found, creating new one`);\n        } else {\n          // Some other error occurred, throw it\n          throw error;\n        }\n      }\n    }\n\n    // Create a new Stripe customer\n    const customer = await stripe.customers.create({\n      email: user.email,\n      name: user.name || undefined,\n      metadata: {\n        userId: user.id\n      }\n    });\n\n    // Save the Stripe customer ID to the user\n    await prisma.user.update({\n      where: { id: userId },\n      data: { stripeCustomerId: customer.id }\n    });\n\n    return customer.id;\n  },\n\n  // Create setup intent for adding a new card\n  async createSetupIntent(req: AuthRequest, res: Response) {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ error: 'Unauthorized' });\n      }\n\n      const customerId = await paymentMethodController.getOrCreateStripeCustomer(userId);\n\n      // Create a SetupIntent to collect card details\n      const setupIntent = await stripe.setupIntents.create({\n        customer: customerId,\n        payment_method_types: ['card'],\n        metadata: {\n          userId\n        }\n      });\n\n      res.json({\n        success: true,\n        clientSecret: setupIntent.client_secret,\n        customerId\n      });\n    } catch (error: any) {\n      console.error('Create setup intent error:', error);\n      res.status(500).json({\n        success: false,\n        error: error.message || 'Failed to create setup intent'\n      });\n    }\n  },\n\n  // Save payment method after successful setup\n  async savePaymentMethod(req: AuthRequest, res: Response) {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ error: 'Unauthorized' });\n      }\n\n      const { paymentMethodId, isDefault } = req.body;\n\n      if (!paymentMethodId) {\n        return res.status(400).json({ error: 'Payment method ID is required' });\n      }\n\n      // Retrieve payment method from Stripe\n      const paymentMethod = await stripe.paymentMethods.retrieve(paymentMethodId);\n\n      // Check if payment method already exists in our database\n      const existingMethod = await prisma.paymentMethod.findUnique({\n        where: { stripePaymentMethodId: paymentMethodId }\n      });\n\n      if (existingMethod) {\n        return res.status(400).json({ error: 'Payment method already saved' });\n      }\n\n      // If this is set as default, unset other defaults\n      if (isDefault) {\n        await prisma.paymentMethod.updateMany({\n          where: { userId },\n          data: { isDefault: false }\n        });\n      }\n\n      // Save payment method to database\n      const savedMethod = await prisma.paymentMethod.create({\n        data: {\n          userId,\n          stripePaymentMethodId: paymentMethodId,\n          type: paymentMethod.type,\n          brand: paymentMethod.card?.brand || null,\n          last4: paymentMethod.card?.last4 || '',\n          expiryMonth: paymentMethod.card?.exp_month || null,\n          expiryYear: paymentMethod.card?.exp_year || null,\n          cardholderName: paymentMethod.billing_details?.name || null,\n          isDefault: isDefault || false\n        }\n      });\n\n      res.json({\n        success: true,\n        paymentMethod: savedMethod\n      });\n    } catch (error: any) {\n      console.error('Save payment method error:', error);\n      res.status(500).json({\n        success: false,\n        error: error.message || 'Failed to save payment method'\n      });\n    }\n  },\n\n  // Get all payment methods for a user\n  async getPaymentMethods(req: AuthRequest, res: Response) {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ error: 'Unauthorized' });\n      }\n\n      const paymentMethods = await prisma.paymentMethod.findMany({\n        where: { userId },\n        orderBy: [\n          { isDefault: 'desc' },\n          { createdAt: 'desc' }\n        ]\n      });\n\n      res.json({\n        success: true,\n        paymentMethods\n      });\n    } catch (error: any) {\n      console.error('Get payment methods error:', error);\n      res.status(500).json({\n        success: false,\n        error: error.message || 'Failed to fetch payment methods'\n      });\n    }\n  },\n\n  // Set a payment method as default\n  async setDefaultPaymentMethod(req: AuthRequest, res: Response) {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ error: 'Unauthorized' });\n      }\n\n      const { paymentMethodId } = req.params;\n\n      // Check if payment method exists and belongs to user\n      const paymentMethod = await prisma.paymentMethod.findFirst({\n        where: {\n          id: paymentMethodId,\n          userId\n        }\n      });\n\n      if (!paymentMethod) {\n        return res.status(404).json({ error: 'Payment method not found' });\n      }\n\n      // Unset all other defaults\n      await prisma.paymentMethod.updateMany({\n        where: { userId },\n        data: { isDefault: false }\n      });\n\n      // Set this one as default\n      const updatedMethod = await prisma.paymentMethod.update({\n        where: { id: paymentMethodId },\n        data: { isDefault: true }\n      });\n\n      // Also set it as default in Stripe\n      try {\n        const customerId = await paymentMethodController.getOrCreateStripeCustomer(userId);\n        await stripe.customers.update(customerId, {\n          invoice_settings: {\n            default_payment_method: paymentMethod.stripePaymentMethodId\n          }\n        });\n      } catch (stripeError) {\n        console.error('Error setting default payment method in Stripe:', stripeError);\n        // Continue even if Stripe update fails - local DB is already updated\n      }\n\n      res.json({\n        success: true,\n        paymentMethod: updatedMethod\n      });\n    } catch (error: any) {\n      console.error('Set default payment method error:', error);\n      res.status(500).json({\n        success: false,\n        error: error.message || 'Failed to set default payment method'\n      });\n    }\n  },\n\n  // Delete a payment method\n  async deletePaymentMethod(req: AuthRequest, res: Response) {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ error: 'Unauthorized' });\n      }\n\n      const { paymentMethodId } = req.params;\n\n      // Check if payment method exists and belongs to user\n      const paymentMethod = await prisma.paymentMethod.findFirst({\n        where: {\n          id: paymentMethodId,\n          userId\n        }\n      });\n\n      if (!paymentMethod) {\n        return res.status(404).json({ error: 'Payment method not found' });\n      }\n\n      // Detach from Stripe customer\n      try {\n        await stripe.paymentMethods.detach(paymentMethod.stripePaymentMethodId);\n      } catch (stripeError) {\n        console.error('Error detaching from Stripe:', stripeError);\n        // Continue with local deletion even if Stripe detach fails\n      }\n\n      // Delete from database\n      await prisma.paymentMethod.delete({\n        where: { id: paymentMethodId }\n      });\n\n      // If this was the default, set another as default\n      if (paymentMethod.isDefault) {\n        const nextDefault = await prisma.paymentMethod.findFirst({\n          where: { userId },\n          orderBy: { createdAt: 'desc' }\n        });\n\n        if (nextDefault) {\n          await prisma.paymentMethod.update({\n            where: { id: nextDefault.id },\n            data: { isDefault: true }\n          });\n        }\n      }\n\n      res.json({\n        success: true,\n        message: 'Payment method deleted successfully'\n      });\n    } catch (error: any) {\n      console.error('Delete payment method error:', error);\n      res.status(500).json({\n        success: false,\n        error: error.message || 'Failed to delete payment method'\n      });\n    }\n  }\n};"],"names":["paymentMethodController","getOrCreateStripeCustomer","userId","user","prisma","findUnique","where","id","Error","stripeCustomerId","customer","stripe","customers","retrieve","deleted","console","log","error","statusCode","code","create","email","name","undefined","metadata","update","data","createSetupIntent","req","res","status","json","customerId","setupIntent","setupIntents","payment_method_types","success","clientSecret","client_secret","message","savePaymentMethod","paymentMethodId","isDefault","body","paymentMethod","paymentMethods","existingMethod","stripePaymentMethodId","updateMany","savedMethod","type","brand","card","last4","expiryMonth","exp_month","expiryYear","exp_year","cardholderName","billing_details","getPaymentMethods","findMany","orderBy","createdAt","setDefaultPaymentMethod","params","findFirst","updatedMethod","invoice_settings","default_payment_method","stripeError","deletePaymentMethod","detach","delete","nextDefault"],"mappings":"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"}