{"version":3,"sources":["../../../src/controllers/faq.controller.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\n// Get all FAQs (public)\nexport const getFAQs = async (req: Request, res: Response) => {\n  try {\n    const { category } = req.query;\n    \n    const where: any = { isActive: true };\n    if (category) {\n      where.category = category;\n    }\n\n    const faqs = await prisma.fAQ.findMany({\n      where,\n      orderBy: [\n        { category: 'asc' },\n        { order: 'asc' },\n        { createdAt: 'desc' }\n      ]\n    });\n\n    // Group FAQs by category\n    const groupedFAQs = faqs.reduce((acc: any, faq) => {\n      const cat = faq.category || 'general';\n      if (!acc[cat]) {\n        acc[cat] = [];\n      }\n      acc[cat].push(faq);\n      return acc;\n    }, {});\n\n    res.json({\n      success: true,\n      data: {\n        faqs,\n        grouped: groupedFAQs\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching FAQs:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Failed to fetch FAQs'\n    });\n  }\n};\n\n// Get all FAQs for admin (including inactive)\nexport const getAllFAQs = async (req: Request, res: Response) => {\n  try {\n    const faqs = await prisma.fAQ.findMany({\n      orderBy: [\n        { category: 'asc' },\n        { order: 'asc' },\n        { createdAt: 'desc' }\n      ]\n    });\n\n    res.json({\n      success: true,\n      data: faqs\n    });\n  } catch (error) {\n    console.error('Error fetching all FAQs:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Failed to fetch FAQs'\n    });\n  }\n};\n\n// Get single FAQ\nexport const getFAQ = async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n\n    const faq = await prisma.fAQ.findUnique({\n      where: { id }\n    });\n\n    if (!faq) {\n      return res.status(404).json({\n        success: false,\n        message: 'FAQ not found'\n      });\n    }\n\n    res.json({\n      success: true,\n      data: faq\n    });\n  } catch (error) {\n    console.error('Error fetching FAQ:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Failed to fetch FAQ'\n    });\n  }\n};\n\n// Create FAQ (Admin only)\nexport const createFAQ = async (req: Request, res: Response) => {\n  try {\n    const { question, answer, category, order, isActive } = req.body;\n\n    if (!question || !answer) {\n      return res.status(400).json({\n        success: false,\n        message: 'Question and answer are required'\n      });\n    }\n\n    const faq = await prisma.fAQ.create({\n      data: {\n        question,\n        answer,\n        category: category || 'general',\n        order: order || 0,\n        isActive: isActive !== undefined ? isActive : true\n      }\n    });\n\n    res.status(201).json({\n      success: true,\n      data: faq,\n      message: 'FAQ created successfully'\n    });\n  } catch (error) {\n    console.error('Error creating FAQ:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Failed to create FAQ'\n    });\n  }\n};\n\n// Update FAQ (Admin only)\nexport const updateFAQ = async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n    const { question, answer, category, order, isActive } = req.body;\n\n    const existingFAQ = await prisma.fAQ.findUnique({\n      where: { id }\n    });\n\n    if (!existingFAQ) {\n      return res.status(404).json({\n        success: false,\n        message: 'FAQ not found'\n      });\n    }\n\n    const faq = await prisma.fAQ.update({\n      where: { id },\n      data: {\n        ...(question !== undefined && { question }),\n        ...(answer !== undefined && { answer }),\n        ...(category !== undefined && { category }),\n        ...(order !== undefined && { order }),\n        ...(isActive !== undefined && { isActive })\n      }\n    });\n\n    res.json({\n      success: true,\n      data: faq,\n      message: 'FAQ updated successfully'\n    });\n  } catch (error) {\n    console.error('Error updating FAQ:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Failed to update FAQ'\n    });\n  }\n};\n\n// Delete FAQ (Admin only)\nexport const deleteFAQ = async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n\n    const existingFAQ = await prisma.fAQ.findUnique({\n      where: { id }\n    });\n\n    if (!existingFAQ) {\n      return res.status(404).json({\n        success: false,\n        message: 'FAQ not found'\n      });\n    }\n\n    await prisma.fAQ.delete({\n      where: { id }\n    });\n\n    res.json({\n      success: true,\n      message: 'FAQ deleted successfully'\n    });\n  } catch (error) {\n    console.error('Error deleting FAQ:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Failed to delete FAQ'\n    });\n  }\n};\n\n// Bulk create/update FAQs (Admin only)\nexport const bulkUpsertFAQs = async (req: Request, res: Response) => {\n  try {\n    const { faqs } = req.body;\n\n    if (!Array.isArray(faqs)) {\n      return res.status(400).json({\n        success: false,\n        message: 'FAQs must be an array'\n      });\n    }\n\n    // Process each FAQ\n    const results = await Promise.all(\n      faqs.map(async (faq) => {\n        if (faq.id) {\n          // Update existing FAQ\n          return await prisma.fAQ.update({\n            where: { id: faq.id },\n            data: {\n              question: faq.question,\n              answer: faq.answer,\n              category: faq.category || 'general',\n              order: faq.order || 0,\n              isActive: faq.isActive !== undefined ? faq.isActive : true\n            }\n          });\n        } else {\n          // Create new FAQ\n          return await prisma.fAQ.create({\n            data: {\n              question: faq.question,\n              answer: faq.answer,\n              category: faq.category || 'general',\n              order: faq.order || 0,\n              isActive: faq.isActive !== undefined ? faq.isActive : true\n            }\n          });\n        }\n      })\n    );\n\n    res.json({\n      success: true,\n      data: results,\n      message: `${results.length} FAQs processed successfully`\n    });\n  } catch (error) {\n    console.error('Error bulk upserting FAQs:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Failed to process FAQs'\n    });\n  }\n};\n\n// Reorder FAQs (Admin only)\nexport const reorderFAQs = async (req: Request, res: Response) => {\n  try {\n    const { orders } = req.body; // Array of { id, order }\n\n    if (!Array.isArray(orders)) {\n      return res.status(400).json({\n        success: false,\n        message: 'Orders must be an array'\n      });\n    }\n\n    // Update order for each FAQ\n    await Promise.all(\n      orders.map(async (item) => {\n        await prisma.fAQ.update({\n          where: { id: item.id },\n          data: { order: item.order }\n        });\n      })\n    );\n\n    res.json({\n      success: true,\n      message: 'FAQs reordered successfully'\n    });\n  } catch (error) {\n    console.error('Error reordering FAQs:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Failed to reorder FAQs'\n    });\n  }\n};"],"names":["bulkUpsertFAQs","createFAQ","deleteFAQ","getAllFAQs","getFAQ","getFAQs","reorderFAQs","updateFAQ","prisma","PrismaClient","req","res","category","query","where","isActive","faqs","fAQ","findMany","orderBy","order","createdAt","groupedFAQs","reduce","acc","faq","cat","push","json","success","data","grouped","error","console","status","message","id","params","findUnique","question","answer","body","create","undefined","existingFAQ","update","delete","Array","isArray","results","Promise","all","map","length","orders","item"],"mappings":"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"}