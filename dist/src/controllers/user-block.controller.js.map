{"version":3,"sources":["../../../src/controllers/user-block.controller.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport prisma from '../config/database';\n\n// Extend Request type to include user\ninterface AuthRequest extends Request {\n  user?: {\n    _id: string;\n    id: string;\n    userId?: string;\n    role: string;\n    email: string;\n    name: string;\n  };\n}\n\nexport const userBlockController = {\n  async blockUser(req: AuthRequest, res: Response) {\n    try {\n      const blockerId = req.user?.id;\n      const { blockedUserId, reason } = req.body;\n\n      if (!blockerId) {\n        return res.status(401).json({\n          success: false,\n          message: 'Unauthorized'\n        });\n      }\n\n      if (!blockedUserId) {\n        return res.status(400).json({\n          success: false,\n          message: 'User ID to block is required'\n        });\n      }\n\n      if (blockerId === blockedUserId) {\n        return res.status(400).json({\n          success: false,\n          message: 'You cannot block yourself'\n        });\n      }\n\n      // Check if user exists\n      const userToBlock = await prisma.user.findUnique({\n        where: { id: blockedUserId }\n      });\n\n      if (!userToBlock) {\n        return res.status(404).json({\n          success: false,\n          message: 'User not found'\n        });\n      }\n\n      // Check if already blocked\n      const existingBlock = await prisma.userBlock.findUnique({\n        where: {\n          blockerId_blockedUserId: {\n            blockerId,\n            blockedUserId\n          }\n        }\n      });\n\n      if (existingBlock) {\n        return res.status(400).json({\n          success: false,\n          message: 'You have already blocked this user'\n        });\n      }\n\n      // Create the block\n      const block = await prisma.userBlock.create({\n        data: {\n          blockerId,\n          blockedUserId,\n          reason\n        },\n        include: {\n          blockedUser: {\n            select: {\n              id: true,\n              name: true,\n              email: true,\n              image: true\n            }\n          }\n        }\n      });\n\n      res.status(201).json({\n        success: true,\n        message: 'User blocked successfully',\n        data: block\n      });\n    } catch (error) {\n      console.error('Block user error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to block user'\n      });\n    }\n  },\n\n  async unblockUser(req: AuthRequest, res: Response) {\n    try {\n      const blockerId = req.user?.id;\n      const { blockedUserId } = req.body;\n\n      if (!blockerId) {\n        return res.status(401).json({\n          success: false,\n          message: 'Unauthorized'\n        });\n      }\n\n      if (!blockedUserId) {\n        return res.status(400).json({\n          success: false,\n          message: 'User ID to unblock is required'\n        });\n      }\n\n      // Check if block exists\n      const existingBlock = await prisma.userBlock.findUnique({\n        where: {\n          blockerId_blockedUserId: {\n            blockerId,\n            blockedUserId\n          }\n        }\n      });\n\n      if (!existingBlock) {\n        return res.status(404).json({\n          success: false,\n          message: 'Block not found'\n        });\n      }\n\n      // Delete the block\n      await prisma.userBlock.delete({\n        where: {\n          blockerId_blockedUserId: {\n            blockerId,\n            blockedUserId\n          }\n        }\n      });\n\n      res.json({\n        success: true,\n        message: 'User unblocked successfully'\n      });\n    } catch (error) {\n      console.error('Unblock user error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to unblock user'\n      });\n    }\n  },\n\n  async getBlockedUsers(req: AuthRequest, res: Response) {\n    try {\n      const userId = req.user?.id;\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 10;\n      const skip = (page - 1) * limit;\n\n      if (!userId) {\n        return res.status(401).json({\n          success: false,\n          message: 'Unauthorized'\n        });\n      }\n\n      const [blocks, total] = await Promise.all([\n        prisma.userBlock.findMany({\n          where: { blockerId: userId },\n          include: {\n            blockedUser: {\n              select: {\n                id: true,\n                name: true,\n                email: true,\n                image: true,\n                role: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: 'desc'\n          },\n          skip,\n          take: limit\n        }),\n        prisma.userBlock.count({ where: { blockerId: userId } })\n      ]);\n\n      res.json({\n        success: true,\n        data: blocks,\n        pagination: {\n          total,\n          page,\n          limit,\n          totalPages: Math.ceil(total / limit)\n        }\n      });\n    } catch (error) {\n      console.error('Get blocked users error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to fetch blocked users'\n      });\n    }\n  },\n\n  async checkBlockStatus(req: AuthRequest, res: Response) {\n    try {\n      const userId = req.user?.id;\n      const { otherUserId } = req.params;\n\n      if (!userId) {\n        return res.status(401).json({\n          success: false,\n          message: 'Unauthorized'\n        });\n      }\n\n      if (!otherUserId) {\n        return res.status(400).json({\n          success: false,\n          message: 'Other user ID is required'\n        });\n      }\n\n      // Check if current user has blocked the other user\n      const userBlockedOther = await prisma.userBlock.findUnique({\n        where: {\n          blockerId_blockedUserId: {\n            blockerId: userId,\n            blockedUserId: otherUserId\n          }\n        }\n      });\n\n      // Check if other user has blocked the current user\n      const otherBlockedUser = await prisma.userBlock.findUnique({\n        where: {\n          blockerId_blockedUserId: {\n            blockerId: otherUserId,\n            blockedUserId: userId\n          }\n        }\n      });\n\n      res.json({\n        success: true,\n        data: {\n          isBlocked: !!userBlockedOther,\n          isBlockedBy: !!otherBlockedUser,\n          canChat: !userBlockedOther && !otherBlockedUser\n        }\n      });\n    } catch (error) {\n      console.error('Check block status error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to check block status'\n      });\n    }\n  },\n\n  async getBlockedByUsers(req: AuthRequest, res: Response) {\n    try {\n      const userId = req.user?.id;\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 10;\n      const skip = (page - 1) * limit;\n\n      if (!userId) {\n        return res.status(401).json({\n          success: false,\n          message: 'Unauthorized'\n        });\n      }\n\n      const [blocks, total] = await Promise.all([\n        prisma.userBlock.findMany({\n          where: { blockedUserId: userId },\n          include: {\n            blocker: {\n              select: {\n                id: true,\n                name: true,\n                email: true,\n                image: true,\n                role: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: 'desc'\n          },\n          skip,\n          take: limit\n        }),\n        prisma.userBlock.count({ where: { blockedUserId: userId } })\n      ]);\n\n      res.json({\n        success: true,\n        data: blocks,\n        pagination: {\n          total,\n          page,\n          limit,\n          totalPages: Math.ceil(total / limit)\n        }\n      });\n    } catch (error) {\n      console.error('Get blocked by users error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to fetch users who blocked you'\n      });\n    }\n  }\n};"],"names":["userBlockController","blockUser","req","res","blockerId","user","id","blockedUserId","reason","body","status","json","success","message","userToBlock","prisma","findUnique","where","existingBlock","userBlock","blockerId_blockedUserId","block","create","data","include","blockedUser","select","name","email","image","error","console","unblockUser","delete","getBlockedUsers","userId","page","parseInt","query","limit","skip","blocks","total","Promise","all","findMany","role","orderBy","createdAt","take","count","pagination","totalPages","Math","ceil","checkBlockStatus","otherUserId","params","userBlockedOther","otherBlockedUser","isBlocked","isBlockedBy","canChat","getBlockedByUsers","blocker"],"mappings":"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"}