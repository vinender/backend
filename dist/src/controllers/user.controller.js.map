{"version":3,"sources":["../../../src/controllers/user.controller.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport UserModel from '../models/user.model';\nimport { asyncHandler } from '../utils/asyncHandler';\nimport { AppError } from '../utils/AppError';\n\nclass UserController {\n  // Get all users (admin only)\n  getAllUsers = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const page = parseInt(req.query.page as string) || 1;\n    const limit = parseInt(req.query.limit as string) || 10;\n    const skip = (page - 1) * limit;\n\n    const users = await UserModel.findAll(skip, limit);\n\n    res.json({\n      success: true,\n      data: users,\n      pagination: {\n        page,\n        limit,\n        total: users.length,\n      },\n    });\n  });\n\n  // Get user by ID\n  getUser = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const { id } = req.params;\n\n    const user = await UserModel.findById(id);\n    if (!user) {\n      throw new AppError('User not found', 404);\n    }\n\n    res.json({\n      success: true,\n      data: user,\n    });\n  });\n\n  // Update user profile\n  updateUser = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const { id } = req.params;\n    const updates = req.body;\n\n    // Check if user is updating their own profile or is admin\n    if ((req as any).user.id !== id && (req as any).user.role !== 'ADMIN') {\n      throw new AppError('You can only update your own profile', 403);\n    }\n\n    // Prevent updating certain fields\n    delete updates.id;\n    delete updates.email; // Email change should be done through separate verification process\n    delete updates.password; // Password change should be done through separate endpoint\n    delete updates.role; // Role can only be changed by admin\n\n    const updatedUser = await UserModel.update(id, updates);\n\n    res.json({\n      success: true,\n      message: 'Profile updated successfully',\n      data: updatedUser,\n    });\n  });\n\n  // Delete user (admin only or self)\n  deleteUser = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const { id } = req.params;\n\n    // Check if user is deleting their own account or is admin\n    if ((req as any).user.id !== id && (req as any).user.role !== 'ADMIN') {\n      throw new AppError('You can only delete your own account', 403);\n    }\n\n    await UserModel.delete(id);\n\n    res.status(204).json({\n      success: true,\n      message: 'User deleted successfully',\n    });\n  });\n\n  // Change password\n  changePassword = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const userId = (req as any).user.id;\n    const { currentPassword, newPassword } = req.body;\n\n    if (!currentPassword || !newPassword) {\n      throw new AppError('Current password and new password are required', 400);\n    }\n\n    const user = await UserModel.findByEmail((req as any).user.email);\n    if (!user || !user.password) {\n      throw new AppError('User not found', 404);\n    }\n\n    // Verify current password\n    const isPasswordValid = await UserModel.verifyPassword(currentPassword, user.password);\n    if (!isPasswordValid) {\n      throw new AppError('Current password is incorrect', 401);\n    }\n\n    // Update password\n    await UserModel.update(userId, { password: newPassword } as any);\n\n    res.json({\n      success: true,\n      message: 'Password changed successfully',\n    });\n  });\n\n  // Get user stats (for dashboard)\n  getUserStats = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const userId = (req as any).user.id;\n    const userRole = (req as any).user.role;\n\n    // This would be more complex with actual database queries\n    const stats = {\n      userId,\n      role: userRole,\n      ...(userRole === 'DOG_OWNER' && {\n        totalBookings: 0,\n        upcomingBookings: 0,\n        savedFields: 0,\n        totalSpent: 0,\n      }),\n      ...(userRole === 'FIELD_OWNER' && {\n        totalFields: 0,\n        activeFields: 0,\n        totalBookings: 0,\n        totalRevenue: 0,\n        averageRating: 0,\n      }),\n    };\n\n    res.json({\n      success: true,\n      data: stats,\n    });\n  });\n}\n\nexport default new UserController();"],"names":["UserController","getAllUsers","asyncHandler","req","res","next","page","parseInt","query","limit","skip","users","UserModel","findAll","json","success","data","pagination","total","length","getUser","id","params","user","findById","AppError","updateUser","updates","body","role","email","password","updatedUser","update","message","deleteUser","delete","status","changePassword","userId","currentPassword","newPassword","findByEmail","isPasswordValid","verifyPassword","getUserStats","userRole","stats","totalBookings","upcomingBookings","savedFields","totalSpent","totalFields","activeFields","totalRevenue","averageRating"],"mappings":"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"}