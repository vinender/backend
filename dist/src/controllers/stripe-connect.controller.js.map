{"version":3,"sources":["../../../src/controllers/stripe-connect.controller.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport prisma from '../config/database';\nimport { asyncHandler } from '../utils/asyncHandler';\nimport { AppError } from '../utils/AppError';\nimport Stripe from 'stripe';\nimport { payoutService } from '../services/payout.service';\nimport { heldPayoutService } from '../services/held-payout.service';\n\n// Initialize Stripe\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: '2025-07-30.basil'\n});\n\nclass StripeConnectController {\n  // Create Stripe Connect account\n  createConnectAccount = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const userId = (req as any).user.id;\n    const userRole = (req as any).user.role;\n\n    // Only field owners can create connect accounts\n    if (userRole !== 'FIELD_OWNER') {\n      throw new AppError('Only field owners can connect bank accounts', 403);\n    }\n\n    // Check if user already has a Stripe account\n    const existingAccount = await prisma.stripeAccount.findUnique({\n      where: { userId }\n    });\n\n    if (existingAccount) {\n      // Return existing account\n      return res.json({\n        success: true,\n        data: {\n          hasAccount: true,\n          accountId: existingAccount.id,\n          chargesEnabled: existingAccount.chargesEnabled,\n          payoutsEnabled: existingAccount.payoutsEnabled,\n          detailsSubmitted: existingAccount.detailsSubmitted,\n          requirementsCurrentlyDue: existingAccount.requirementsCurrentlyDue\n        }\n      });\n    }\n\n    // Get user details\n    const user = await prisma.user.findUnique({\n      where: { id: userId }\n    });\n\n    if (!user) {\n      throw new AppError('User not found', 404);\n    }\n\n    // Create Stripe Connect account\n    let account;\n    try {\n      account = await stripe.accounts.create({\n        type: 'express',\n        country: 'GB', // Default to UK\n        email: user.email,\n        capabilities: {\n          card_payments: { requested: true },\n          transfers: { requested: true }\n        },\n        business_type: 'individual',\n        metadata: {\n          userId: userId\n        }\n      });\n    } catch (stripeError: any) {\n      console.error('Stripe Connect Error:', stripeError);\n      // If Stripe Connect is not enabled, provide a helpful message\n      if (stripeError.message?.includes('Connect')) {\n        throw new AppError(\n          'Stripe Connect is not configured for this account. Please contact support.',\n          400\n        );\n      }\n      throw new AppError(stripeError.message || 'Failed to create Stripe account', 400);\n    }\n\n    // Save account to database\n    const stripeAccount = await prisma.stripeAccount.create({\n      data: {\n        userId,\n        stripeAccountId: account.id,\n        accountType: 'express',\n        chargesEnabled: false,\n        payoutsEnabled: false,\n        detailsSubmitted: false,\n        defaultCurrency: account.default_currency || 'gbp',\n        country: account.country || 'GB',\n        email: user.email\n      }\n    });\n\n    res.json({\n      success: true,\n      message: 'Stripe Connect account created successfully',\n      data: {\n        accountId: stripeAccount.id,\n        stripeAccountId: account.id\n      }\n    });\n  });\n\n  // Generate Stripe Connect onboarding link\n  getOnboardingLink = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const userId = (req as any).user.id;\n    const { returnUrl, refreshUrl } = req.body;\n\n    // Get Stripe account\n    const stripeAccount = await prisma.stripeAccount.findUnique({\n      where: { userId }\n    });\n\n    if (!stripeAccount) {\n      throw new AppError('No Stripe account found. Please create one first.', 404);\n    }\n\n    // Check if account needs updating or initial onboarding\n    const account = await stripe.accounts.retrieve(stripeAccount.stripeAccountId);\n    \n    // For Express accounts, we always use 'account_onboarding' type\n    // The onboarding flow will automatically show only the required fields\n    // based on what's missing or needs to be updated\n    const accountLink = await stripe.accountLinks.create({\n      account: stripeAccount.stripeAccountId,\n      refresh_url: refreshUrl || `${process.env.FRONTEND_URL}/field-owner/payouts?refresh=true`,\n      return_url: returnUrl || `${process.env.FRONTEND_URL}/field-owner/payouts?success=true`,\n      type: 'account_onboarding', // Always use account_onboarding for Express accounts\n      // Collection options can be specified to focus on specific requirements\n      collection_options: {\n        fields: 'eventually_due', // This will prioritize eventually due fields in the onboarding flow\n        future_requirements: 'include' // Include future requirements in the collection\n      }\n    });\n\n    console.log(`Created onboarding link for user ${userId}, account ${stripeAccount.stripeAccountId}`);\n\n    res.json({\n      success: true,\n      data: {\n        url: accountLink.url,\n        type: 'account_onboarding'\n      }\n    });\n  });\n\n  // Get Stripe account status\n  getAccountStatus = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const userId = (req as any).user.id;\n\n    // Get Stripe account from database\n    const stripeAccount = await prisma.stripeAccount.findUnique({\n      where: { userId }\n    });\n\n    if (!stripeAccount) {\n      return res.json({\n        success: true,\n        data: {\n          hasAccount: false\n        }\n      });\n    }\n\n    // Get updated account info from Stripe\n    const account = await stripe.accounts.retrieve(stripeAccount.stripeAccountId);\n\n    // Check if account just became fully enabled\n    const wasNotEnabled = !stripeAccount.chargesEnabled || !stripeAccount.payoutsEnabled;\n    const isNowEnabled = account.charges_enabled && account.payouts_enabled;\n    \n    // Update database with latest info\n    await prisma.stripeAccount.update({\n      where: { id: stripeAccount.id },\n      data: {\n        chargesEnabled: account.charges_enabled,\n        payoutsEnabled: account.payouts_enabled,\n        detailsSubmitted: account.details_submitted,\n        requirementsCurrentlyDue: account.requirements?.currently_due || [],\n        requirementsPastDue: account.requirements?.past_due || [],\n        requirementsEventuallyDue: account.requirements?.eventually_due || []\n      }\n    });\n    \n    // If account just became fully enabled, release held payouts and process pending ones\n    if (wasNotEnabled && isNowEnabled) {\n      console.log(`Stripe account for user ${userId} is now fully enabled. Releasing held payouts...`);\n      \n      // First, release any held payouts\n      try {\n        await heldPayoutService.releaseHeldPayouts(userId);\n        console.log(`Released held payouts for user ${userId}`);\n      } catch (error) {\n        console.error(`Failed to release held payouts for user ${userId}:`, error);\n        // Don't throw - continue with processing\n      }\n      \n      // Then process pending payouts\n      try {\n        const results = await payoutService.processPendingPayouts(userId);\n        console.log(`Processed pending payouts for user ${userId}:`, results);\n      } catch (error) {\n        console.error(`Failed to process pending payouts for user ${userId}:`, error);\n        // Don't throw - continue with response\n      }\n    }\n\n    // Check if account is restricted or has issues\n    const hasCriticalRequirements = (account.requirements?.currently_due && account.requirements.currently_due.length > 0) ||\n                                   (account.requirements?.past_due && account.requirements.past_due.length > 0);\n    const hasEventualRequirements = account.requirements?.eventually_due && account.requirements.eventually_due.length > 0;\n    const hasRequirements = hasCriticalRequirements || hasEventualRequirements;\n    const isRestricted = !account.charges_enabled || !account.payouts_enabled;\n    const requiresAction = hasCriticalRequirements || isRestricted; // Only critical requirements need immediate action\n\n    // Format requirements for frontend\n    const formatRequirements = (requirements: string[] = []) => {\n      return requirements.map(req => {\n        // Convert Stripe requirement codes to human-readable text\n        const requirementLabels: { [key: string]: string } = {\n          'individual.verification.document': 'Identity verification document',\n          'individual.dob.day': 'Date of birth',\n          'individual.dob.month': 'Date of birth',\n          'individual.dob.year': 'Date of birth',\n          'individual.first_name': 'First name',\n          'individual.last_name': 'Last name',\n          'individual.address.line1': 'Address',\n          'individual.address.city': 'City',\n          'individual.address.postal_code': 'Postal code',\n          'individual.address.country': 'Country',\n          'individual.email': 'Email address',\n          'individual.phone': 'Phone number',\n          'external_account': 'Bank account details',\n          'tos_acceptance.date': 'Terms of service acceptance',\n          'tos_acceptance.ip': 'Terms of service acceptance'\n        };\n        return {\n          code: req,\n          label: requirementLabels[req] || req.replace(/_/g, ' ').replace(/\\./g, ' - ')\n        };\n      });\n    };\n\n    res.json({\n      success: true,\n      data: {\n        hasAccount: true,\n        accountId: stripeAccount.id,\n        chargesEnabled: account.charges_enabled,\n        payoutsEnabled: account.payouts_enabled,\n        detailsSubmitted: account.details_submitted,\n        requiresAction,\n        isRestricted,\n        hasRequirements,\n        hasCriticalRequirements,\n        hasEventualRequirements,\n        requirements: {\n          currentlyDue: formatRequirements(account.requirements?.currently_due),\n          pastDue: formatRequirements(account.requirements?.past_due),\n          eventuallyDue: formatRequirements(account.requirements?.eventually_due),\n          errors: account.requirements?.errors || [],\n          disabledReason: account.requirements?.disabled_reason || null\n        },\n        bankAccountLast4: stripeAccount.bankAccountLast4,\n        bankAccountBrand: stripeAccount.bankAccountBrand\n      }\n    });\n  });\n\n  // Get Stripe balance\n  getBalance = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const userId = (req as any).user.id;\n\n    // Get Stripe account\n    const stripeAccount = await prisma.stripeAccount.findUnique({\n      where: { userId }\n    });\n\n    if (!stripeAccount) {\n      return res.json({\n        success: true,\n        data: {\n          availableBalance: 0,\n          pendingBalance: 0,\n          currency: 'gbp'\n        }\n      });\n    }\n\n    // Get balance from Stripe\n    let availableBalance = 0;\n    let pendingBalance = 0;\n    \n    try {\n      const balance = await stripe.balance.retrieve({\n        stripeAccount: stripeAccount.stripeAccountId\n      });\n\n      // Get GBP balance (or default currency)\n      const available = balance.available.find(b => b.currency === 'gbp');\n      const pending = balance.pending.find(b => b.currency === 'gbp');\n      \n      availableBalance = available ? available.amount / 100 : 0;\n      pendingBalance = pending ? pending.amount / 100 : 0;\n    } catch (error) {\n      console.error('Error fetching Stripe balance:', error);\n    }\n\n    res.json({\n      success: true,\n      data: {\n        availableBalance,\n        pendingBalance,\n        currency: 'gbp'\n      }\n    });\n  });\n\n  // Create manual payout (if instant payouts are enabled)\n  createPayout = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const userId = (req as any).user.id;\n    const { amount, currency = 'gbp', method = 'standard' } = req.body;\n\n    // Get Stripe account\n    const stripeAccount = await prisma.stripeAccount.findUnique({\n      where: { userId }\n    });\n\n    if (!stripeAccount) {\n      throw new AppError('No Stripe account found', 404);\n    }\n\n    if (!stripeAccount.payoutsEnabled) {\n      throw new AppError('Payouts are not enabled for your account', 400);\n    }\n\n    // Create payout in Stripe\n    const payout = await stripe.payouts.create(\n      {\n        amount: Math.round(amount * 100), // Convert to smallest currency unit\n        currency,\n        method: method as Stripe.PayoutCreateParams.Method,\n        metadata: {\n          userId\n        }\n      },\n      {\n        stripeAccount: stripeAccount.stripeAccountId\n      }\n    );\n\n    // Save payout to database\n    const savedPayout = await prisma.payout.create({\n      data: {\n        stripeAccountId: stripeAccount.id,\n        stripePayoutId: payout.id,\n        amount: payout.amount,\n        currency: payout.currency,\n        status: payout.status,\n        method: method,\n        arrivalDate: payout.arrival_date ? new Date(payout.arrival_date * 1000) : null\n      }\n    });\n\n    res.json({\n      success: true,\n      message: 'Payout initiated successfully',\n      data: savedPayout\n    });\n  });\n\n  // Update bank account\n  updateBankAccount = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const userId = (req as any).user.id;\n\n    // Get Stripe account\n    const stripeAccount = await prisma.stripeAccount.findUnique({\n      where: { userId }\n    });\n\n    if (!stripeAccount) {\n      throw new AppError('No Stripe account found', 404);\n    }\n\n    // For Express accounts, we use account_onboarding type\n    // The onboarding flow will automatically detect what needs to be updated\n    const accountLink = await stripe.accountLinks.create({\n      account: stripeAccount.stripeAccountId,\n      refresh_url: `${process.env.FRONTEND_URL}/field-owner/payouts?refresh=true`,\n      return_url: `${process.env.FRONTEND_URL}/field-owner/payouts?updated=true`,\n      type: 'account_onboarding', // Express accounts only support account_onboarding\n      collection_options: {\n        fields: 'currently_due' // Focus on currently due requirements\n      }\n    });\n\n    res.json({\n      success: true,\n      data: {\n        url: accountLink.url\n      }\n    });\n  });\n\n  // Disconnect Stripe account\n  disconnectAccount = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const userId = (req as any).user.id;\n\n    // Get Stripe account\n    const stripeAccount = await prisma.stripeAccount.findUnique({\n      where: { userId }\n    });\n\n    if (!stripeAccount) {\n      throw new AppError('No Stripe account found', 404);\n    }\n\n    // Delete account from Stripe\n    try {\n      await stripe.accounts.del(stripeAccount.stripeAccountId);\n    } catch (error) {\n      console.error('Error deleting Stripe account:', error);\n    }\n\n    // Delete from database\n    await prisma.stripeAccount.delete({\n      where: { id: stripeAccount.id }\n    });\n\n    res.json({\n      success: true,\n      message: 'Bank account disconnected successfully'\n    });\n  });\n\n  // Get payout history\n  getPayoutHistory = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const userId = (req as any).user.id;\n    const { page = 1, limit = 10, status } = req.query;\n\n    // Get Stripe account\n    const stripeAccount = await prisma.stripeAccount.findUnique({\n      where: { userId }\n    });\n\n    if (!stripeAccount) {\n      return res.json({\n        success: true,\n        data: {\n          payouts: [],\n          total: 0,\n          page: Number(page),\n          totalPages: 0\n        }\n      });\n    }\n\n    // Build filter\n    const filter: any = {\n      stripeAccountId: stripeAccount.id\n    };\n\n    if (status) {\n      filter.status = status as string;\n    }\n\n    // Get payouts\n    const [payouts, total] = await Promise.all([\n      prisma.payout.findMany({\n        where: filter,\n        skip: (Number(page) - 1) * Number(limit),\n        take: Number(limit),\n        orderBy: { createdAt: 'desc' }\n      }),\n      prisma.payout.count({ where: filter })\n    ]);\n\n    res.json({\n      success: true,\n      data: {\n        payouts,\n        total,\n        page: Number(page),\n        totalPages: Math.ceil(total / Number(limit))\n      }\n    });\n  });\n}\n\nexport default new StripeConnectController();"],"names":["stripe","Stripe","process","env","STRIPE_SECRET_KEY","apiVersion","StripeConnectController","createConnectAccount","asyncHandler","req","res","next","userId","user","id","userRole","role","AppError","existingAccount","prisma","stripeAccount","findUnique","where","json","success","data","hasAccount","accountId","chargesEnabled","payoutsEnabled","detailsSubmitted","requirementsCurrentlyDue","account","accounts","create","type","country","email","capabilities","card_payments","requested","transfers","business_type","metadata","stripeError","console","error","message","includes","stripeAccountId","accountType","defaultCurrency","default_currency","getOnboardingLink","returnUrl","refreshUrl","body","retrieve","accountLink","accountLinks","refresh_url","FRONTEND_URL","return_url","collection_options","fields","future_requirements","log","url","getAccountStatus","wasNotEnabled","isNowEnabled","charges_enabled","payouts_enabled","update","details_submitted","requirements","currently_due","requirementsPastDue","past_due","requirementsEventuallyDue","eventually_due","heldPayoutService","releaseHeldPayouts","results","payoutService","processPendingPayouts","hasCriticalRequirements","length","hasEventualRequirements","hasRequirements","isRestricted","requiresAction","formatRequirements","map","requirementLabels","code","label","replace","currentlyDue","pastDue","eventuallyDue","errors","disabledReason","disabled_reason","bankAccountLast4","bankAccountBrand","getBalance","availableBalance","pendingBalance","currency","balance","available","find","b","pending","amount","createPayout","method","payout","payouts","Math","round","savedPayout","stripePayoutId","status","arrivalDate","arrival_date","Date","updateBankAccount","disconnectAccount","del","delete","getPayoutHistory","page","limit","query","total","Number","totalPages","filter","Promise","all","findMany","skip","take","orderBy","createdAt","count","ceil"],"mappings":";;;;+BA4eA;;;eAAA;;;iEA3emB;8BACU;0BACJ;+DACN;+BACW;mCACI;;;;;;AAElC,oBAAoB;AACpB,MAAMA,SAAS,IAAIC,eAAM,CAACC,QAAQC,GAAG,CAACC,iBAAiB,EAAG;IACxDC,YAAY;AACd;AAEA,MAAMC;IACJ,gCAAgC;IAChCC,uBAAuBC,IAAAA,0BAAY,EAAC,OAAOC,KAAcC,KAAeC;QACtE,MAAMC,SAAS,AAACH,IAAYI,IAAI,CAACC,EAAE;QACnC,MAAMC,WAAW,AAACN,IAAYI,IAAI,CAACG,IAAI;QAEvC,gDAAgD;QAChD,IAAID,aAAa,eAAe;YAC9B,MAAM,IAAIE,kBAAQ,CAAC,+CAA+C;QACpE;QAEA,6CAA6C;QAC7C,MAAMC,kBAAkB,MAAMC,iBAAM,CAACC,aAAa,CAACC,UAAU,CAAC;YAC5DC,OAAO;gBAAEV;YAAO;QAClB;QAEA,IAAIM,iBAAiB;YACnB,0BAA0B;YAC1B,OAAOR,IAAIa,IAAI,CAAC;gBACdC,SAAS;gBACTC,MAAM;oBACJC,YAAY;oBACZC,WAAWT,gBAAgBJ,EAAE;oBAC7Bc,gBAAgBV,gBAAgBU,cAAc;oBAC9CC,gBAAgBX,gBAAgBW,cAAc;oBAC9CC,kBAAkBZ,gBAAgBY,gBAAgB;oBAClDC,0BAA0Bb,gBAAgBa,wBAAwB;gBACpE;YACF;QACF;QAEA,mBAAmB;QACnB,MAAMlB,OAAO,MAAMM,iBAAM,CAACN,IAAI,CAACQ,UAAU,CAAC;YACxCC,OAAO;gBAAER,IAAIF;YAAO;QACtB;QAEA,IAAI,CAACC,MAAM;YACT,MAAM,IAAII,kBAAQ,CAAC,kBAAkB;QACvC;QAEA,gCAAgC;QAChC,IAAIe;QACJ,IAAI;YACFA,UAAU,MAAMhC,OAAOiC,QAAQ,CAACC,MAAM,CAAC;gBACrCC,MAAM;gBACNC,SAAS;gBACTC,OAAOxB,KAAKwB,KAAK;gBACjBC,cAAc;oBACZC,eAAe;wBAAEC,WAAW;oBAAK;oBACjCC,WAAW;wBAAED,WAAW;oBAAK;gBAC/B;gBACAE,eAAe;gBACfC,UAAU;oBACR/B,QAAQA;gBACV;YACF;QACF,EAAE,OAAOgC,aAAkB;YACzBC,QAAQC,KAAK,CAAC,yBAAyBF;YACvC,8DAA8D;YAC9D,IAAIA,YAAYG,OAAO,EAAEC,SAAS,YAAY;gBAC5C,MAAM,IAAI/B,kBAAQ,CAChB,8EACA;YAEJ;YACA,MAAM,IAAIA,kBAAQ,CAAC2B,YAAYG,OAAO,IAAI,mCAAmC;QAC/E;QAEA,2BAA2B;QAC3B,MAAM3B,gBAAgB,MAAMD,iBAAM,CAACC,aAAa,CAACc,MAAM,CAAC;YACtDT,MAAM;gBACJb;gBACAqC,iBAAiBjB,QAAQlB,EAAE;gBAC3BoC,aAAa;gBACbtB,gBAAgB;gBAChBC,gBAAgB;gBAChBC,kBAAkB;gBAClBqB,iBAAiBnB,QAAQoB,gBAAgB,IAAI;gBAC7ChB,SAASJ,QAAQI,OAAO,IAAI;gBAC5BC,OAAOxB,KAAKwB,KAAK;YACnB;QACF;QAEA3B,IAAIa,IAAI,CAAC;YACPC,SAAS;YACTuB,SAAS;YACTtB,MAAM;gBACJE,WAAWP,cAAcN,EAAE;gBAC3BmC,iBAAiBjB,QAAQlB,EAAE;YAC7B;QACF;IACF,GAAG;IAEH,0CAA0C;IAC1CuC,oBAAoB7C,IAAAA,0BAAY,EAAC,OAAOC,KAAcC,KAAeC;QACnE,MAAMC,SAAS,AAACH,IAAYI,IAAI,CAACC,EAAE;QACnC,MAAM,EAAEwC,SAAS,EAAEC,UAAU,EAAE,GAAG9C,IAAI+C,IAAI;QAE1C,qBAAqB;QACrB,MAAMpC,gBAAgB,MAAMD,iBAAM,CAACC,aAAa,CAACC,UAAU,CAAC;YAC1DC,OAAO;gBAAEV;YAAO;QAClB;QAEA,IAAI,CAACQ,eAAe;YAClB,MAAM,IAAIH,kBAAQ,CAAC,qDAAqD;QAC1E;QAEA,wDAAwD;QACxD,MAAMe,UAAU,MAAMhC,OAAOiC,QAAQ,CAACwB,QAAQ,CAACrC,cAAc6B,eAAe;QAE5E,gEAAgE;QAChE,uEAAuE;QACvE,iDAAiD;QACjD,MAAMS,cAAc,MAAM1D,OAAO2D,YAAY,CAACzB,MAAM,CAAC;YACnDF,SAASZ,cAAc6B,eAAe;YACtCW,aAAaL,cAAc,GAAGrD,QAAQC,GAAG,CAAC0D,YAAY,CAAC,iCAAiC,CAAC;YACzFC,YAAYR,aAAa,GAAGpD,QAAQC,GAAG,CAAC0D,YAAY,CAAC,iCAAiC,CAAC;YACvF1B,MAAM;YACN,wEAAwE;YACxE4B,oBAAoB;gBAClBC,QAAQ;gBACRC,qBAAqB,UAAU,gDAAgD;YACjF;QACF;QAEApB,QAAQqB,GAAG,CAAC,CAAC,iCAAiC,EAAEtD,OAAO,UAAU,EAAEQ,cAAc6B,eAAe,EAAE;QAElGvC,IAAIa,IAAI,CAAC;YACPC,SAAS;YACTC,MAAM;gBACJ0C,KAAKT,YAAYS,GAAG;gBACpBhC,MAAM;YACR;QACF;IACF,GAAG;IAEH,4BAA4B;IAC5BiC,mBAAmB5D,IAAAA,0BAAY,EAAC,OAAOC,KAAcC,KAAeC;QAClE,MAAMC,SAAS,AAACH,IAAYI,IAAI,CAACC,EAAE;QAEnC,mCAAmC;QACnC,MAAMM,gBAAgB,MAAMD,iBAAM,CAACC,aAAa,CAACC,UAAU,CAAC;YAC1DC,OAAO;gBAAEV;YAAO;QAClB;QAEA,IAAI,CAACQ,eAAe;YAClB,OAAOV,IAAIa,IAAI,CAAC;gBACdC,SAAS;gBACTC,MAAM;oBACJC,YAAY;gBACd;YACF;QACF;QAEA,uCAAuC;QACvC,MAAMM,UAAU,MAAMhC,OAAOiC,QAAQ,CAACwB,QAAQ,CAACrC,cAAc6B,eAAe;QAE5E,6CAA6C;QAC7C,MAAMoB,gBAAgB,CAACjD,cAAcQ,cAAc,IAAI,CAACR,cAAcS,cAAc;QACpF,MAAMyC,eAAetC,QAAQuC,eAAe,IAAIvC,QAAQwC,eAAe;QAEvE,mCAAmC;QACnC,MAAMrD,iBAAM,CAACC,aAAa,CAACqD,MAAM,CAAC;YAChCnD,OAAO;gBAAER,IAAIM,cAAcN,EAAE;YAAC;YAC9BW,MAAM;gBACJG,gBAAgBI,QAAQuC,eAAe;gBACvC1C,gBAAgBG,QAAQwC,eAAe;gBACvC1C,kBAAkBE,QAAQ0C,iBAAiB;gBAC3C3C,0BAA0BC,QAAQ2C,YAAY,EAAEC,iBAAiB,EAAE;gBACnEC,qBAAqB7C,QAAQ2C,YAAY,EAAEG,YAAY,EAAE;gBACzDC,2BAA2B/C,QAAQ2C,YAAY,EAAEK,kBAAkB,EAAE;YACvE;QACF;QAEA,sFAAsF;QACtF,IAAIX,iBAAiBC,cAAc;YACjCzB,QAAQqB,GAAG,CAAC,CAAC,wBAAwB,EAAEtD,OAAO,gDAAgD,CAAC;YAE/F,kCAAkC;YAClC,IAAI;gBACF,MAAMqE,oCAAiB,CAACC,kBAAkB,CAACtE;gBAC3CiC,QAAQqB,GAAG,CAAC,CAAC,+BAA+B,EAAEtD,QAAQ;YACxD,EAAE,OAAOkC,OAAO;gBACdD,QAAQC,KAAK,CAAC,CAAC,wCAAwC,EAAElC,OAAO,CAAC,CAAC,EAAEkC;YACpE,yCAAyC;YAC3C;YAEA,+BAA+B;YAC/B,IAAI;gBACF,MAAMqC,UAAU,MAAMC,4BAAa,CAACC,qBAAqB,CAACzE;gBAC1DiC,QAAQqB,GAAG,CAAC,CAAC,mCAAmC,EAAEtD,OAAO,CAAC,CAAC,EAAEuE;YAC/D,EAAE,OAAOrC,OAAO;gBACdD,QAAQC,KAAK,CAAC,CAAC,2CAA2C,EAAElC,OAAO,CAAC,CAAC,EAAEkC;YACvE,uCAAuC;YACzC;QACF;QAEA,+CAA+C;QAC/C,MAAMwC,0BAA0B,AAACtD,QAAQ2C,YAAY,EAAEC,iBAAiB5C,QAAQ2C,YAAY,CAACC,aAAa,CAACW,MAAM,GAAG,KACpFvD,QAAQ2C,YAAY,EAAEG,YAAY9C,QAAQ2C,YAAY,CAACG,QAAQ,CAACS,MAAM,GAAG;QACzG,MAAMC,0BAA0BxD,QAAQ2C,YAAY,EAAEK,kBAAkBhD,QAAQ2C,YAAY,CAACK,cAAc,CAACO,MAAM,GAAG;QACrH,MAAME,kBAAkBH,2BAA2BE;QACnD,MAAME,eAAe,CAAC1D,QAAQuC,eAAe,IAAI,CAACvC,QAAQwC,eAAe;QACzE,MAAMmB,iBAAiBL,2BAA2BI,cAAc,mDAAmD;QAEnH,mCAAmC;QACnC,MAAME,qBAAqB,CAACjB,eAAyB,EAAE;YACrD,OAAOA,aAAakB,GAAG,CAACpF,CAAAA;gBACtB,0DAA0D;gBAC1D,MAAMqF,oBAA+C;oBACnD,oCAAoC;oBACpC,sBAAsB;oBACtB,wBAAwB;oBACxB,uBAAuB;oBACvB,yBAAyB;oBACzB,wBAAwB;oBACxB,4BAA4B;oBAC5B,2BAA2B;oBAC3B,kCAAkC;oBAClC,8BAA8B;oBAC9B,oBAAoB;oBACpB,oBAAoB;oBACpB,oBAAoB;oBACpB,uBAAuB;oBACvB,qBAAqB;gBACvB;gBACA,OAAO;oBACLC,MAAMtF;oBACNuF,OAAOF,iBAAiB,CAACrF,IAAI,IAAIA,IAAIwF,OAAO,CAAC,MAAM,KAAKA,OAAO,CAAC,OAAO;gBACzE;YACF;QACF;QAEAvF,IAAIa,IAAI,CAAC;YACPC,SAAS;YACTC,MAAM;gBACJC,YAAY;gBACZC,WAAWP,cAAcN,EAAE;gBAC3Bc,gBAAgBI,QAAQuC,eAAe;gBACvC1C,gBAAgBG,QAAQwC,eAAe;gBACvC1C,kBAAkBE,QAAQ0C,iBAAiB;gBAC3CiB;gBACAD;gBACAD;gBACAH;gBACAE;gBACAb,cAAc;oBACZuB,cAAcN,mBAAmB5D,QAAQ2C,YAAY,EAAEC;oBACvDuB,SAASP,mBAAmB5D,QAAQ2C,YAAY,EAAEG;oBAClDsB,eAAeR,mBAAmB5D,QAAQ2C,YAAY,EAAEK;oBACxDqB,QAAQrE,QAAQ2C,YAAY,EAAE0B,UAAU,EAAE;oBAC1CC,gBAAgBtE,QAAQ2C,YAAY,EAAE4B,mBAAmB;gBAC3D;gBACAC,kBAAkBpF,cAAcoF,gBAAgB;gBAChDC,kBAAkBrF,cAAcqF,gBAAgB;YAClD;QACF;IACF,GAAG;IAEH,qBAAqB;IACrBC,aAAalG,IAAAA,0BAAY,EAAC,OAAOC,KAAcC,KAAeC;QAC5D,MAAMC,SAAS,AAACH,IAAYI,IAAI,CAACC,EAAE;QAEnC,qBAAqB;QACrB,MAAMM,gBAAgB,MAAMD,iBAAM,CAACC,aAAa,CAACC,UAAU,CAAC;YAC1DC,OAAO;gBAAEV;YAAO;QAClB;QAEA,IAAI,CAACQ,eAAe;YAClB,OAAOV,IAAIa,IAAI,CAAC;gBACdC,SAAS;gBACTC,MAAM;oBACJkF,kBAAkB;oBAClBC,gBAAgB;oBAChBC,UAAU;gBACZ;YACF;QACF;QAEA,0BAA0B;QAC1B,IAAIF,mBAAmB;QACvB,IAAIC,iBAAiB;QAErB,IAAI;YACF,MAAME,UAAU,MAAM9G,OAAO8G,OAAO,CAACrD,QAAQ,CAAC;gBAC5CrC,eAAeA,cAAc6B,eAAe;YAC9C;YAEA,wCAAwC;YACxC,MAAM8D,YAAYD,QAAQC,SAAS,CAACC,IAAI,CAACC,CAAAA,IAAKA,EAAEJ,QAAQ,KAAK;YAC7D,MAAMK,UAAUJ,QAAQI,OAAO,CAACF,IAAI,CAACC,CAAAA,IAAKA,EAAEJ,QAAQ,KAAK;YAEzDF,mBAAmBI,YAAYA,UAAUI,MAAM,GAAG,MAAM;YACxDP,iBAAiBM,UAAUA,QAAQC,MAAM,GAAG,MAAM;QACpD,EAAE,OAAOrE,OAAO;YACdD,QAAQC,KAAK,CAAC,kCAAkCA;QAClD;QAEApC,IAAIa,IAAI,CAAC;YACPC,SAAS;YACTC,MAAM;gBACJkF;gBACAC;gBACAC,UAAU;YACZ;QACF;IACF,GAAG;IAEH,wDAAwD;IACxDO,eAAe5G,IAAAA,0BAAY,EAAC,OAAOC,KAAcC,KAAeC;QAC9D,MAAMC,SAAS,AAACH,IAAYI,IAAI,CAACC,EAAE;QACnC,MAAM,EAAEqG,MAAM,EAAEN,WAAW,KAAK,EAAEQ,SAAS,UAAU,EAAE,GAAG5G,IAAI+C,IAAI;QAElE,qBAAqB;QACrB,MAAMpC,gBAAgB,MAAMD,iBAAM,CAACC,aAAa,CAACC,UAAU,CAAC;YAC1DC,OAAO;gBAAEV;YAAO;QAClB;QAEA,IAAI,CAACQ,eAAe;YAClB,MAAM,IAAIH,kBAAQ,CAAC,2BAA2B;QAChD;QAEA,IAAI,CAACG,cAAcS,cAAc,EAAE;YACjC,MAAM,IAAIZ,kBAAQ,CAAC,4CAA4C;QACjE;QAEA,0BAA0B;QAC1B,MAAMqG,SAAS,MAAMtH,OAAOuH,OAAO,CAACrF,MAAM,CACxC;YACEiF,QAAQK,KAAKC,KAAK,CAACN,SAAS;YAC5BN;YACAQ,QAAQA;YACR1E,UAAU;gBACR/B;YACF;QACF,GACA;YACEQ,eAAeA,cAAc6B,eAAe;QAC9C;QAGF,0BAA0B;QAC1B,MAAMyE,cAAc,MAAMvG,iBAAM,CAACmG,MAAM,CAACpF,MAAM,CAAC;YAC7CT,MAAM;gBACJwB,iBAAiB7B,cAAcN,EAAE;gBACjC6G,gBAAgBL,OAAOxG,EAAE;gBACzBqG,QAAQG,OAAOH,MAAM;gBACrBN,UAAUS,OAAOT,QAAQ;gBACzBe,QAAQN,OAAOM,MAAM;gBACrBP,QAAQA;gBACRQ,aAAaP,OAAOQ,YAAY,GAAG,IAAIC,KAAKT,OAAOQ,YAAY,GAAG,QAAQ;YAC5E;QACF;QAEApH,IAAIa,IAAI,CAAC;YACPC,SAAS;YACTuB,SAAS;YACTtB,MAAMiG;QACR;IACF,GAAG;IAEH,sBAAsB;IACtBM,oBAAoBxH,IAAAA,0BAAY,EAAC,OAAOC,KAAcC,KAAeC;QACnE,MAAMC,SAAS,AAACH,IAAYI,IAAI,CAACC,EAAE;QAEnC,qBAAqB;QACrB,MAAMM,gBAAgB,MAAMD,iBAAM,CAACC,aAAa,CAACC,UAAU,CAAC;YAC1DC,OAAO;gBAAEV;YAAO;QAClB;QAEA,IAAI,CAACQ,eAAe;YAClB,MAAM,IAAIH,kBAAQ,CAAC,2BAA2B;QAChD;QAEA,uDAAuD;QACvD,yEAAyE;QACzE,MAAMyC,cAAc,MAAM1D,OAAO2D,YAAY,CAACzB,MAAM,CAAC;YACnDF,SAASZ,cAAc6B,eAAe;YACtCW,aAAa,GAAG1D,QAAQC,GAAG,CAAC0D,YAAY,CAAC,iCAAiC,CAAC;YAC3EC,YAAY,GAAG5D,QAAQC,GAAG,CAAC0D,YAAY,CAAC,iCAAiC,CAAC;YAC1E1B,MAAM;YACN4B,oBAAoB;gBAClBC,QAAQ,gBAAgB,sCAAsC;YAChE;QACF;QAEAtD,IAAIa,IAAI,CAAC;YACPC,SAAS;YACTC,MAAM;gBACJ0C,KAAKT,YAAYS,GAAG;YACtB;QACF;IACF,GAAG;IAEH,4BAA4B;IAC5B8D,oBAAoBzH,IAAAA,0BAAY,EAAC,OAAOC,KAAcC,KAAeC;QACnE,MAAMC,SAAS,AAACH,IAAYI,IAAI,CAACC,EAAE;QAEnC,qBAAqB;QACrB,MAAMM,gBAAgB,MAAMD,iBAAM,CAACC,aAAa,CAACC,UAAU,CAAC;YAC1DC,OAAO;gBAAEV;YAAO;QAClB;QAEA,IAAI,CAACQ,eAAe;YAClB,MAAM,IAAIH,kBAAQ,CAAC,2BAA2B;QAChD;QAEA,6BAA6B;QAC7B,IAAI;YACF,MAAMjB,OAAOiC,QAAQ,CAACiG,GAAG,CAAC9G,cAAc6B,eAAe;QACzD,EAAE,OAAOH,OAAO;YACdD,QAAQC,KAAK,CAAC,kCAAkCA;QAClD;QAEA,uBAAuB;QACvB,MAAM3B,iBAAM,CAACC,aAAa,CAAC+G,MAAM,CAAC;YAChC7G,OAAO;gBAAER,IAAIM,cAAcN,EAAE;YAAC;QAChC;QAEAJ,IAAIa,IAAI,CAAC;YACPC,SAAS;YACTuB,SAAS;QACX;IACF,GAAG;IAEH,qBAAqB;IACrBqF,mBAAmB5H,IAAAA,0BAAY,EAAC,OAAOC,KAAcC,KAAeC;QAClE,MAAMC,SAAS,AAACH,IAAYI,IAAI,CAACC,EAAE;QACnC,MAAM,EAAEuH,OAAO,CAAC,EAAEC,QAAQ,EAAE,EAAEV,MAAM,EAAE,GAAGnH,IAAI8H,KAAK;QAElD,qBAAqB;QACrB,MAAMnH,gBAAgB,MAAMD,iBAAM,CAACC,aAAa,CAACC,UAAU,CAAC;YAC1DC,OAAO;gBAAEV;YAAO;QAClB;QAEA,IAAI,CAACQ,eAAe;YAClB,OAAOV,IAAIa,IAAI,CAAC;gBACdC,SAAS;gBACTC,MAAM;oBACJ8F,SAAS,EAAE;oBACXiB,OAAO;oBACPH,MAAMI,OAAOJ;oBACbK,YAAY;gBACd;YACF;QACF;QAEA,eAAe;QACf,MAAMC,SAAc;YAClB1F,iBAAiB7B,cAAcN,EAAE;QACnC;QAEA,IAAI8G,QAAQ;YACVe,OAAOf,MAAM,GAAGA;QAClB;QAEA,cAAc;QACd,MAAM,CAACL,SAASiB,MAAM,GAAG,MAAMI,QAAQC,GAAG,CAAC;YACzC1H,iBAAM,CAACmG,MAAM,CAACwB,QAAQ,CAAC;gBACrBxH,OAAOqH;gBACPI,MAAM,AAACN,CAAAA,OAAOJ,QAAQ,CAAA,IAAKI,OAAOH;gBAClCU,MAAMP,OAAOH;gBACbW,SAAS;oBAAEC,WAAW;gBAAO;YAC/B;YACA/H,iBAAM,CAACmG,MAAM,CAAC6B,KAAK,CAAC;gBAAE7H,OAAOqH;YAAO;SACrC;QAEDjI,IAAIa,IAAI,CAAC;YACPC,SAAS;YACTC,MAAM;gBACJ8F;gBACAiB;gBACAH,MAAMI,OAAOJ;gBACbK,YAAYlB,KAAK4B,IAAI,CAACZ,QAAQC,OAAOH;YACvC;QACF;IACF,GAAG;AACL;MAEA,WAAe,IAAIhI"}