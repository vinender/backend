{"version":3,"sources":["../../../src/controllers/notification.controller.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\n// Extend Request type to include userId\ninterface AuthRequest extends Request {\n  userId?: string;\n  user?: any;\n}\n\nexport const notificationController = {\n  // Get all notifications for a user\n  async getUserNotifications(req: AuthRequest, res: Response) {\n    try {\n      // Get userId from req.user (set by auth middleware) or req.userId\n      const userId = req.user?.id;\n      console.log('Getting notifications for user:', userId);\n      \n      if (!userId) {\n        return res.status(401).json({\n          success: false,\n          message: 'User not authenticated',\n        });\n      }\n      \n      const { page = 1, limit = 20, unreadOnly = false } = req.query;\n      \n      const skip = (Number(page) - 1) * Number(limit);\n      \n      const where: any = { userId };\n      if (unreadOnly === 'true') {\n        where.read = false;\n      }\n\n      const [notifications, total, unreadCount] = await Promise.all([\n        prisma.notification.findMany({\n          where,\n          orderBy: { createdAt: 'desc' },\n          skip,\n          take: Number(limit),\n        }),\n        prisma.notification.count({ where }),\n        prisma.notification.count({ where: { userId, read: false } }),\n      ]);\n\n      res.json({\n        success: true,\n        data: notifications,\n        pagination: {\n          page: Number(page),\n          limit: Number(limit),\n          total,\n          totalPages: Math.ceil(total / Number(limit)),\n        },\n        unreadCount,\n      });\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to fetch notifications',\n      });\n    }\n  },\n\n  // Mark notification as read\n  async markAsRead(req: AuthRequest, res: Response) {\n    try {\n      const userId = req.user?.id;\n      const { id } = req.params;\n\n      const notification = await prisma.notification.findFirst({\n        where: { id, userId },\n      });\n\n      if (!notification) {\n        return res.status(404).json({\n          success: false,\n          message: 'Notification not found',\n        });\n      }\n\n      const updated = await prisma.notification.update({\n        where: { id },\n        data: {\n          read: true,\n          readAt: new Date(),\n        },\n      });\n\n      res.json({\n        success: true,\n        data: updated,\n      });\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to mark notification as read',\n      });\n    }\n  },\n\n  // Mark all notifications as read\n  async markAllAsRead(req: AuthRequest, res: Response) {\n    try {\n      const userId = req.user?.id;\n\n      await prisma.notification.updateMany({\n        where: { userId, read: false },\n        data: {\n          read: true,\n          readAt: new Date(),\n        },\n      });\n\n      res.json({\n        success: true,\n        message: 'All notifications marked as read',\n      });\n    } catch (error) {\n      console.error('Error marking all notifications as read:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to mark all notifications as read',\n      });\n    }\n  },\n\n  // Delete a notification\n  async deleteNotification(req: AuthRequest, res: Response) {\n    try {\n      const userId = req.user?.id;\n      const { id } = req.params;\n\n      const notification = await prisma.notification.findFirst({\n        where: { id, userId },\n      });\n\n      if (!notification) {\n        return res.status(404).json({\n          success: false,\n          message: 'Notification not found',\n        });\n      }\n\n      await prisma.notification.delete({\n        where: { id },\n      });\n\n      res.json({\n        success: true,\n        message: 'Notification deleted',\n      });\n    } catch (error) {\n      console.error('Error deleting notification:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to delete notification',\n      });\n    }\n  },\n\n  // Clear all notifications\n  async clearAllNotifications(req: AuthRequest, res: Response) {\n    try {\n      const userId = req.user?.id;\n\n      await prisma.notification.deleteMany({\n        where: { userId },\n      });\n\n      res.json({\n        success: true,\n        message: 'All notifications cleared',\n      });\n    } catch (error) {\n      console.error('Error clearing notifications:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to clear notifications',\n      });\n    }\n  },\n\n  // Get unread notification count\n  async getUnreadCount(req: AuthRequest, res: Response) {\n    try {\n      const userId = req.user?.id;\n      console.log('Getting unread count for user:', userId);\n      \n      if (!userId) {\n        return res.status(401).json({\n          success: false,\n          message: 'User not authenticated',\n        });\n      }\n\n      const unreadCount = await prisma.notification.count({\n        where: {\n          userId,\n          read: false,\n        },\n      });\n\n      res.json({\n        success: true,\n        count: unreadCount,\n      });\n    } catch (error) {\n      console.error('Error fetching unread count:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to fetch unread notification count',\n      });\n    }\n  },\n};\n\n// Notification creation helper (to be used in other controllers)\nexport async function createNotification({\n  userId,\n  type,\n  title,\n  message,\n  data,\n}: {\n  userId: string;\n  type: string;\n  title: string;\n  message: string;\n  data?: any;\n}) {\n  try {\n    console.log('=== Creating Notification ===');\n    console.log('Target User ID (ObjectId):', userId);\n    console.log('Notification Type:', type);\n    console.log('Title:', title);\n    \n    // Validate userId is a valid ObjectId\n    if (!userId || typeof userId !== 'string' || userId.length !== 24) {\n      console.error('Invalid userId format:', userId);\n      return null;\n    }\n    \n    const notification = await prisma.notification.create({\n      data: {\n        userId,\n        type,\n        title,\n        message,\n        data,\n      },\n    });\n    \n    console.log('Notification created in DB with ID:', notification.id);\n    console.log('Notification userId:', notification.userId);\n\n    // Emit real-time notification if WebSocket is connected\n    const io = (global as any).io;\n    if (io) {\n      const roomName = `user-${userId}`;  // Using user- format to match socket.ts\n      console.log('Emitting notification to WebSocket room:', roomName);\n      \n      // Get all sockets in the room to verify\n      const sockets = await io.in(roomName).fetchSockets();\n      console.log(`Found ${sockets.length} socket(s) in room ${roomName}`);\n      \n      if (sockets.length > 0) {\n        io.to(roomName).emit('notification', notification);\n        console.log('Notification emitted successfully to room:', roomName);\n      } else {\n        console.log('No active sockets in room, user might be offline');\n      }\n    } else {\n      console.log('WebSocket server not available, notification saved to DB only');\n    }\n\n    return notification;\n  } catch (error) {\n    console.error('Error creating notification:', error);\n    return null;\n  }\n}"],"names":["createNotification","notificationController","prisma","PrismaClient","getUserNotifications","req","res","userId","user","id","console","log","status","json","success","message","page","limit","unreadOnly","query","skip","Number","where","read","notifications","total","unreadCount","Promise","all","notification","findMany","orderBy","createdAt","take","count","data","pagination","totalPages","Math","ceil","error","markAsRead","params","findFirst","updated","update","readAt","Date","markAllAsRead","updateMany","deleteNotification","delete","clearAllNotifications","deleteMany","getUnreadCount","type","title","length","create","io","global","roomName","sockets","in","fetchSockets","to","emit"],"mappings":"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"}