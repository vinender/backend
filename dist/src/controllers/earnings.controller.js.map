{"version":3,"sources":["../../../src/controllers/earnings.controller.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { asyncHandler } from '../utils/asyncHandler';\nimport { AppError } from '../utils/AppError';\nimport prisma from '../config/database';\nimport { automaticPayoutService } from '../services/auto-payout.service';\nimport { payoutService } from '../services/payout.service';\n\nclass EarningsController {\n  /**\n   * Get comprehensive earnings dashboard for field owner\n   */\n  getEarningsDashboard = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const userId = (req as any).user.id;\n    const userRole = (req as any).user.role;\n    \n    if (userRole !== 'FIELD_OWNER' && userRole !== 'ADMIN') {\n      throw new AppError('Only field owners can view earnings dashboard', 403);\n    }\n\n    // Get all fields for this owner\n    const userFields = await prisma.field.findMany({\n      where: { ownerId: userId },\n      select: { id: true, name: true }\n    });\n\n    if (userFields.length === 0) {\n      return res.json({\n        success: true,\n        data: {\n          totalEarnings: 0,\n          pendingPayouts: 0,\n          completedPayouts: 0,\n          upcomingPayouts: 0,\n          todayEarnings: 0,\n          weekEarnings: 0,\n          monthEarnings: 0,\n          yearEarnings: 0,\n          recentPayouts: [],\n          bookingsInCancellationWindow: [],\n          fieldEarnings: []\n        }\n      });\n    }\n\n    const fieldIds = userFields.map(f => f.id);\n    const now = new Date();\n    \n    // Calculate date ranges\n    const startOfDay = new Date(now);\n    startOfDay.setHours(0, 0, 0, 0);\n    \n    const startOfWeek = new Date(now);\n    startOfWeek.setDate(now.getDate() - now.getDay());\n    startOfWeek.setHours(0, 0, 0, 0);\n    \n    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n    const startOfYear = new Date(now.getFullYear(), 0, 1);\n\n    // Get Stripe account first to fetch payouts\n    const stripeAccount = await prisma.stripeAccount.findUnique({\n      where: { userId }\n    });\n\n    // Get successful payouts for total earnings calculation\n    let totalEarningsFromPayouts = 0;\n    let allSuccessfulPayouts: any[] = [];\n    let todayPayouts: any[] = [];\n    let weekPayouts: any[] = [];\n    let monthPayouts: any[] = [];\n    let yearPayouts: any[] = [];\n    \n    if (stripeAccount) {\n      // Get all successful payouts\n      allSuccessfulPayouts = await prisma.payout.findMany({\n        where: {\n          stripeAccountId: stripeAccount.id,\n          status: { in: ['paid', 'PAID', 'completed', 'COMPLETED'] }\n        }\n      });\n      \n      // Calculate total earnings from successful payouts\n      totalEarningsFromPayouts = allSuccessfulPayouts.reduce((sum, payout) => sum + payout.amount, 0);\n      \n      // Filter payouts by date ranges\n      todayPayouts = allSuccessfulPayouts.filter(p => new Date(p.createdAt) >= startOfDay);\n      weekPayouts = allSuccessfulPayouts.filter(p => new Date(p.createdAt) >= startOfWeek);\n      monthPayouts = allSuccessfulPayouts.filter(p => new Date(p.createdAt) >= startOfMonth);\n      yearPayouts = allSuccessfulPayouts.filter(p => new Date(p.createdAt) >= startOfYear);\n    }\n\n    // Get all bookings for other calculations\n    const [\n      allBookings,\n      completedPayoutBookings,\n      pendingPayoutBookings\n    ] = await Promise.all([\n      // All confirmed bookings (for field earnings breakdown)\n      prisma.booking.findMany({\n        where: {\n          fieldId: { in: fieldIds },\n          status: { in: ['CONFIRMED', 'COMPLETED'] },\n          paymentStatus: 'PAID'\n        },\n        include: {\n          field: { select: { name: true } },\n          user: { select: { name: true, email: true } }\n        }\n      }),\n      \n      // Bookings with completed payouts\n      prisma.booking.findMany({\n        where: {\n          fieldId: { in: fieldIds },\n          payoutStatus: 'COMPLETED'\n        }\n      }),\n      \n      // Pending payouts\n      prisma.booking.findMany({\n        where: {\n          fieldId: { in: fieldIds },\n          status: 'CONFIRMED',\n          paymentStatus: 'PAID',\n          OR: [\n            { payoutStatus: null },\n            { payoutStatus: { in: ['PENDING', 'PROCESSING'] } }\n          ]\n        },\n        include: {\n          field: { select: { name: true } },\n          user: { select: { name: true, email: true } }\n        }\n      })\n    ]);\n\n    // Calculate earnings from bookings (for pending amounts)\n    const calculateBookingEarnings = (bookings: any[]) => {\n      return bookings.reduce((sum, b) => sum + (b.fieldOwnerAmount || b.totalPrice * 0.8), 0);\n    };\n\n    // Use payout amounts for period earnings\n    const totalEarnings = totalEarningsFromPayouts;\n    const todayEarnings = todayPayouts.reduce((sum, p) => sum + p.amount, 0);\n    const weekEarnings = weekPayouts.reduce((sum, p) => sum + p.amount, 0);\n    const monthEarnings = monthPayouts.reduce((sum, p) => sum + p.amount, 0);\n    const yearEarnings = yearPayouts.reduce((sum, p) => sum + p.amount, 0);\n    const completedPayoutAmount = calculateBookingEarnings(completedPayoutBookings);\n    \n    // Get payout summary\n    const payoutSummary = await automaticPayoutService.getPayoutSummary(userId);\n    \n    // Get recent payouts\n    let recentPayouts: any[] = [];\n    if (stripeAccount) {\n      const payouts = await prisma.payout.findMany({\n        where: { stripeAccountId: stripeAccount.id },\n        orderBy: { createdAt: 'desc' },\n        take: 10\n      });\n      \n      // Enhance with booking details\n      recentPayouts = await Promise.all(\n        payouts.map(async (payout) => {\n          const bookings = await prisma.booking.findMany({\n            where: { id: { in: payout.bookingIds } },\n            include: {\n              field: { select: { name: true } },\n              user: { select: { name: true, email: true } }\n            }\n          });\n          \n          return {\n            id: payout.id,\n            amount: payout.amount,\n            status: payout.status,\n            createdAt: payout.createdAt,\n            arrivalDate: payout.arrivalDate,\n            bookings: bookings.map(b => ({\n              id: b.id,\n              fieldName: b.field.name,\n              customerName: b.user.name || b.user.email,\n              date: b.date,\n              amount: b.fieldOwnerAmount || b.totalPrice * 0.8\n            }))\n          };\n        })\n      );\n    }\n    \n    // Calculate earnings by field (based on successful payouts)\n    const fieldEarnings = await Promise.all(\n      userFields.map(async field => {\n        const fieldBookings = allBookings.filter(b => b.fieldId === field.id);\n        const bookingCount = fieldBookings.length;\n        \n        // Get successful payouts for this specific field\n        let fieldPayoutTotal = 0;\n        if (stripeAccount) {\n          // Get booking IDs for this field that have completed payouts\n          const completedFieldBookings = await prisma.booking.findMany({\n            where: {\n              fieldId: field.id,\n              payoutStatus: 'COMPLETED'\n            },\n            select: { id: true }\n          });\n          \n          const completedBookingIds = completedFieldBookings.map(b => b.id);\n          \n          // Get payouts that include these bookings\n          const fieldPayouts = await prisma.payout.findMany({\n            where: {\n              stripeAccountId: stripeAccount.id,\n              status: { in: ['paid', 'PAID', 'completed', 'COMPLETED'] },\n              bookingIds: {\n                hasSome: completedBookingIds\n              }\n            }\n          });\n          \n          // Sum up the payout amounts for this field\n          // Note: This is approximate as payouts can contain multiple bookings\n          fieldPayoutTotal = fieldPayouts.reduce((sum, payout) => {\n            // Calculate portion of payout for this field\n            const payoutBookingCount = payout.bookingIds.length;\n            const fieldBookingCount = payout.bookingIds.filter(id => \n              completedBookingIds.includes(id)\n            ).length;\n            const portion = payoutBookingCount > 0 ? (fieldBookingCount / payoutBookingCount) : 0;\n            return sum + (payout.amount * portion);\n          }, 0);\n        }\n        \n        return {\n          fieldId: field.id,\n          fieldName: field.name,\n          totalEarnings: fieldPayoutTotal,\n          totalBookings: bookingCount,\n          averageEarning: bookingCount > 0 ? fieldPayoutTotal / bookingCount : 0\n        };\n      })\n    );\n    \n    // Get upcoming earnings (bookings in cancellation window)\n    const upcomingEarnings = payoutSummary.bookingsInCancellationWindow.map(b => ({\n      ...b,\n      hoursUntilPayout: Math.max(0, Math.floor((new Date(b.payoutAvailableAt).getTime() - now.getTime()) / (1000 * 60 * 60)))\n    }));\n\n    res.json({\n      success: true,\n      data: {\n        // Total earnings overview\n        totalEarnings,\n        pendingPayouts: payoutSummary.pendingPayouts,\n        completedPayouts: completedPayoutAmount,\n        upcomingPayouts: payoutSummary.upcomingPayouts,\n        \n        // Period-based earnings\n        todayEarnings,\n        weekEarnings,\n        monthEarnings,\n        yearEarnings,\n        \n        // Recent payouts\n        recentPayouts,\n        \n        // Upcoming earnings (in cancellation window)\n        upcomingEarnings,\n        \n        // Earnings by field\n        fieldEarnings,\n        \n        // Stripe account status\n        hasStripeAccount: !!stripeAccount,\n        stripeAccountComplete: stripeAccount ? (stripeAccount.chargesEnabled && stripeAccount.payoutsEnabled) : false\n      }\n    });\n  });\n\n  /**\n   * Get detailed payout history with pagination\n   */\n  getPayoutHistory = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const userId = (req as any).user.id;\n    const userRole = (req as any).user.role;\n    const { page = 1, limit = 20, status, startDate, endDate } = req.query;\n    \n    if (userRole !== 'FIELD_OWNER' && userRole !== 'ADMIN') {\n      throw new AppError('Only field owners can view payout history', 403);\n    }\n\n    const pageNum = Number(page);\n    const limitNum = Number(limit);\n    \n    // Get Stripe account\n    const stripeAccount = await prisma.stripeAccount.findUnique({\n      where: { userId }\n    });\n    \n    if (!stripeAccount) {\n      return res.json({\n        success: true,\n        data: {\n          payouts: [],\n          total: 0,\n          page: pageNum,\n          limit: limitNum,\n          totalPages: 0\n        }\n      });\n    }\n    \n    // Build where clause\n    const whereClause: any = { stripeAccountId: stripeAccount.id };\n    \n    if (status) {\n      whereClause.status = status as string;\n    }\n    \n    if (startDate || endDate) {\n      whereClause.createdAt = {};\n      if (startDate) {\n        whereClause.createdAt.gte = new Date(startDate as string);\n      }\n      if (endDate) {\n        whereClause.createdAt.lte = new Date(endDate as string);\n      }\n    }\n    \n    // Get paginated payouts\n    const skip = (pageNum - 1) * limitNum;\n    \n    const [payouts, total] = await Promise.all([\n      prisma.payout.findMany({\n        where: whereClause,\n        orderBy: { createdAt: 'desc' },\n        skip,\n        take: limitNum\n      }),\n      prisma.payout.count({ where: whereClause })\n    ]);\n    \n    // Enhance payouts with booking details\n    const enhancedPayouts = await Promise.all(\n      payouts.map(async (payout) => {\n        const bookings = await prisma.booking.findMany({\n          where: { id: { in: payout.bookingIds } },\n          include: {\n            field: { select: { name: true } },\n            user: { select: { name: true, email: true } }\n          }\n        });\n        \n        return {\n          id: payout.id,\n          stripePayoutId: payout.stripePayoutId,\n          amount: payout.amount,\n          currency: payout.currency,\n          status: payout.status,\n          method: payout.method,\n          description: payout.description,\n          arrivalDate: payout.arrivalDate,\n          createdAt: payout.createdAt,\n          bookingCount: bookings.length,\n          bookings: bookings.map(b => ({\n            id: b.id,\n            fieldName: b.field.name,\n            customerName: b.user.name || b.user.email,\n            date: b.date,\n            time: `${b.startTime} - ${b.endTime}`,\n            amount: b.fieldOwnerAmount || b.totalPrice * 0.8,\n            status: b.status\n          }))\n        };\n      })\n    );\n    \n    res.json({\n      success: true,\n      data: {\n        payouts: enhancedPayouts,\n        total,\n        page: pageNum,\n        limit: limitNum,\n        totalPages: Math.ceil(total / limitNum)\n      }\n    });\n  });\n\n  /**\n   * Export payout history as CSV\n   */\n  exportPayoutHistory = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const userId = (req as any).user.id;\n    const userRole = (req as any).user.role;\n    const { startDate, endDate } = req.query;\n    \n    if (userRole !== 'FIELD_OWNER' && userRole !== 'ADMIN') {\n      throw new AppError('Only field owners can export payout history', 403);\n    }\n    \n    // Get Stripe account\n    const stripeAccount = await prisma.stripeAccount.findUnique({\n      where: { userId }\n    });\n    \n    if (!stripeAccount) {\n      throw new AppError('No Stripe account found', 404);\n    }\n    \n    // Build where clause\n    const whereClause: any = { stripeAccountId: stripeAccount.id };\n    \n    if (startDate || endDate) {\n      whereClause.createdAt = {};\n      if (startDate) {\n        whereClause.createdAt.gte = new Date(startDate as string);\n      }\n      if (endDate) {\n        whereClause.createdAt.lte = new Date(endDate as string);\n      }\n    }\n    \n    // Get all payouts\n    const payouts = await prisma.payout.findMany({\n      where: whereClause,\n      orderBy: { createdAt: 'desc' }\n    });\n    \n    // Create CSV content\n    const csvHeader = 'Date,Payout ID,Amount,Currency,Status,Method,Description,Arrival Date,Booking Count\\n';\n    \n    const csvRows = await Promise.all(\n      payouts.map(async (payout) => {\n        const bookingCount = payout.bookingIds.length;\n        return `${payout.createdAt.toISOString()},${payout.stripePayoutId || 'N/A'},${payout.amount},${payout.currency},${payout.status},${payout.method},${payout.description || 'N/A'},${payout.arrivalDate?.toISOString() || 'N/A'},${bookingCount}`;\n      })\n    );\n    \n    const csvContent = csvHeader + csvRows.join('\\n');\n    \n    // Set headers for file download\n    res.setHeader('Content-Type', 'text/csv');\n    res.setHeader('Content-Disposition', `attachment; filename=\"payouts_${new Date().toISOString().split('T')[0]}.csv\"`);\n    res.send(csvContent);\n  });\n}\n\nexport default new EarningsController();"],"names":["EarningsController","getEarningsDashboard","asyncHandler","req","res","next","userId","user","id","userRole","role","AppError","userFields","prisma","field","findMany","where","ownerId","select","name","length","json","success","data","totalEarnings","pendingPayouts","completedPayouts","upcomingPayouts","todayEarnings","weekEarnings","monthEarnings","yearEarnings","recentPayouts","bookingsInCancellationWindow","fieldEarnings","fieldIds","map","f","now","Date","startOfDay","setHours","startOfWeek","setDate","getDate","getDay","startOfMonth","getFullYear","getMonth","startOfYear","stripeAccount","findUnique","totalEarningsFromPayouts","allSuccessfulPayouts","todayPayouts","weekPayouts","monthPayouts","yearPayouts","payout","stripeAccountId","status","in","reduce","sum","amount","filter","p","createdAt","allBookings","completedPayoutBookings","pendingPayoutBookings","Promise","all","booking","fieldId","paymentStatus","include","email","payoutStatus","OR","calculateBookingEarnings","bookings","b","fieldOwnerAmount","totalPrice","completedPayoutAmount","payoutSummary","automaticPayoutService","getPayoutSummary","payouts","orderBy","take","bookingIds","arrivalDate","fieldName","customerName","date","fieldBookings","bookingCount","fieldPayoutTotal","completedFieldBookings","completedBookingIds","fieldPayouts","hasSome","payoutBookingCount","fieldBookingCount","includes","portion","totalBookings","averageEarning","upcomingEarnings","hoursUntilPayout","Math","max","floor","payoutAvailableAt","getTime","hasStripeAccount","stripeAccountComplete","chargesEnabled","payoutsEnabled","getPayoutHistory","page","limit","startDate","endDate","query","pageNum","Number","limitNum","total","totalPages","whereClause","gte","lte","skip","count","enhancedPayouts","stripePayoutId","currency","method","description","time","startTime","endTime","ceil","exportPayoutHistory","csvHeader","csvRows","toISOString","csvContent","join","setHeader","split","send"],"mappings":"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"}