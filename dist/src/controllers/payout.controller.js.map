{"version":3,"sources":["../../../src/controllers/payout.controller.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport { PrismaClient } from '@prisma/client';\nimport { payoutService } from '../services/payout.service';\n\nconst prisma = new PrismaClient();\n\n// Get field owner's earnings history with pagination\nexport const getEarningsHistory = async (req: Request, res: Response) => {\n  try {\n    const userId = (req as any).user._id || (req as any).user.id;\n    const { page = 1, limit = 10, status, startDate, endDate } = req.query;\n    \n    const skip = (Number(page) - 1) * Number(limit);\n\n    // Build query filters\n    const where: any = {};\n\n    // Get all fields owned by this user\n    const userFields = await prisma.field.findMany({\n      where: { ownerId: userId },\n      select: { id: true }\n    });\n\n    const fieldIds = userFields.map(field => field.id);\n\n    if (fieldIds.length === 0) {\n      return res.json({\n        transactions: [],\n        totalEarnings: 0,\n        stats: {\n          completed: 0,\n          refunded: 0,\n          failed: 0\n        },\n        pagination: {\n          page: Number(page),\n          limit: Number(limit),\n          total: 0,\n          totalPages: 0\n        }\n      });\n    }\n\n    // Get bookings for these fields including cancelled ones with transfers\n    const bookingWhere: any = {\n      fieldId: { in: fieldIds },\n      OR: [\n        { status: 'COMPLETED' },\n        { \n          status: 'CANCELLED',\n          payoutStatus: { not: null } // Include cancelled bookings that have payouts\n        }\n      ]\n    };\n\n    // Get transactions for these bookings\n    const bookings = await prisma.booking.findMany({\n      where: bookingWhere,\n      select: { id: true }\n    });\n\n    const bookingIds = bookings.map(booking => booking.id);\n\n    // Build transaction query\n    const transactionWhere: any = {\n      bookingId: { in: bookingIds }\n    };\n\n    if (status) {\n      transactionWhere.status = status;\n    }\n\n    if (startDate || endDate) {\n      transactionWhere.createdAt = {};\n      if (startDate) {\n        transactionWhere.createdAt.gte = new Date(startDate as string);\n      }\n      if (endDate) {\n        transactionWhere.createdAt.lte = new Date(endDate as string);\n      }\n    }\n\n    // Get transactions with pagination\n    const [transactions, total] = await Promise.all([\n      prisma.transaction.findMany({\n        where: transactionWhere,\n        include: {\n          booking: {\n            include: {\n              field: {\n                select: {\n                  name: true,\n                  address: true\n                }\n              },\n              user: {\n                select: {\n                  name: true,\n                  email: true\n                }\n              }\n            }\n          }\n        },\n        orderBy: {\n          createdAt: 'desc'\n        },\n        skip,\n        take: Number(limit)\n      }),\n      prisma.transaction.count({\n        where: transactionWhere\n      })\n    ]);\n\n    // Calculate total earnings and stats\n    const allTransactions = await prisma.transaction.findMany({\n      where: {\n        bookingId: { in: bookingIds },\n        status: 'COMPLETED'\n      },\n      select: {\n        amount: true,\n        status: true\n      }\n    });\n\n    const totalEarnings = allTransactions.reduce((sum, t) => sum + t.amount, 0);\n\n    // Get status counts\n    const statusCounts = await prisma.transaction.groupBy({\n      by: ['status'],\n      where: {\n        bookingId: { in: bookingIds }\n      },\n      _count: true\n    });\n\n    const stats = {\n      completed: statusCounts.find(s => s.status === 'COMPLETED')?._count || 0,\n      refunded: statusCounts.find(s => s.status === 'REFUNDED')?._count || 0,\n      failed: statusCounts.find(s => s.status === 'FAILED')?._count || 0\n    };\n\n    // Format transactions for frontend\n    const formattedTransactions = transactions.map(transaction => ({\n      id: transaction.id,\n      orderId: `#${transaction.id.slice(-6).toUpperCase()}`,\n      paymentId: transaction.stripePaymentIntentId || transaction.id,\n      date: transaction.createdAt,\n      amount: transaction.amount,\n      status: transaction.status.toLowerCase(),\n      type: transaction.type,\n      fieldName: transaction.booking.field.name,\n      fieldAddress: transaction.booking.field.address,\n      customerName: transaction.booking.user.name,\n      customerEmail: transaction.booking.user.email,\n      description: transaction.description\n    }));\n\n    res.json({\n      transactions: formattedTransactions,\n      totalEarnings,\n      stats,\n      pagination: {\n        page: Number(page),\n        limit: Number(limit),\n        total,\n        totalPages: Math.ceil(total / Number(limit))\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching earnings history:', error);\n    res.status(500).json({ error: 'Failed to fetch earnings history' });\n  }\n};\n\n// Get earnings summary\nexport const getEarningsSummary = async (req: Request, res: Response) => {\n  try {\n    const userId = (req as any).user._id || (req as any).user.id;\n    const { period = 'all' } = req.query;\n\n    // Get all fields owned by this user\n    const userFields = await prisma.field.findMany({\n      where: { ownerId: userId },\n      select: { id: true }\n    });\n\n    const fieldIds = userFields.map(field => field.id);\n\n    if (fieldIds.length === 0) {\n      return res.json({\n        totalEarnings: 0,\n        currentBalance: 0,\n        pendingPayouts: 0,\n        lastPayout: null,\n        monthlyEarnings: []\n      });\n    }\n\n    // Get bookings for these fields\n    const bookings = await prisma.booking.findMany({\n      where: { fieldId: { in: fieldIds } },\n      select: { id: true }\n    });\n\n    const bookingIds = bookings.map(booking => booking.id);\n\n    // Calculate date range based on period\n    let dateFilter = {};\n    const now = new Date();\n    \n    switch (period) {\n      case 'week':\n        dateFilter = {\n          gte: new Date(now.setDate(now.getDate() - 7))\n        };\n        break;\n      case 'month':\n        dateFilter = {\n          gte: new Date(now.setMonth(now.getMonth() - 1))\n        };\n        break;\n      case 'year':\n        dateFilter = {\n          gte: new Date(now.setFullYear(now.getFullYear() - 1))\n        };\n        break;\n    }\n\n    // Get completed transactions\n    const completedTransactions = await prisma.transaction.findMany({\n      where: {\n        bookingId: { in: bookingIds },\n        status: 'COMPLETED',\n        ...(period !== 'all' && { createdAt: dateFilter })\n      },\n      select: {\n        amount: true,\n        createdAt: true\n      }\n    });\n\n    const totalEarnings = completedTransactions.reduce((sum, t) => sum + t.amount, 0);\n\n    // Get pending transactions\n    const pendingTransactions = await prisma.transaction.findMany({\n      where: {\n        bookingId: { in: bookingIds },\n        status: 'PENDING'\n      },\n      select: {\n        amount: true\n      }\n    });\n\n    const pendingPayouts = pendingTransactions.reduce((sum, t) => sum + t.amount, 0);\n\n    // Calculate monthly earnings for chart\n    const sixMonthsAgo = new Date();\n    sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);\n\n    const monthlyTransactions = await prisma.transaction.findMany({\n      where: {\n        bookingId: { in: bookingIds },\n        status: 'COMPLETED',\n        createdAt: {\n          gte: sixMonthsAgo\n        }\n      },\n      select: {\n        amount: true,\n        createdAt: true\n      }\n    });\n\n    // Group by month\n    const monthlyEarnings = Array.from({ length: 6 }, (_, i) => {\n      const date = new Date();\n      date.setMonth(date.getMonth() - (5 - i));\n      const month = date.toLocaleString('default', { month: 'short' });\n      const year = date.getFullYear();\n      \n      const monthTransactions = monthlyTransactions.filter(t => {\n        const tDate = new Date(t.createdAt);\n        return tDate.getMonth() === date.getMonth() && tDate.getFullYear() === year;\n      });\n      \n      const amount = monthTransactions.reduce((sum, t) => sum + t.amount, 0);\n      \n      return {\n        month: `${month} ${year}`,\n        amount\n      };\n    });\n\n    res.json({\n      totalEarnings,\n      currentBalance: totalEarnings - pendingPayouts, // Simplified calculation\n      pendingPayouts,\n      lastPayout: null, // To be implemented with payout tracking\n      monthlyEarnings\n    });\n  } catch (error) {\n    console.error('Error fetching earnings summary:', error);\n    res.status(500).json({ error: 'Failed to fetch earnings summary' });\n  }\n};\n\n// Get transaction details\nexport const getTransactionDetails = async (req: Request, res: Response) => {\n  try {\n    const { transactionId } = req.params;\n    const userId = (req as any).user._id || (req as any).user.id;\n\n    const transaction = await prisma.transaction.findUnique({\n      where: { id: transactionId },\n      include: {\n        booking: {\n          include: {\n            field: true,\n            user: {\n              select: {\n                name: true,\n                email: true,\n                phone: true\n              }\n            }\n          }\n        }\n      }\n    });\n\n    if (!transaction) {\n      return res.status(404).json({ error: 'Transaction not found' });\n    }\n\n    // Verify the user owns the field\n    if (transaction.booking.field.ownerId !== userId) {\n      return res.status(403).json({ error: 'Access denied' });\n    }\n\n    res.json(transaction);\n  } catch (error) {\n    console.error('Error fetching transaction details:', error);\n    res.status(500).json({ error: 'Failed to fetch transaction details' });\n  }\n};\n\n// Process pending payouts for field owner (after Stripe account setup)\nexport const processPendingPayouts = async (req: Request, res: Response) => {\n  try {\n    const userId = (req as any).user._id || (req as any).user.id;\n    const userRole = (req as any).user.role;\n\n    // Only field owners can process their payouts\n    if (userRole !== 'FIELD_OWNER') {\n      return res.status(403).json({ error: 'Only field owners can process payouts' });\n    }\n\n    const results = await payoutService.processPendingPayouts(userId);\n    \n    const successCount = results.filter(r => r.success).length;\n    const failedCount = results.filter(r => !r.success).length;\n\n    res.json({\n      success: true,\n      message: `Processed ${successCount} payouts successfully, ${failedCount} failed`,\n      data: {\n        processed: successCount,\n        failed: failedCount,\n        results\n      }\n    });\n  } catch (error) {\n    console.error('Error processing pending payouts:', error);\n    res.status(500).json({ \n      error: 'Failed to process pending payouts',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n};\n\n// Get payout history for field owner\nexport const getPayoutHistory = async (req: Request, res: Response) => {\n  try {\n    const userId = (req as any).user._id || (req as any).user.id;\n    const { page = 1, limit = 10 } = req.query;\n\n    const payouts = await payoutService.getPayoutHistory(\n      userId, \n      Number(page), \n      Number(limit)\n    );\n\n    res.json({\n      success: true,\n      data: payouts\n    });\n  } catch (error) {\n    console.error('Error fetching payout history:', error);\n    res.status(500).json({ \n      error: 'Failed to fetch payout history',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n};\n\n// Manually trigger payout for a specific booking (Admin only)\nexport const triggerBookingPayout = async (req: Request, res: Response) => {\n  try {\n    const { bookingId } = req.params;\n    const userRole = (req as any).user.role;\n\n    // Only admins can manually trigger payouts\n    if (userRole !== 'ADMIN') {\n      return res.status(403).json({ error: 'Only admins can manually trigger payouts' });\n    }\n\n    const payout = await payoutService.processBookingPayout(bookingId);\n\n    res.json({\n      success: true,\n      message: 'Payout triggered successfully',\n      data: payout\n    });\n  } catch (error) {\n    console.error('Error triggering payout:', error);\n    res.status(500).json({ \n      error: 'Failed to trigger payout',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n};"],"names":["getEarningsHistory","getEarningsSummary","getPayoutHistory","getTransactionDetails","processPendingPayouts","triggerBookingPayout","prisma","PrismaClient","req","res","userId","user","_id","id","page","limit","status","startDate","endDate","query","skip","Number","where","userFields","field","findMany","ownerId","select","fieldIds","map","length","json","transactions","totalEarnings","stats","completed","refunded","failed","pagination","total","totalPages","bookingWhere","fieldId","in","OR","payoutStatus","not","bookings","booking","bookingIds","transactionWhere","bookingId","createdAt","gte","Date","lte","Promise","all","transaction","include","name","address","email","orderBy","take","count","allTransactions","amount","reduce","sum","t","statusCounts","groupBy","by","_count","find","s","formattedTransactions","orderId","slice","toUpperCase","paymentId","stripePaymentIntentId","date","toLowerCase","type","fieldName","fieldAddress","customerName","customerEmail","description","Math","ceil","error","console","period","currentBalance","pendingPayouts","lastPayout","monthlyEarnings","dateFilter","now","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear","completedTransactions","pendingTransactions","sixMonthsAgo","monthlyTransactions","Array","from","_","i","month","toLocaleString","year","monthTransactions","filter","tDate","transactionId","params","findUnique","phone","userRole","role","results","payoutService","successCount","r","success","failedCount","message","data","processed","details","Error","payouts","payout","processBookingPayout"],"mappings":";;;;;;;;;;;QAOaA;eAAAA;;QA2KAC;eAAAA;;QA+MAC;eAAAA;;QA1EAC;eAAAA;;QAwCAC;eAAAA;;QA2DAC;eAAAA;;;wBAzZgB;+BACC;AAE9B,MAAMC,SAAS,IAAIC,oBAAY;AAGxB,MAAMP,qBAAqB,OAAOQ,KAAcC;IACrD,IAAI;QACF,MAAMC,SAAS,AAACF,IAAYG,IAAI,CAACC,GAAG,IAAI,AAACJ,IAAYG,IAAI,CAACE,EAAE;QAC5D,MAAM,EAAEC,OAAO,CAAC,EAAEC,QAAQ,EAAE,EAAEC,MAAM,EAAEC,SAAS,EAAEC,OAAO,EAAE,GAAGV,IAAIW,KAAK;QAEtE,MAAMC,OAAO,AAACC,CAAAA,OAAOP,QAAQ,CAAA,IAAKO,OAAON;QAEzC,sBAAsB;QACtB,MAAMO,QAAa,CAAC;QAEpB,oCAAoC;QACpC,MAAMC,aAAa,MAAMjB,OAAOkB,KAAK,CAACC,QAAQ,CAAC;YAC7CH,OAAO;gBAAEI,SAAShB;YAAO;YACzBiB,QAAQ;gBAAEd,IAAI;YAAK;QACrB;QAEA,MAAMe,WAAWL,WAAWM,GAAG,CAACL,CAAAA,QAASA,MAAMX,EAAE;QAEjD,IAAIe,SAASE,MAAM,KAAK,GAAG;YACzB,OAAOrB,IAAIsB,IAAI,CAAC;gBACdC,cAAc,EAAE;gBAChBC,eAAe;gBACfC,OAAO;oBACLC,WAAW;oBACXC,UAAU;oBACVC,QAAQ;gBACV;gBACAC,YAAY;oBACVxB,MAAMO,OAAOP;oBACbC,OAAOM,OAAON;oBACdwB,OAAO;oBACPC,YAAY;gBACd;YACF;QACF;QAEA,wEAAwE;QACxE,MAAMC,eAAoB;YACxBC,SAAS;gBAAEC,IAAIf;YAAS;YACxBgB,IAAI;gBACF;oBAAE5B,QAAQ;gBAAY;gBACtB;oBACEA,QAAQ;oBACR6B,cAAc;wBAAEC,KAAK;oBAAK,EAAE,+CAA+C;gBAC7E;aACD;QACH;QAEA,sCAAsC;QACtC,MAAMC,WAAW,MAAMzC,OAAO0C,OAAO,CAACvB,QAAQ,CAAC;YAC7CH,OAAOmB;YACPd,QAAQ;gBAAEd,IAAI;YAAK;QACrB;QAEA,MAAMoC,aAAaF,SAASlB,GAAG,CAACmB,CAAAA,UAAWA,QAAQnC,EAAE;QAErD,0BAA0B;QAC1B,MAAMqC,mBAAwB;YAC5BC,WAAW;gBAAER,IAAIM;YAAW;QAC9B;QAEA,IAAIjC,QAAQ;YACVkC,iBAAiBlC,MAAM,GAAGA;QAC5B;QAEA,IAAIC,aAAaC,SAAS;YACxBgC,iBAAiBE,SAAS,GAAG,CAAC;YAC9B,IAAInC,WAAW;gBACbiC,iBAAiBE,SAAS,CAACC,GAAG,GAAG,IAAIC,KAAKrC;YAC5C;YACA,IAAIC,SAAS;gBACXgC,iBAAiBE,SAAS,CAACG,GAAG,GAAG,IAAID,KAAKpC;YAC5C;QACF;QAEA,mCAAmC;QACnC,MAAM,CAACc,cAAcO,MAAM,GAAG,MAAMiB,QAAQC,GAAG,CAAC;YAC9CnD,OAAOoD,WAAW,CAACjC,QAAQ,CAAC;gBAC1BH,OAAO4B;gBACPS,SAAS;oBACPX,SAAS;wBACPW,SAAS;4BACPnC,OAAO;gCACLG,QAAQ;oCACNiC,MAAM;oCACNC,SAAS;gCACX;4BACF;4BACAlD,MAAM;gCACJgB,QAAQ;oCACNiC,MAAM;oCACNE,OAAO;gCACT;4BACF;wBACF;oBACF;gBACF;gBACAC,SAAS;oBACPX,WAAW;gBACb;gBACAhC;gBACA4C,MAAM3C,OAAON;YACf;YACAT,OAAOoD,WAAW,CAACO,KAAK,CAAC;gBACvB3C,OAAO4B;YACT;SACD;QAED,qCAAqC;QACrC,MAAMgB,kBAAkB,MAAM5D,OAAOoD,WAAW,CAACjC,QAAQ,CAAC;YACxDH,OAAO;gBACL6B,WAAW;oBAAER,IAAIM;gBAAW;gBAC5BjC,QAAQ;YACV;YACAW,QAAQ;gBACNwC,QAAQ;gBACRnD,QAAQ;YACV;QACF;QAEA,MAAMiB,gBAAgBiC,gBAAgBE,MAAM,CAAC,CAACC,KAAKC,IAAMD,MAAMC,EAAEH,MAAM,EAAE;QAEzE,oBAAoB;QACpB,MAAMI,eAAe,MAAMjE,OAAOoD,WAAW,CAACc,OAAO,CAAC;YACpDC,IAAI;gBAAC;aAAS;YACdnD,OAAO;gBACL6B,WAAW;oBAAER,IAAIM;gBAAW;YAC9B;YACAyB,QAAQ;QACV;QAEA,MAAMxC,QAAQ;YACZC,WAAWoC,aAAaI,IAAI,CAACC,CAAAA,IAAKA,EAAE5D,MAAM,KAAK,cAAc0D,UAAU;YACvEtC,UAAUmC,aAAaI,IAAI,CAACC,CAAAA,IAAKA,EAAE5D,MAAM,KAAK,aAAa0D,UAAU;YACrErC,QAAQkC,aAAaI,IAAI,CAACC,CAAAA,IAAKA,EAAE5D,MAAM,KAAK,WAAW0D,UAAU;QACnE;QAEA,mCAAmC;QACnC,MAAMG,wBAAwB7C,aAAaH,GAAG,CAAC6B,CAAAA,cAAgB,CAAA;gBAC7D7C,IAAI6C,YAAY7C,EAAE;gBAClBiE,SAAS,CAAC,CAAC,EAAEpB,YAAY7C,EAAE,CAACkE,KAAK,CAAC,CAAC,GAAGC,WAAW,IAAI;gBACrDC,WAAWvB,YAAYwB,qBAAqB,IAAIxB,YAAY7C,EAAE;gBAC9DsE,MAAMzB,YAAYN,SAAS;gBAC3Be,QAAQT,YAAYS,MAAM;gBAC1BnD,QAAQ0C,YAAY1C,MAAM,CAACoE,WAAW;gBACtCC,MAAM3B,YAAY2B,IAAI;gBACtBC,WAAW5B,YAAYV,OAAO,CAACxB,KAAK,CAACoC,IAAI;gBACzC2B,cAAc7B,YAAYV,OAAO,CAACxB,KAAK,CAACqC,OAAO;gBAC/C2B,cAAc9B,YAAYV,OAAO,CAACrC,IAAI,CAACiD,IAAI;gBAC3C6B,eAAe/B,YAAYV,OAAO,CAACrC,IAAI,CAACmD,KAAK;gBAC7C4B,aAAahC,YAAYgC,WAAW;YACtC,CAAA;QAEAjF,IAAIsB,IAAI,CAAC;YACPC,cAAc6C;YACd5C;YACAC;YACAI,YAAY;gBACVxB,MAAMO,OAAOP;gBACbC,OAAOM,OAAON;gBACdwB;gBACAC,YAAYmD,KAAKC,IAAI,CAACrD,QAAQlB,OAAON;YACvC;QACF;IACF,EAAE,OAAO8E,OAAO;QACdC,QAAQD,KAAK,CAAC,oCAAoCA;QAClDpF,IAAIO,MAAM,CAAC,KAAKe,IAAI,CAAC;YAAE8D,OAAO;QAAmC;IACnE;AACF;AAGO,MAAM5F,qBAAqB,OAAOO,KAAcC;IACrD,IAAI;QACF,MAAMC,SAAS,AAACF,IAAYG,IAAI,CAACC,GAAG,IAAI,AAACJ,IAAYG,IAAI,CAACE,EAAE;QAC5D,MAAM,EAAEkF,SAAS,KAAK,EAAE,GAAGvF,IAAIW,KAAK;QAEpC,oCAAoC;QACpC,MAAMI,aAAa,MAAMjB,OAAOkB,KAAK,CAACC,QAAQ,CAAC;YAC7CH,OAAO;gBAAEI,SAAShB;YAAO;YACzBiB,QAAQ;gBAAEd,IAAI;YAAK;QACrB;QAEA,MAAMe,WAAWL,WAAWM,GAAG,CAACL,CAAAA,QAASA,MAAMX,EAAE;QAEjD,IAAIe,SAASE,MAAM,KAAK,GAAG;YACzB,OAAOrB,IAAIsB,IAAI,CAAC;gBACdE,eAAe;gBACf+D,gBAAgB;gBAChBC,gBAAgB;gBAChBC,YAAY;gBACZC,iBAAiB,EAAE;YACrB;QACF;QAEA,gCAAgC;QAChC,MAAMpD,WAAW,MAAMzC,OAAO0C,OAAO,CAACvB,QAAQ,CAAC;YAC7CH,OAAO;gBAAEoB,SAAS;oBAAEC,IAAIf;gBAAS;YAAE;YACnCD,QAAQ;gBAAEd,IAAI;YAAK;QACrB;QAEA,MAAMoC,aAAaF,SAASlB,GAAG,CAACmB,CAAAA,UAAWA,QAAQnC,EAAE;QAErD,uCAAuC;QACvC,IAAIuF,aAAa,CAAC;QAClB,MAAMC,MAAM,IAAI/C;QAEhB,OAAQyC;YACN,KAAK;gBACHK,aAAa;oBACX/C,KAAK,IAAIC,KAAK+C,IAAIC,OAAO,CAACD,IAAIE,OAAO,KAAK;gBAC5C;gBACA;YACF,KAAK;gBACHH,aAAa;oBACX/C,KAAK,IAAIC,KAAK+C,IAAIG,QAAQ,CAACH,IAAII,QAAQ,KAAK;gBAC9C;gBACA;YACF,KAAK;gBACHL,aAAa;oBACX/C,KAAK,IAAIC,KAAK+C,IAAIK,WAAW,CAACL,IAAIM,WAAW,KAAK;gBACpD;gBACA;QACJ;QAEA,6BAA6B;QAC7B,MAAMC,wBAAwB,MAAMtG,OAAOoD,WAAW,CAACjC,QAAQ,CAAC;YAC9DH,OAAO;gBACL6B,WAAW;oBAAER,IAAIM;gBAAW;gBAC5BjC,QAAQ;gBACR,GAAI+E,WAAW,SAAS;oBAAE3C,WAAWgD;gBAAW,CAAC;YACnD;YACAzE,QAAQ;gBACNwC,QAAQ;gBACRf,WAAW;YACb;QACF;QAEA,MAAMnB,gBAAgB2E,sBAAsBxC,MAAM,CAAC,CAACC,KAAKC,IAAMD,MAAMC,EAAEH,MAAM,EAAE;QAE/E,2BAA2B;QAC3B,MAAM0C,sBAAsB,MAAMvG,OAAOoD,WAAW,CAACjC,QAAQ,CAAC;YAC5DH,OAAO;gBACL6B,WAAW;oBAAER,IAAIM;gBAAW;gBAC5BjC,QAAQ;YACV;YACAW,QAAQ;gBACNwC,QAAQ;YACV;QACF;QAEA,MAAM8B,iBAAiBY,oBAAoBzC,MAAM,CAAC,CAACC,KAAKC,IAAMD,MAAMC,EAAEH,MAAM,EAAE;QAE9E,uCAAuC;QACvC,MAAM2C,eAAe,IAAIxD;QACzBwD,aAAaN,QAAQ,CAACM,aAAaL,QAAQ,KAAK;QAEhD,MAAMM,sBAAsB,MAAMzG,OAAOoD,WAAW,CAACjC,QAAQ,CAAC;YAC5DH,OAAO;gBACL6B,WAAW;oBAAER,IAAIM;gBAAW;gBAC5BjC,QAAQ;gBACRoC,WAAW;oBACTC,KAAKyD;gBACP;YACF;YACAnF,QAAQ;gBACNwC,QAAQ;gBACRf,WAAW;YACb;QACF;QAEA,iBAAiB;QACjB,MAAM+C,kBAAkBa,MAAMC,IAAI,CAAC;YAAEnF,QAAQ;QAAE,GAAG,CAACoF,GAAGC;YACpD,MAAMhC,OAAO,IAAI7B;YACjB6B,KAAKqB,QAAQ,CAACrB,KAAKsB,QAAQ,KAAM,CAAA,IAAIU,CAAAA;YACrC,MAAMC,QAAQjC,KAAKkC,cAAc,CAAC,WAAW;gBAAED,OAAO;YAAQ;YAC9D,MAAME,OAAOnC,KAAKwB,WAAW;YAE7B,MAAMY,oBAAoBR,oBAAoBS,MAAM,CAAClD,CAAAA;gBACnD,MAAMmD,QAAQ,IAAInE,KAAKgB,EAAElB,SAAS;gBAClC,OAAOqE,MAAMhB,QAAQ,OAAOtB,KAAKsB,QAAQ,MAAMgB,MAAMd,WAAW,OAAOW;YACzE;YAEA,MAAMnD,SAASoD,kBAAkBnD,MAAM,CAAC,CAACC,KAAKC,IAAMD,MAAMC,EAAEH,MAAM,EAAE;YAEpE,OAAO;gBACLiD,OAAO,GAAGA,MAAM,CAAC,EAAEE,MAAM;gBACzBnD;YACF;QACF;QAEA1D,IAAIsB,IAAI,CAAC;YACPE;YACA+D,gBAAgB/D,gBAAgBgE;YAChCA;YACAC,YAAY;YACZC;QACF;IACF,EAAE,OAAON,OAAO;QACdC,QAAQD,KAAK,CAAC,oCAAoCA;QAClDpF,IAAIO,MAAM,CAAC,KAAKe,IAAI,CAAC;YAAE8D,OAAO;QAAmC;IACnE;AACF;AAGO,MAAM1F,wBAAwB,OAAOK,KAAcC;IACxD,IAAI;QACF,MAAM,EAAEiH,aAAa,EAAE,GAAGlH,IAAImH,MAAM;QACpC,MAAMjH,SAAS,AAACF,IAAYG,IAAI,CAACC,GAAG,IAAI,AAACJ,IAAYG,IAAI,CAACE,EAAE;QAE5D,MAAM6C,cAAc,MAAMpD,OAAOoD,WAAW,CAACkE,UAAU,CAAC;YACtDtG,OAAO;gBAAET,IAAI6G;YAAc;YAC3B/D,SAAS;gBACPX,SAAS;oBACPW,SAAS;wBACPnC,OAAO;wBACPb,MAAM;4BACJgB,QAAQ;gCACNiC,MAAM;gCACNE,OAAO;gCACP+D,OAAO;4BACT;wBACF;oBACF;gBACF;YACF;QACF;QAEA,IAAI,CAACnE,aAAa;YAChB,OAAOjD,IAAIO,MAAM,CAAC,KAAKe,IAAI,CAAC;gBAAE8D,OAAO;YAAwB;QAC/D;QAEA,iCAAiC;QACjC,IAAInC,YAAYV,OAAO,CAACxB,KAAK,CAACE,OAAO,KAAKhB,QAAQ;YAChD,OAAOD,IAAIO,MAAM,CAAC,KAAKe,IAAI,CAAC;gBAAE8D,OAAO;YAAgB;QACvD;QAEApF,IAAIsB,IAAI,CAAC2B;IACX,EAAE,OAAOmC,OAAO;QACdC,QAAQD,KAAK,CAAC,uCAAuCA;QACrDpF,IAAIO,MAAM,CAAC,KAAKe,IAAI,CAAC;YAAE8D,OAAO;QAAsC;IACtE;AACF;AAGO,MAAMzF,wBAAwB,OAAOI,KAAcC;IACxD,IAAI;QACF,MAAMC,SAAS,AAACF,IAAYG,IAAI,CAACC,GAAG,IAAI,AAACJ,IAAYG,IAAI,CAACE,EAAE;QAC5D,MAAMiH,WAAW,AAACtH,IAAYG,IAAI,CAACoH,IAAI;QAEvC,8CAA8C;QAC9C,IAAID,aAAa,eAAe;YAC9B,OAAOrH,IAAIO,MAAM,CAAC,KAAKe,IAAI,CAAC;gBAAE8D,OAAO;YAAwC;QAC/E;QAEA,MAAMmC,UAAU,MAAMC,4BAAa,CAAC7H,qBAAqB,CAACM;QAE1D,MAAMwH,eAAeF,QAAQR,MAAM,CAACW,CAAAA,IAAKA,EAAEC,OAAO,EAAEtG,MAAM;QAC1D,MAAMuG,cAAcL,QAAQR,MAAM,CAACW,CAAAA,IAAK,CAACA,EAAEC,OAAO,EAAEtG,MAAM;QAE1DrB,IAAIsB,IAAI,CAAC;YACPqG,SAAS;YACTE,SAAS,CAAC,UAAU,EAAEJ,aAAa,uBAAuB,EAAEG,YAAY,OAAO,CAAC;YAChFE,MAAM;gBACJC,WAAWN;gBACX7F,QAAQgG;gBACRL;YACF;QACF;IACF,EAAE,OAAOnC,OAAO;QACdC,QAAQD,KAAK,CAAC,qCAAqCA;QACnDpF,IAAIO,MAAM,CAAC,KAAKe,IAAI,CAAC;YACnB8D,OAAO;YACP4C,SAAS5C,iBAAiB6C,QAAQ7C,MAAMyC,OAAO,GAAG;QACpD;IACF;AACF;AAGO,MAAMpI,mBAAmB,OAAOM,KAAcC;IACnD,IAAI;QACF,MAAMC,SAAS,AAACF,IAAYG,IAAI,CAACC,GAAG,IAAI,AAACJ,IAAYG,IAAI,CAACE,EAAE;QAC5D,MAAM,EAAEC,OAAO,CAAC,EAAEC,QAAQ,EAAE,EAAE,GAAGP,IAAIW,KAAK;QAE1C,MAAMwH,UAAU,MAAMV,4BAAa,CAAC/H,gBAAgB,CAClDQ,QACAW,OAAOP,OACPO,OAAON;QAGTN,IAAIsB,IAAI,CAAC;YACPqG,SAAS;YACTG,MAAMI;QACR;IACF,EAAE,OAAO9C,OAAO;QACdC,QAAQD,KAAK,CAAC,kCAAkCA;QAChDpF,IAAIO,MAAM,CAAC,KAAKe,IAAI,CAAC;YACnB8D,OAAO;YACP4C,SAAS5C,iBAAiB6C,QAAQ7C,MAAMyC,OAAO,GAAG;QACpD;IACF;AACF;AAGO,MAAMjI,uBAAuB,OAAOG,KAAcC;IACvD,IAAI;QACF,MAAM,EAAE0C,SAAS,EAAE,GAAG3C,IAAImH,MAAM;QAChC,MAAMG,WAAW,AAACtH,IAAYG,IAAI,CAACoH,IAAI;QAEvC,2CAA2C;QAC3C,IAAID,aAAa,SAAS;YACxB,OAAOrH,IAAIO,MAAM,CAAC,KAAKe,IAAI,CAAC;gBAAE8D,OAAO;YAA2C;QAClF;QAEA,MAAM+C,SAAS,MAAMX,4BAAa,CAACY,oBAAoB,CAAC1F;QAExD1C,IAAIsB,IAAI,CAAC;YACPqG,SAAS;YACTE,SAAS;YACTC,MAAMK;QACR;IACF,EAAE,OAAO/C,OAAO;QACdC,QAAQD,KAAK,CAAC,4BAA4BA;QAC1CpF,IAAIO,MAAM,CAAC,KAAKe,IAAI,CAAC;YACnB8D,OAAO;YACP4C,SAAS5C,iBAAiB6C,QAAQ7C,MAAMyC,OAAO,GAAG;QACpD;IACF;AACF"}