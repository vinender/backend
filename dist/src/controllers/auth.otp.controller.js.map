{"version":3,"sources":["../../../src/controllers/auth.otp.controller.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport { PrismaClient } from '@prisma/client';\nimport { asyncHandler } from '../utils/asyncHandler';\nimport { AppError } from '../utils/AppError';\nimport { otpService } from '../services/otp.service';\nimport { JWT_SECRET, JWT_EXPIRES_IN } from '../config/constants';\n\nconst prisma = new PrismaClient();\n\n// Generate JWT token\nconst generateToken = (userId: string) => {\n  return jwt.sign({ id: userId }, JWT_SECRET, {\n    expiresIn: JWT_EXPIRES_IN,\n  });\n};\n\n// Register new user with OTP\nexport const registerWithOtp = asyncHandler(async (req: Request, res: Response) => {\n  const { name, email, password, role = 'DOG_OWNER', phone } = req.body;\n\n  // Validate input\n  if (!name || !email || !password) {\n    throw new AppError('Missing required fields', 400);\n  }\n\n  // Validate email format\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(email)) {\n    throw new AppError('Invalid email format', 400);\n  }\n\n  // Validate password strength\n  if (password.length < 8) {\n    throw new AppError('Password must be at least 8 characters long', 400);\n  }\n\n  // Check if user already exists\n  const existingUser = await prisma.user.findFirst({\n    where: {\n      email,\n      role,\n    },\n  });\n\n  if (existingUser) {\n    if (existingUser.emailVerified) {\n      throw new AppError('User already exists with this email', 409);\n    }\n    // If user exists but not verified, allow them to re-register (update their data)\n  }\n\n  // Hash password\n  const hashedPassword = await bcrypt.hash(password, 10);\n\n  // Create or update user (but not verified yet)\n  const user = await prisma.user.upsert({\n    where: {\n      email_role: {\n        email,\n        role,\n      },\n    },\n    update: {\n      name,\n      password: hashedPassword,\n      phone,\n      emailVerified: null, // Reset verification\n    },\n    create: {\n      name,\n      email,\n      password: hashedPassword,\n      role,\n      phone,\n      emailVerified: null,\n    },\n  });\n\n  // Send OTP\n  try {\n    await otpService.sendOtp(email, 'SIGNUP', name);\n  } catch (error) {\n    // Delete user if OTP sending fails (only if newly created)\n    if (!existingUser) {\n      await prisma.user.delete({\n        where: { id: user.id },\n      });\n    }\n    throw new AppError('Failed to send verification email. Please try again.', 500);\n  }\n\n  res.status(201).json({\n    success: true,\n    message: 'Registration successful. Please check your email for the verification code.',\n    data: {\n      email,\n      role,\n    },\n  });\n});\n\n// Verify OTP and complete registration\nexport const verifySignupOtp = asyncHandler(async (req: Request, res: Response) => {\n  const { email, otp, role = 'DOG_OWNER' } = req.body;\n\n  if (!email || !otp) {\n    throw new AppError('Email and OTP are required', 400);\n  }\n\n  // Verify OTP\n  const isValid = await otpService.verifyOtp(email, otp, 'SIGNUP');\n  \n  if (!isValid) {\n    throw new AppError('Invalid or expired OTP', 400);\n  }\n\n  // Update user as verified\n  const user = await prisma.user.update({\n    where: {\n      email_role: {\n        email,\n        role,\n      },\n    },\n    data: {\n      emailVerified: new Date(),\n    },\n  });\n\n  // Generate token\n  const token = generateToken(user.id);\n\n  res.json({\n    success: true,\n    message: 'Email verified successfully',\n    data: {\n      user: {\n        id: user.id,\n        name: user.name,\n        email: user.email,\n        role: user.role,\n        phone: user.phone,\n      },\n      token,\n    },\n  });\n});\n\n// Resend OTP\nexport const resendOtp = asyncHandler(async (req: Request, res: Response) => {\n  const { email, type = 'SIGNUP' } = req.body;\n\n  if (!email) {\n    throw new AppError('Email is required', 400);\n  }\n\n  // Get user name for email\n  const user = await prisma.user.findFirst({\n    where: { email },\n  });\n\n  try {\n    await otpService.resendOtp(\n      email, \n      type as 'SIGNUP' | 'RESET_PASSWORD' | 'EMAIL_VERIFICATION',\n      user?.name || undefined\n    );\n  } catch (error: any) {\n    throw new AppError(error.message || 'Failed to resend OTP', 400);\n  }\n\n  res.json({\n    success: true,\n    message: 'OTP sent successfully',\n  });\n});\n\n// Request password reset OTP\nexport const requestPasswordReset = asyncHandler(async (req: Request, res: Response) => {\n  const { email } = req.body;\n\n  if (!email) {\n    throw new AppError('Email is required', 400);\n  }\n\n  // Check if user exists\n  const user = await prisma.user.findFirst({\n    where: { email },\n  });\n\n  if (!user) {\n    // Don't reveal if user exists or not\n    res.json({\n      success: true,\n      message: 'If an account exists with this email, you will receive a password reset code.',\n    });\n    return;\n  }\n\n  // Send OTP\n  try {\n    await otpService.sendOtp(email, 'RESET_PASSWORD', user.name || undefined);\n  } catch (error) {\n    throw new AppError('Failed to send reset email. Please try again.', 500);\n  }\n\n  res.json({\n    success: true,\n    message: 'If an account exists with this email, you will receive a password reset code.',\n  });\n});\n\n// Verify password reset OTP (without marking as used)\nexport const verifyPasswordResetOtp = asyncHandler(async (req: Request, res: Response) => {\n  const { email, otp } = req.body;\n\n  if (!email || !otp) {\n    throw new AppError('Email and OTP are required', 400);\n  }\n\n  // Check OTP validity without marking as verified\n  const isValid = await otpService.checkOtpValidity(email, otp, 'RESET_PASSWORD');\n  \n  if (!isValid) {\n    throw new AppError('Invalid or expired OTP', 400);\n  }\n\n  res.json({\n    success: true,\n    message: 'OTP verified successfully. You can now reset your password.',\n    data: {\n      email,\n      otpVerified: true,\n    },\n  });\n});\n\n// Reset password after OTP verification\nexport const resetPasswordWithOtp = asyncHandler(async (req: Request, res: Response) => {\n  const { email, otp, newPassword } = req.body;\n\n  if (!email || !otp || !newPassword) {\n    throw new AppError('Email, OTP, and new password are required', 400);\n  }\n\n  // Validate password strength\n  if (newPassword.length < 8) {\n    throw new AppError('Password must be at least 8 characters long', 400);\n  }\n\n  // Verify OTP again for security\n  const isValid = await otpService.verifyOtp(email, otp, 'RESET_PASSWORD');\n  \n  if (!isValid) {\n    throw new AppError('Invalid or expired OTP', 400);\n  }\n\n  // Hash new password\n  const hashedPassword = await bcrypt.hash(newPassword, 10);\n\n  // Update user password\n  await prisma.user.updateMany({\n    where: { email },\n    data: {\n      password: hashedPassword,\n    },\n  });\n\n  res.json({\n    success: true,\n    message: 'Password reset successfully',\n  });\n});\n\n// Login with email verification check\nexport const loginWithOtpCheck = asyncHandler(async (req: Request, res: Response) => {\n  const { email, password, role = 'DOG_OWNER' } = req.body;\n\n  if (!email || !password) {\n    throw new AppError('Email and password are required', 400);\n  }\n\n  // Find user\n  const user = await prisma.user.findFirst({\n    where: {\n      email,\n      role,\n    },\n  });\n\n  if (!user) {\n    throw new AppError('Invalid credentials', 401);\n  }\n\n  // Check if email is verified\n  if (!user.emailVerified) {\n    // Send new OTP\n    await otpService.sendOtp(email, 'EMAIL_VERIFICATION', user.name || undefined);\n    \n    res.status(403).json({\n      success: false,\n      message: 'Email not verified. We have sent you a verification code.',\n      data: {\n        requiresVerification: true,\n        email,\n        role,\n      },\n    });\n    return;\n  }\n\n  // Verify password\n  const isPasswordValid = await bcrypt.compare(password, user.password || '');\n  \n  if (!isPasswordValid) {\n    throw new AppError('Invalid credentials', 401);\n  }\n\n  // Generate token\n  const token = generateToken(user.id);\n\n  res.json({\n    success: true,\n    message: 'Login successful',\n    data: {\n      user: {\n        id: user.id,\n        name: user.name,\n        email: user.email,\n        role: user.role,\n        phone: user.phone,\n        image: user.image,\n      },\n      token,\n    },\n  });\n});"],"names":["loginWithOtpCheck","registerWithOtp","requestPasswordReset","resendOtp","resetPasswordWithOtp","verifyPasswordResetOtp","verifySignupOtp","prisma","PrismaClient","generateToken","userId","jwt","sign","id","JWT_SECRET","expiresIn","JWT_EXPIRES_IN","asyncHandler","req","res","name","email","password","role","phone","body","AppError","emailRegex","test","length","existingUser","user","findFirst","where","emailVerified","hashedPassword","bcrypt","hash","upsert","email_role","update","create","otpService","sendOtp","error","delete","status","json","success","message","data","otp","isValid","verifyOtp","Date","token","type","undefined","checkOtpValidity","otpVerified","newPassword","updateMany","requiresVerification","isPasswordValid","compare","image"],"mappings":"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"}