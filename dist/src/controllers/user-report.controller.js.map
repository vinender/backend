{"version":3,"sources":["../../../src/controllers/user-report.controller.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport prisma from '../config/database';\n\n// Extend Request type to include user\ninterface AuthRequest extends Request {\n  user?: {\n    _id: string;\n    id: string;\n    userId?: string;\n    role: string;\n    email: string;\n    name: string;\n  };\n}\n\nexport const userReportController = {\n  async createReport(req: AuthRequest, res: Response) {\n    try {\n      const reporterId = req.user?.id;\n      const { reportedUserId, reportOption, reason } = req.body;\n\n      if (!reporterId) {\n        return res.status(401).json({\n          success: false,\n          message: 'Unauthorized'\n        });\n      }\n\n      if (!reportedUserId || !reportOption) {\n        return res.status(400).json({\n          success: false,\n          message: 'Missing required fields'\n        });\n      }\n\n      const reporter = await prisma.user.findUnique({\n        where: { id: reporterId }\n      });\n\n      if (!reporter) {\n        return res.status(404).json({\n          success: false,\n          message: 'Reporter not found'\n        });\n      }\n\n      const reportedUser = await prisma.user.findUnique({\n        where: { id: reportedUserId }\n      });\n\n      if (!reportedUser) {\n        return res.status(404).json({\n          success: false,\n          message: 'Reported user not found'\n        });\n      }\n\n      // Both field owners and dog owners can report each other\n      if (reporterId === reportedUserId) {\n        return res.status(400).json({\n          success: false,\n          message: 'You cannot report yourself'\n        });\n      }\n\n      const existingReport = await prisma.userReport.findFirst({\n        where: {\n          reporterId,\n          reportedUserId,\n          status: 'pending'\n        }\n      });\n\n      if (existingReport) {\n        return res.status(400).json({\n          success: false,\n          message: 'You have already reported this user'\n        });\n      }\n\n      const report = await prisma.userReport.create({\n        data: {\n          reporterId,\n          reportedUserId,\n          reportOption,\n          reason\n        }\n      });\n\n      await prisma.user.update({\n        where: { id: reportedUserId },\n        data: { isReported: true }\n      });\n\n      res.status(201).json({\n        success: true,\n        message: 'Report submitted successfully',\n        data: report\n      });\n    } catch (error) {\n      console.error('Create report error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to submit report'\n      });\n    }\n  },\n\n  async getReports(req: AuthRequest, res: Response) {\n    try {\n      const { status, reporterId, reportedUserId } = req.query;\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 10;\n      const skip = (page - 1) * limit;\n\n      const where: any = {};\n      if (status) where.status = status;\n      if (reporterId) where.reporterId = reporterId;\n      if (reportedUserId) where.reportedUserId = reportedUserId;\n\n      const [reports, total] = await Promise.all([\n        prisma.userReport.findMany({\n          where,\n          include: {\n            reporter: {\n              select: {\n                id: true,\n                name: true,\n                email: true,\n                image: true\n              }\n            },\n            reportedUser: {\n              select: {\n                id: true,\n                name: true,\n                email: true,\n                image: true,\n                phone: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: 'desc'\n          },\n          skip,\n          take: limit\n        }),\n        prisma.userReport.count({ where })\n      ]);\n\n      res.json({\n        success: true,\n        data: reports,\n        pagination: {\n          total,\n          page,\n          limit,\n          totalPages: Math.ceil(total / limit)\n        }\n      });\n    } catch (error) {\n      console.error('Get reports error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to fetch reports'\n      });\n    }\n  },\n\n  async getReportDetails(req: AuthRequest, res: Response) {\n    try {\n      const { reportId } = req.params;\n\n      const report = await prisma.userReport.findUnique({\n        where: { id: reportId },\n        include: {\n          reporter: {\n            select: {\n              id: true,\n              name: true,\n              email: true,\n              image: true,\n              role: true\n            }\n          },\n          reportedUser: {\n            select: {\n              id: true,\n              name: true,\n              email: true,\n              image: true,\n              phone: true,\n              role: true,\n              createdAt: true\n            }\n          }\n        }\n      });\n\n      if (!report) {\n        return res.status(404).json({\n          success: false,\n          message: 'Report not found'\n        });\n      }\n\n      res.json({\n        success: true,\n        data: report\n      });\n    } catch (error) {\n      console.error('Get report details error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to fetch report details'\n      });\n    }\n  },\n\n  async updateReportStatus(req: AuthRequest, res: Response) {\n    try {\n      const { reportId } = req.params;\n      const { status, reviewNotes } = req.body;\n      const reviewedBy = req.user?.id;\n\n      const user = await prisma.user.findUnique({\n        where: { id: reviewedBy }\n      });\n\n      if (user?.role !== 'ADMIN') {\n        return res.status(403).json({\n          success: false,\n          message: 'Only admins can update report status'\n        });\n      }\n\n      const report = await prisma.userReport.update({\n        where: { id: reportId },\n        data: {\n          status,\n          reviewNotes,\n          reviewedBy,\n          reviewedAt: new Date()\n        },\n        include: {\n          reporter: true,\n          reportedUser: true\n        }\n      });\n\n      if (status === 'resolved' || status === 'dismissed') {\n        const allPendingReports = await prisma.userReport.count({\n          where: {\n            reportedUserId: report.reportedUserId,\n            status: 'pending'\n          }\n        });\n\n        if (allPendingReports === 0) {\n          await prisma.user.update({\n            where: { id: report.reportedUserId },\n            data: { isReported: false }\n          });\n        }\n      }\n\n      res.json({\n        success: true,\n        message: 'Report status updated successfully',\n        data: report\n      });\n    } catch (error) {\n      console.error('Update report status error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to update report status'\n      });\n    }\n  },\n\n  async getMyReportsMade(req: AuthRequest, res: Response) {\n    try {\n      const reporterId = req.user?.id;\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 10;\n      const skip = (page - 1) * limit;\n\n      if (!reporterId) {\n        return res.status(401).json({\n          success: false,\n          message: 'Unauthorized'\n        });\n      }\n\n      const [reports, total] = await Promise.all([\n        prisma.userReport.findMany({\n          where: { reporterId },\n          include: {\n            reportedUser: {\n              select: {\n                id: true,\n                name: true,\n                email: true,\n                image: true\n              }\n            }\n          },\n          orderBy: {\n            createdAt: 'desc'\n          },\n          skip,\n          take: limit\n        }),\n        prisma.userReport.count({ where: { reporterId } })\n      ]);\n\n      res.json({\n        success: true,\n        data: reports,\n        pagination: {\n          total,\n          page,\n          limit,\n          totalPages: Math.ceil(total / limit)\n        }\n      });\n    } catch (error) {\n      console.error('Get my reports made error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to fetch your reports'\n      });\n    }\n  }\n};"],"names":["userReportController","createReport","req","res","reporterId","user","id","reportedUserId","reportOption","reason","body","status","json","success","message","reporter","prisma","findUnique","where","reportedUser","existingReport","userReport","findFirst","report","create","data","update","isReported","error","console","getReports","query","page","parseInt","limit","skip","reports","total","Promise","all","findMany","include","select","name","email","image","phone","orderBy","createdAt","take","count","pagination","totalPages","Math","ceil","getReportDetails","reportId","params","role","updateReportStatus","reviewNotes","reviewedBy","reviewedAt","Date","allPendingReports","getMyReportsMade"],"mappings":"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"}