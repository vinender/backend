{"version":3,"sources":["../../../src/controllers/favorite.controller.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { PrismaClient } from '@prisma/client';\nimport { asyncHandler } from '../utils/asyncHandler';\nimport { AppError } from '../utils/AppError';\n\nconst prisma = new PrismaClient();\n\nclass FavoriteController {\n  // Toggle favorite (save/unsave field)\n  toggleFavorite = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const { fieldId } = req.params;\n    const userId = (req as any).user.id;\n\n    // Check if field exists\n    const field = await prisma.field.findUnique({\n      where: { id: fieldId }\n    });\n\n    if (!field) {\n      throw new AppError('Field not found', 404);\n    }\n\n    // Check if already favorited\n    const existingFavorite = await prisma.favorite.findUnique({\n      where: {\n        userId_fieldId: {\n          userId,\n          fieldId\n        }\n      }\n    });\n\n    if (existingFavorite) {\n      // Remove from favorites\n      await prisma.favorite.delete({\n        where: {\n          id: existingFavorite.id\n        }\n      });\n\n      res.json({\n        success: true,\n        message: 'Field removed from favorites',\n        isFavorited: false\n      });\n    } else {\n      // Add to favorites\n      const favorite = await prisma.favorite.create({\n        data: {\n          userId,\n          fieldId\n        }\n      });\n\n      res.json({\n        success: true,\n        message: 'Field added to favorites',\n        isFavorited: true,\n        data: favorite\n      });\n    }\n  });\n\n  // Get user's saved fields\n  getSavedFields = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const userId = (req as any).user.id;\n    const page = parseInt(req.query.page as string) || 1;\n    const limit = parseInt(req.query.limit as string) || 10;\n    const skip = (page - 1) * limit;\n\n    // First, clean up any orphaned favorites (where field no longer exists)\n    // Get all favorites for the user\n    const allFavorites = await prisma.favorite.findMany({\n      where: { userId },\n      include: {\n        field: true\n      }\n    });\n\n    // Find orphaned favorites (where field is null)\n    const orphanedFavoriteIds = allFavorites\n      .filter(fav => fav.field === null)\n      .map(fav => fav.id);\n\n    // Delete orphaned favorites if any exist\n    if (orphanedFavoriteIds.length > 0) {\n      await prisma.favorite.deleteMany({\n        where: {\n          id: {\n            in: orphanedFavoriteIds\n          }\n        }\n      });\n    }\n\n    // Now get the valid favorites with pagination\n    const favorites = await prisma.favorite.findMany({\n      where: {\n        userId\n      },\n      include: {\n        field: {\n          include: {\n            owner: {\n              select: {\n                id: true,\n                name: true,\n                email: true,\n                image: true\n              }\n            },\n            fieldReviews: {\n              select: {\n                rating: true\n              }\n            },\n            _count: {\n              select: {\n                bookings: true,\n                fieldReviews: true\n              }\n            }\n          }\n        }\n      },\n      skip,\n      take: limit,\n      orderBy: {\n        createdAt: 'desc'\n      }\n    });\n\n    // Additional safety check to filter out any null fields\n    const validFavorites = favorites.filter(fav => fav.field !== null);\n\n    // Calculate average rating for each field\n    const fieldsWithRating = validFavorites.map(fav => {\n      const avgRating = fav.field!.fieldReviews.length > 0\n        ? fav.field!.fieldReviews.reduce((sum, review) => sum + review.rating, 0) / fav.field!.fieldReviews.length\n        : 0;\n\n      return {\n        ...fav.field!,\n        averageRating: avgRating,\n        reviewCount: fav.field!._count.fieldReviews,\n        bookingCount: fav.field!._count.bookings,\n        isFavorited: true\n      };\n    });\n\n    // Get total count only for valid favorites (after cleanup)\n    const total = await prisma.favorite.count({\n      where: { \n        userId\n      }\n    });\n\n    res.json({\n      success: true,\n      data: fieldsWithRating,\n      pagination: {\n        page,\n        limit,\n        total,\n        totalPages: Math.ceil(total / limit)\n      }\n    });\n  });\n\n  // Check if field is favorited by user\n  checkFavorite = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const { fieldId } = req.params;\n    const userId = (req as any).user.id;\n\n    const favorite = await prisma.favorite.findUnique({\n      where: {\n        userId_fieldId: {\n          userId,\n          fieldId\n        }\n      }\n    });\n\n    res.json({\n      success: true,\n      isFavorited: !!favorite\n    });\n  });\n\n  // Remove from favorites\n  removeFavorite = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const { fieldId } = req.params;\n    const userId = (req as any).user.id;\n\n    const favorite = await prisma.favorite.findUnique({\n      where: {\n        userId_fieldId: {\n          userId,\n          fieldId\n        }\n      }\n    });\n\n    if (!favorite) {\n      throw new AppError('Field not in favorites', 404);\n    }\n\n    await prisma.favorite.delete({\n      where: {\n        id: favorite.id\n      }\n    });\n\n    res.json({\n      success: true,\n      message: 'Field removed from favorites'\n    });\n  });\n}\n\nexport default new FavoriteController();"],"names":["prisma","PrismaClient","FavoriteController","toggleFavorite","asyncHandler","req","res","next","fieldId","params","userId","user","id","field","findUnique","where","AppError","existingFavorite","favorite","userId_fieldId","delete","json","success","message","isFavorited","create","data","getSavedFields","page","parseInt","query","limit","skip","allFavorites","findMany","include","orphanedFavoriteIds","filter","fav","map","length","deleteMany","in","favorites","owner","select","name","email","image","fieldReviews","rating","_count","bookings","take","orderBy","createdAt","validFavorites","fieldsWithRating","avgRating","reduce","sum","review","averageRating","reviewCount","bookingCount","total","count","pagination","totalPages","Math","ceil","checkFavorite","removeFavorite"],"mappings":"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"}