{"version":3,"sources":["../../src/app.ts"],"sourcesContent":["import express from \"express\"\nimport cors from \"cors\"\nimport helmet from \"helmet\"\nimport morgan from \"morgan\"\nimport compression from \"compression\"\nimport cookieParser from \"cookie-parser\"\nimport dotenv from \"dotenv\"\nimport { PrismaClient } from \"@prisma/client\"\n\n// Import API documentation\nimport { apiDocumentation } from \"./utils/api-documentation\"\nimport { generateApiDocsHTML } from \"./utils/api-docs-template\"\n\n// Import routes\nimport authRoutes from \"./routes/auth.routes\"\nimport userRoutes from \"./routes/user.routes\"\nimport fieldRoutes from \"./routes/field.routes\"\nimport bookingRoutes from \"./routes/booking.routes\"\nimport earningsRoutes from \"./routes/earnings.routes\"\nimport stripeConnectRoutes from \"./routes/stripe-connect.routes\"\nimport payoutRoutes from \"./routes/payout.routes\"\nimport commissionRoutes from \"./routes/commission.routes\"\nimport adminRoutes from \"./routes/admin.routes\"\nimport chatRoutes from \"./routes/chat.routes\"\n// Load environment variables\n\ndotenv.config();\n\n// Initialize Express app\nconst app = express()\nconst PORT = process.env.PORT || 5000\n\n// Initialize Prisma\nexport const prisma = new PrismaClient()\n\n// Middleware\napp.set('trust proxy', 1); \napp.use(helmet())\napp.use(cors({\n  origin: function(origin, callback) {\n    // Allow requests with no origin (mobile apps, Postman, etc.)\n    if (!origin) return callback(null, true);\n    \n    // List of allowed origins\n    const allowedOrigins = [\n      process.env.FRONTEND_URL || \"http://localhost:3000\", // Frontend development\n      \"http://localhost:3001\", // Frontend alternate port\n      \"http://localhost:3002\", // Frontend alternate port\n      \"http://localhost:3003\", // Admin dashboard development\n      \"http://localhost:8081\", // Expo web\n      \"http://localhost:19006\", // Expo web alternate port\n      \"exp://localhost:8081\", // Expo development\n      \"https://fieldsy.indiitserver.in\", // Production frontend\n      \"https://fieldsy-admin.indiitserver.in\", // Production admin\n      \"https://fieldsy-api.indiitserver.in\", // Production API (for self-referential calls)\n      \"http://fieldsy.indiitserver.in\", // Allow HTTP as fallback\n      \"http://fieldsy-admin.indiitserver.in\", // Allow HTTP as fallback\n      \"http://fieldsy-api.indiitserver.in\", // Allow HTTP API as fallback\n    ];\n    \n    // Check if the origin is in the allowed list or is a local development URL\n    if (allowedOrigins.includes(origin) || \n        origin.includes('localhost') || \n        origin.includes('127.0.0.1') ||\n        origin.includes('192.168.') || // Local network IPs for physical devices\n        origin.includes('10.0.') // Local network IPs\n    ) {\n      callback(null, true);\n    } else {\n      callback(new Error('Not allowed by CORS'));\n    }\n  },\n  credentials: true,\n}))\n\napp.use(compression())\napp.use(morgan(\"dev\"))\napp.use(express.json())\napp.use(express.urlencoded({ extended: true }))\napp.use(cookieParser())\n\n// API Documentation - Root route for production\napp.get(\"/\", (req, res) => {\n  const acceptHeader = req.headers.accept || '';\n  \n  if (acceptHeader.includes('text/html')) {\n    // Serve HTML documentation for browsers\n    res.setHeader('Content-Type', 'text/html');\n    res.send(generateApiDocsHTML(apiDocumentation));\n  } else {\n    // Serve JSON for API clients\n    res.json({\n      success: true,\n      message: 'Fieldsy API',\n      version: '1.0.0',\n      documentation: 'Visit this URL in a browser for interactive documentation',\n      endpoints: {\n        auth: '/api/auth',\n        users: '/api/users', \n        fields: '/api/fields',\n        bookings: '/api/bookings',\n        reviews: '/api/reviews',\n        notifications: '/api/notifications',\n        payments: '/api/payments',\n        chat: '/api/chat',\n      },\n    });\n  }\n});\n\n// API Documentation - Also available at /api \napp.get(\"/api\", (req, res) => {\n  const acceptHeader = req.headers.accept || '';\n  \n  if (acceptHeader.includes('text/html')) {\n    // Serve HTML documentation for browsers\n    res.setHeader('Content-Type', 'text/html');\n    res.send(generateApiDocsHTML(apiDocumentation));\n  } else {\n    // Serve JSON for API clients\n    res.json({\n      success: true,\n      message: 'Fieldsy API',\n      version: '1.0.0',\n      documentation: 'Visit this URL in a browser for interactive documentation',\n      endpoints: {\n        auth: '/api/auth',\n        users: '/api/users',\n        fields: '/api/fields',\n        bookings: '/api/bookings',\n        reviews: '/api/reviews',\n        notifications: '/api/notifications',\n        payments: '/api/payments',\n        chat: '/api/chat',\n      },\n    });\n  }\n});\n\n// Routes\napp.use(\"/api/auth\", authRoutes)\napp.use(\"/api/users\", userRoutes)\napp.use(\"/api/fields\", fieldRoutes)\napp.use(\"/api/bookings\", bookingRoutes)\napp.use(\"/api/earnings\", earningsRoutes)\napp.use(\"/api/stripe-connect\", stripeConnectRoutes)\napp.use(\"/api/payouts\", payoutRoutes)\napp.use(\"/api/commission\", commissionRoutes)\napp.use('/api/admin', adminRoutes)\napp.use('/api/chat', chatRoutes)\n\n// Health check endpoint\napp.get(\"/health\", (req, res) => {\n  res.status(200).json({ status: \"ok\", timestamp: new Date().toISOString() })\n})\n\n// Error handling middleware\napp.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {\n  console.error(err.stack)\n  res.status(err.status || 500).json({\n    message: err.message || \"Internal Server Error\",\n    ...(process.env.NODE_ENV === \"development\" && { stack: err.stack }),\n  })\n})\n\n// 404 handler\napp.use((req, res) => {\n  res.status(404).json({ message: \"Route not found\" })\n})\n\n// Start server\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`)\n})\n\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", async () => {\n  console.log(\"SIGTERM signal received: closing HTTP server\")\n  await prisma.$disconnect();\n  process.exit(0);\n})\n\n"],"names":["prisma","dotenv","config","app","express","PORT","process","env","PrismaClient","set","use","helmet","cors","origin","callback","allowedOrigins","FRONTEND_URL","includes","Error","credentials","compression","morgan","json","urlencoded","extended","cookieParser","get","req","res","acceptHeader","headers","accept","setHeader","send","generateApiDocsHTML","apiDocumentation","success","message","version","documentation","endpoints","auth","users","fields","bookings","reviews","notifications","payments","chat","authRoutes","userRoutes","fieldRoutes","bookingRoutes","earningsRoutes","stripeConnectRoutes","payoutRoutes","commissionRoutes","adminRoutes","chatRoutes","status","timestamp","Date","toISOString","err","next","console","error","stack","NODE_ENV","listen","log","on","$disconnect","exit"],"mappings":"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"}