{"version":3,"sources":["../../../src/jobs/payout-processor.job.ts"],"sourcesContent":["import cron from 'node-cron';\nimport { automaticPayoutService } from '../services/auto-payout.service';\nimport { createNotification } from '../controllers/notification.controller';\nimport prisma from '../config/database';\n\nexport class PayoutProcessorJob {\n  private cronJob: cron.ScheduledTask | null = null;\n\n  /**\n   * Initialize the payout processor job\n   * Runs every hour to check for eligible payouts\n   */\n  start() {\n    // Run every hour at minute 0\n    this.cronJob = cron.schedule('0 * * * *', async () => {\n      console.log('üè¶ Starting automatic payout processing job...');\n      \n      try {\n        const startTime = Date.now();\n        const results = await automaticPayoutService.processEligiblePayouts();\n        const duration = ((Date.now() - startTime) / 1000).toFixed(2);\n        \n        console.log(`‚úÖ Payout processing completed in ${duration}s`);\n        console.log(`   Processed: ${results.processed}`);\n        console.log(`   Skipped: ${results.skipped}`);\n        console.log(`   Failed: ${results.failed}`);\n        \n        // If there were any failures, notify admins\n        if (results.failed > 0) {\n          const adminUsers = await prisma.user.findMany({\n            where: { role: 'ADMIN' }\n          });\n          \n          for (const admin of adminUsers) {\n            await createNotification({\n              userId: admin.id,\n              type: 'PAYOUT_JOB_ALERT',\n              title: 'Payout Processing Alert',\n              message: `Payout job completed with ${results.failed} failures. Please check the logs.`,\n              data: {\n                processed: results.processed,\n                skipped: results.skipped,\n                failed: results.failed,\n                failedBookings: results.details.filter(d => d.status === 'failed')\n              }\n            });\n          }\n        }\n        \n        // Log successful payouts for audit\n        if (results.processed > 0) {\n          console.log('üìä Successful payouts:', \n            results.details\n              .filter(d => d.status === 'processed')\n              .map(d => `Booking ${d.bookingId}: ¬£${d.amount}`)\n              .join(', ')\n          );\n        }\n        \n      } catch (error) {\n        console.error('‚ùå Error in payout processing job:', error);\n        \n        // Notify admins about job failure\n        try {\n          const adminUsers = await prisma.user.findMany({\n            where: { role: 'ADMIN' }\n          });\n          \n          for (const admin of adminUsers) {\n            await createNotification({\n              userId: admin.id,\n              type: 'PAYOUT_JOB_ERROR',\n              title: 'Payout Processing Job Failed',\n              message: `The automatic payout processing job encountered an error: ${(error as any).message}`,\n              data: {\n                error: (error as any).message,\n                timestamp: new Date()\n              }\n            });\n          }\n        } catch (notifyError) {\n          console.error('Failed to notify admins about job error:', notifyError);\n        }\n      }\n    });\n\n    console.log('‚úÖ Payout processor job initialized (runs every hour)');\n    \n    // Also set up a daily summary job at 9 AM\n    this.setupDailySummaryJob();\n  }\n\n  /**\n   * Set up a daily summary job that runs at 9 AM\n   */\n  private setupDailySummaryJob() {\n    cron.schedule('0 9 * * *', async () => {\n      console.log('üìä Generating daily payout summary...');\n      \n      try {\n        // Get yesterday's date range\n        const yesterday = new Date();\n        yesterday.setDate(yesterday.getDate() - 1);\n        yesterday.setHours(0, 0, 0, 0);\n        \n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        \n        // Get all payouts from yesterday\n        const yesterdaysPayouts = await prisma.payout.findMany({\n          where: {\n            createdAt: {\n              gte: yesterday,\n              lt: today\n            }\n          },\n          include: {\n            stripeAccount: {\n              include: {\n                user: true\n              }\n            }\n          }\n        });\n        \n        // Calculate totals\n        const totalPayouts = yesterdaysPayouts.length;\n        const totalAmount = yesterdaysPayouts.reduce((sum, p) => sum + p.amount, 0);\n        \n        // Group by field owner\n        const payoutsByOwner = yesterdaysPayouts.reduce((acc, payout) => {\n          const ownerId = payout.stripeAccount.userId;\n          if (!acc[ownerId]) {\n            acc[ownerId] = {\n              ownerName: payout.stripeAccount.user.name || payout.stripeAccount.user.email,\n              count: 0,\n              total: 0\n            };\n          }\n          acc[ownerId].count++;\n          acc[ownerId].total += payout.amount;\n          return acc;\n        }, {} as Record<string, any>);\n        \n        // Notify admins with daily summary\n        const adminUsers = await prisma.user.findMany({\n          where: { role: 'ADMIN' }\n        });\n        \n        const summaryMessage = `\nDaily Payout Summary for ${yesterday.toLocaleDateString()}:\n- Total Payouts: ${totalPayouts}\n- Total Amount: ¬£${totalAmount.toFixed(2)}\n- Field Owners Paid: ${Object.keys(payoutsByOwner).length}\n\nTop Recipients:\n${Object.entries(payoutsByOwner)\n  .sort((a, b) => b[1].total - a[1].total)\n  .slice(0, 5)\n  .map(([_, data]) => `- ${data.ownerName}: ¬£${data.total.toFixed(2)} (${data.count} payouts)`)\n  .join('\\n')}\n        `.trim();\n        \n        for (const admin of adminUsers) {\n          await createNotification({\n            userId: admin.id,\n            type: 'PAYOUT_DAILY_SUMMARY',\n            title: 'üìä Daily Payout Summary',\n            message: summaryMessage,\n            data: {\n              date: yesterday.toISOString(),\n              totalPayouts,\n              totalAmount,\n              payoutsByOwner\n            }\n          });\n        }\n        \n        console.log('‚úÖ Daily payout summary sent to admins');\n        \n      } catch (error) {\n        console.error('Error generating daily payout summary:', error);\n      }\n    });\n    \n    console.log('‚úÖ Daily payout summary job initialized (runs at 9 AM)');\n  }\n\n  /**\n   * Stop the cron job\n   */\n  stop() {\n    if (this.cronJob) {\n      this.cronJob.stop();\n      console.log('‚èπÔ∏è Payout processor job stopped');\n    }\n  }\n\n  /**\n   * Manually trigger payout processing (for testing or admin use)\n   */\n  async triggerManually() {\n    console.log('üîÑ Manually triggering payout processing...');\n    return await automaticPayoutService.processEligiblePayouts();\n  }\n}\n\nexport const payoutProcessorJob = new PayoutProcessorJob();"],"names":["PayoutProcessorJob","payoutProcessorJob","cronJob","start","cron","schedule","console","log","startTime","Date","now","results","automaticPayoutService","processEligiblePayouts","duration","toFixed","processed","skipped","failed","adminUsers","prisma","user","findMany","where","role","admin","createNotification","userId","id","type","title","message","data","failedBookings","details","filter","d","status","map","bookingId","amount","join","error","timestamp","notifyError","setupDailySummaryJob","yesterday","setDate","getDate","setHours","today","yesterdaysPayouts","payout","createdAt","gte","lt","include","stripeAccount","totalPayouts","length","totalAmount","reduce","sum","p","payoutsByOwner","acc","ownerId","ownerName","name","email","count","total","summaryMessage","toLocaleDateString","Object","keys","entries","sort","a","b","slice","_","trim","date","toISOString","stop","triggerManually"],"mappings":"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"}