{"version":3,"sources":["../../../src/jobs/payout.job.ts"],"sourcesContent":["import cron from 'node-cron';\nimport refundService from '../services/refund.service';\nimport prisma from '../config/database';\nimport { createNotification } from '../controllers/notification.controller';\nimport { automaticPayoutService } from '../services/auto-payout.service';\n\n/**\n * Scheduled job to process payouts for completed bookings\n * Runs every hour to check for bookings that have passed their cancellation period\n */\nexport const initPayoutJobs = () => {\n  // Run every 30 minutes to mark past bookings as completed\n  cron.schedule('*/30 * * * *', async () => {\n    console.log('📋 Marking past bookings as completed...');\n    \n    try {\n      const now = new Date();\n      \n      // Find all bookings that are past their date/time and not already completed or cancelled\n      const completedBookings = await prisma.booking.updateMany({\n        where: {\n          status: 'CONFIRMED',\n          paymentStatus: 'PAID',\n          date: {\n            lt: now,\n          },\n        },\n        data: {\n          status: 'COMPLETED',\n        },\n      });\n      \n      console.log(`✅ Marked ${completedBookings.count} bookings as completed`);\n      \n      // Now trigger payouts for newly completed bookings\n      if (completedBookings.count > 0) {\n        // Get the bookings that were just marked as completed\n        const newlyCompletedBookings = await prisma.booking.findMany({\n          where: {\n            status: 'COMPLETED',\n            payoutStatus: null,\n            paymentStatus: 'PAID',\n            updatedAt: {\n              gte: new Date(Date.now() - 5 * 60 * 1000) // Updated in last 5 minutes\n            }\n          }\n        });\n        \n        // Import payout service\n        const { payoutService } = await import('../services/payout.service');\n        \n        // Process payouts for each booking\n        for (const booking of newlyCompletedBookings) {\n          try {\n            await payoutService.processBookingPayout(booking.id);\n            console.log(`💰 Payout processed for booking ${booking.id}`);\n          } catch (error) {\n            console.error(`Failed to process payout for booking ${booking.id}:`, error);\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error marking bookings as completed:', error);\n    }\n  });\n  \n  // Run every hour at minute 0\n  cron.schedule('0 * * * *', async () => {\n    console.log('🏦 Running scheduled automatic payout job...');\n    \n    try {\n      // Process automatic payouts for bookings past cancellation window\n      const results = await automaticPayoutService.processEligiblePayouts();\n      \n      console.log(`✅ Automatic payouts processed:`);\n      console.log(`   - Processed: ${results.processed}`);\n      console.log(`   - Skipped: ${results.skipped}`);\n      console.log(`   - Failed: ${results.failed}`);\n      \n      // Process payouts for completed bookings past cancellation period (legacy)\n      await refundService.processCompletedBookingPayouts();\n      \n      // Also check for any failed payouts to retry\n      await retryFailedPayouts();\n      \n      console.log('✅ Payout job completed successfully');\n    } catch (error) {\n      console.error('❌ Payout job error:', error);\n      \n      // Notify admins of job failure\n      const adminUsers = await prisma.user.findMany({\n        where: { role: 'ADMIN' }\n      });\n      \n      for (const admin of adminUsers) {\n        await createNotification({\n          userId: admin.id,\n          type: 'PAYOUT_JOB_ERROR',\n          title: 'Scheduled Payout Job Failed',\n          message: `The automatic payout job encountered an error: ${(error as any).message}`,\n          data: {\n            error: (error as any).message,\n            timestamp: new Date()\n          }\n        });\n      }\n    }\n  });\n\n  // Run daily at midnight to calculate and update field owner earnings\n  cron.schedule('0 0 * * *', async () => {\n    console.log('Running daily earnings calculation...');\n    \n    try {\n      await calculateFieldOwnerEarnings();\n      console.log('Earnings calculation completed');\n    } catch (error) {\n      console.error('Earnings calculation error:', error);\n    }\n  });\n};\n\n/**\n * Retry failed payouts\n */\nasync function retryFailedPayouts() {\n  try {\n    const failedPayouts = await prisma.payout.findMany({\n      where: {\n        status: 'failed',\n        createdAt: {\n          gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // Only retry payouts from last 24 hours\n        }\n      },\n      include: {\n        stripeAccount: {\n          include: {\n            user: true\n          }\n        }\n      }\n    });\n\n    for (const payout of failedPayouts) {\n      // Check if Stripe account is now ready\n      if (!payout.stripeAccount.payoutsEnabled) {\n        continue; // Skip if account still not ready\n      }\n\n      try {\n        // Attempt to retry the payout\n        const { stripe } = require('../config/stripe.config');\n        \n        const transfer = await stripe.transfers.create({\n          amount: Math.round(payout.amount * 100),\n          currency: payout.currency,\n          destination: payout.stripeAccount.stripeAccountId,\n          description: payout.description || `Retry payout ${payout.id}`,\n          metadata: {\n            payoutId: payout.id,\n            retryAttempt: 'true'\n          }\n        });\n\n        // Update payout status\n        await prisma.payout.update({\n          where: { id: payout.id },\n          data: {\n            status: 'paid',\n            stripePayoutId: transfer.id,\n            arrivalDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000)\n          }\n        });\n\n        // Send success notification\n        await createNotification({\n          userId: payout.stripeAccount.userId,\n          type: 'payout_retry_success',\n          title: 'Payout Processed',\n          message: `Your previously failed payout of $${payout.amount.toFixed(2)} has been successfully processed.`,\n          data: {\n            payoutId: payout.id,\n            amount: payout.amount\n          }\n        });\n\n        console.log(`Successfully retried payout ${payout.id}`);\n      } catch (retryError: any) {\n        console.error(`Failed to retry payout ${payout.id}:`, retryError);\n        \n        // Update failure reason\n        await prisma.payout.update({\n          where: { id: payout.id },\n          data: {\n            failureMessage: retryError.message,\n            failureCode: retryError.code\n          }\n        });\n      }\n    }\n  } catch (error) {\n    console.error('Retry failed payouts error:', error);\n  }\n}\n\n/**\n * Calculate and update field owner earnings\n */\nasync function calculateFieldOwnerEarnings() {\n  try {\n    // Get all field owners\n    const fieldOwners = await prisma.user.findMany({\n      where: {\n        role: 'FIELD_OWNER',\n        stripeAccount: {\n          isNot: null\n        }\n      },\n      include: {\n        stripeAccount: true,\n        ownedFields: {\n          include: {\n            bookings: {\n              where: {\n                OR: [\n                  { status: 'COMPLETED' },\n                  { \n                    status: 'CANCELLED',\n                    cancelledAt: {\n                      not: null\n                    }\n                  }\n                ]\n              },\n              include: {\n                payment: true\n              }\n            }\n          }\n        }\n      }\n    });\n\n    for (const owner of fieldOwners) {\n      let totalEarnings = 0;\n      let pendingEarnings = 0;\n      let availableEarnings = 0;\n      \n      for (const field of owner.ownedFields) {\n        for (const booking of field.bookings) {\n          if (!booking.payment) continue;\n          \n          const bookingAmount = booking.fieldOwnerAmount || (booking.totalPrice * 0.8); // 80% after platform fee\n          \n          if (booking.payoutStatus === 'COMPLETED') {\n            totalEarnings += bookingAmount;\n            availableEarnings += bookingAmount;\n          } else if (booking.payoutStatus === 'PROCESSING' || booking.payoutStatus === 'PENDING') {\n            pendingEarnings += bookingAmount;\n          }\n        }\n      }\n\n      // Get all successful payouts\n      const payouts = await prisma.payout.findMany({\n        where: {\n          stripeAccountId: owner.stripeAccount!.id,\n          status: 'paid'\n        }\n      });\n\n      const totalPayouts = payouts.reduce((sum, payout) => sum + payout.amount, 0);\n      \n      // Update user's earning statistics (you may need to add these fields to User model)\n      // For now, we'll store this in a notification\n      await createNotification({\n        userId: owner.id,\n        type: 'earnings_update',\n        title: 'Earnings Update',\n        message: `Your current earnings: Total: $${totalEarnings.toFixed(2)}, Available: $${availableEarnings.toFixed(2)}, Pending: $${pendingEarnings.toFixed(2)}`,\n        data: {\n          totalEarnings,\n          availableEarnings,\n          pendingEarnings,\n          totalPayouts\n        }\n      });\n    }\n  } catch (error) {\n    console.error('Calculate earnings error:', error);\n  }\n}\n\n/**\n * Process automatic transfers for bookings past cancellation period\n * This ensures field owners receive their share after 24 hours even if no cancellation occurred\n */\nexport async function processAutomaticTransfers() {\n  try {\n    const eligibleBookings = await prisma.booking.findMany({\n      where: {\n        status: 'COMPLETED',\n        payoutStatus: null,\n        date: {\n          lte: new Date(Date.now() - 24 * 60 * 60 * 1000) // 24 hours after booking date\n        }\n      },\n      include: {\n        payment: true,\n        field: {\n          include: {\n            owner: {\n              include: {\n                stripeAccount: true\n              }\n            }\n          }\n        }\n      }\n    });\n\n    for (const booking of eligibleBookings) {\n      if (!booking.payment || booking.payment.status !== 'completed') {\n        continue;\n      }\n\n      try {\n        // Mark as processing to avoid duplicate processing\n        await prisma.booking.update({\n          where: { id: booking.id },\n          data: { payoutStatus: 'PROCESSING' }\n        });\n\n        // Process the payout\n        await refundService.processFieldOwnerPayout(booking, 0);\n        \n        console.log(`Processed automatic transfer for booking ${booking.id}`);\n      } catch (error) {\n        console.error(`Failed to process transfer for booking ${booking.id}:`, error);\n        \n        // Revert status on error\n        await prisma.booking.update({\n          where: { id: booking.id },\n          data: { payoutStatus: null }\n        });\n      }\n    }\n  } catch (error) {\n    console.error('Process automatic transfers error:', error);\n  }\n}"],"names":["initPayoutJobs","processAutomaticTransfers","cron","schedule","console","log","now","Date","completedBookings","prisma","booking","updateMany","where","status","paymentStatus","date","lt","data","count","newlyCompletedBookings","findMany","payoutStatus","updatedAt","gte","payoutService","processBookingPayout","id","error","results","automaticPayoutService","processEligiblePayouts","processed","skipped","failed","refundService","processCompletedBookingPayouts","retryFailedPayouts","adminUsers","user","role","admin","createNotification","userId","type","title","message","timestamp","calculateFieldOwnerEarnings","failedPayouts","payout","createdAt","include","stripeAccount","payoutsEnabled","stripe","require","transfer","transfers","create","amount","Math","round","currency","destination","stripeAccountId","description","metadata","payoutId","retryAttempt","update","stripePayoutId","arrivalDate","toFixed","retryError","failureMessage","failureCode","code","fieldOwners","isNot","ownedFields","bookings","OR","cancelledAt","not","payment","owner","totalEarnings","pendingEarnings","availableEarnings","field","bookingAmount","fieldOwnerAmount","totalPrice","payouts","totalPayouts","reduce","sum","eligibleBookings","lte","processFieldOwnerPayout"],"mappings":"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"}