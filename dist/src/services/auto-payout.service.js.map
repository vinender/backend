{"version":3,"sources":["../../../src/services/auto-payout.service.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\nimport Stripe from 'stripe';\nimport { createNotification } from '../controllers/notification.controller';\n\nconst prisma = new PrismaClient();\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: '2025-07-30.basil' as any\n});\n\n// Stripe fee structure (2.9% + 30 cents per transaction)\nconst STRIPE_PERCENTAGE_FEE = 0.029;\nconst STRIPE_FIXED_FEE_CENTS = 30;\n\nexport class AutomaticPayoutService {\n  /**\n   * Calculate Stripe fee for a given amount\n   */\n  private calculateStripeFee(amountInCents: number): number {\n    return Math.round(amountInCents * STRIPE_PERCENTAGE_FEE + STRIPE_FIXED_FEE_CENTS);\n  }\n\n  /**\n   * Check if booking has passed the cancellation window (configurable hours before booking time)\n   */\n  private hasCancellationWindowPassed(booking: any, cancellationWindowHours: number = 24): boolean {\n    const now = new Date();\n    const bookingDateTime = new Date(booking.date);\n    \n    // Parse the start time and add it to the booking date\n    const [time, period] = booking.startTime.split(/(?=[AP]M)/);\n    const [hours, minutes] = time.split(':').map(Number);\n    let hour = hours;\n    \n    if (period === 'PM' && hour !== 12) hour += 12;\n    if (period === 'AM' && hour === 12) hour = 0;\n    \n    bookingDateTime.setHours(hour, minutes || 0, 0, 0);\n    \n    // Subtract configured hours to get the cancellation deadline\n    const cancellationDeadline = new Date(bookingDateTime.getTime() - cancellationWindowHours * 60 * 60 * 1000);\n    \n    // Return true if current time is past the cancellation deadline\n    return now > cancellationDeadline;\n  }\n\n  /**\n   * Check if payout should be released based on admin settings\n   */\n  private async shouldReleasePayout(booking: any, settings: any): Promise<boolean> {\n    const payoutReleaseSchedule = settings?.payoutReleaseSchedule || 'after_cancellation_window';\n    const cancellationWindowHours = settings?.cancellationWindowHours || 24;\n\n    if (payoutReleaseSchedule === 'immediate') {\n      // Release immediately after payment confirmation\n      return true;\n    } else if (payoutReleaseSchedule === 'on_weekend') {\n      // Check if today is Friday-Sunday\n      const today = new Date().getDay();\n      // Friday = 5, Saturday = 6, Sunday = 0\n      return today === 5 || today === 6 || today === 0;\n    } else if (payoutReleaseSchedule === 'after_cancellation_window') {\n      // Check if cancellation window has passed\n      return this.hasCancellationWindowPassed(booking, cancellationWindowHours);\n    }\n    \n    return false;\n  }\n\n  /**\n   * Process automatic payout for bookings where cancellation window has passed\n   * This should be called by a cron job periodically\n   */\n  async processEligiblePayouts() {\n    try {\n      console.log('Starting automatic payout processing...');\n      \n      // Get system settings for payout release schedule\n      const systemSettings = await prisma.systemSettings.findFirst();\n      \n      // Find all confirmed bookings where:\n      // 1. Payment is completed (PAID)\n      // 2. Payout hasn't been processed yet\n      // 3. Based on the payout release schedule from admin settings\n      const eligibleBookings = await prisma.booking.findMany({\n        where: {\n          status: 'CONFIRMED',\n          paymentStatus: 'PAID',\n          OR: [\n            { payoutStatus: null },\n            { payoutStatus: 'PENDING' },\n            { payoutStatus: 'HELD' }\n          ]\n        },\n        include: {\n          field: {\n            include: {\n              owner: true\n            }\n          },\n          user: true\n        }\n      });\n\n      console.log(`Found ${eligibleBookings.length} potentially eligible bookings`);\n      console.log(`Payout release schedule: ${systemSettings?.payoutReleaseSchedule || 'after_cancellation_window'}`);\n\n      const results = {\n        processed: 0,\n        skipped: 0,\n        failed: 0,\n        details: [] as any[]\n      };\n\n      for (const booking of eligibleBookings) {\n        try {\n          // Check if payout should be released based on admin settings\n          if (!await this.shouldReleasePayout(booking, systemSettings)) {\n            console.log(`Booking ${booking.id} not eligible for payout release yet`);\n            results.skipped++;\n            results.details.push({\n              bookingId: booking.id,\n              status: 'skipped',\n              reason: 'Not meeting payout release criteria'\n            });\n            continue;\n          }\n\n          // Process the payout\n          const payoutResult = await this.processBookingPayoutAfterCancellationWindow(booking.id);\n          \n          if (payoutResult) {\n            results.processed++;\n            results.details.push({\n              bookingId: booking.id,\n              status: 'processed',\n              payoutId: payoutResult.id,\n              amount: payoutResult.amount\n            });\n          } else {\n            results.skipped++;\n            results.details.push({\n              bookingId: booking.id,\n              status: 'skipped',\n              reason: 'Not eligible or already processed'\n            });\n          }\n        } catch (error: any) {\n          console.error(`Error processing payout for booking ${booking.id}:`, error);\n          results.failed++;\n          results.details.push({\n            bookingId: booking.id,\n            status: 'failed',\n            error: error.message\n          });\n        }\n      }\n\n      console.log(`Payout processing complete. Processed: ${results.processed}, Skipped: ${results.skipped}, Failed: ${results.failed}`);\n      return results;\n    } catch (error) {\n      console.error('Error in automatic payout processing:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Process payout for a specific booking after cancellation window has passed\n   */\n  async processBookingPayoutAfterCancellationWindow(bookingId: string) {\n    try {\n      // Get system settings\n      const systemSettings = await prisma.systemSettings.findFirst();\n      \n      // Get booking with all necessary relations\n      const booking = await prisma.booking.findUnique({\n        where: { id: bookingId },\n        include: {\n          field: {\n            include: {\n              owner: true\n            }\n          },\n          user: true\n        }\n      });\n\n      if (!booking) {\n        throw new Error('Booking not found');\n      }\n\n      // Verify payout should be released based on admin settings\n      if (!await this.shouldReleasePayout(booking, systemSettings)) {\n        console.log(`Booking ${bookingId} is not eligible for payout based on admin settings`);\n        return null;\n      }\n\n      // Check if payout has already been processed\n      if (booking.payoutStatus === 'COMPLETED' || booking.payoutStatus === 'PROCESSING') {\n        console.log(`Payout already ${booking.payoutStatus} for booking ${bookingId}`);\n        return null;\n      }\n\n      // Check if booking is confirmed and payment was successful\n      if (booking.status !== 'CONFIRMED' || booking.paymentStatus !== 'PAID') {\n        console.log(`Booking ${bookingId} is not eligible for payout. Status: ${booking.status}, Payment: ${booking.paymentStatus}`);\n        return null;\n      }\n\n      const field = booking.field;\n      const fieldOwner = field.owner;\n\n      if (!fieldOwner) {\n        throw new Error('Field owner not found');\n      }\n\n      // Check if field owner has a connected Stripe account\n      const stripeAccount = await prisma.stripeAccount.findUnique({\n        where: { userId: fieldOwner.id }\n      });\n\n      if (!stripeAccount) {\n        console.log(`Field owner ${fieldOwner.id} does not have a Stripe account`);\n        \n        // Notify field owner to set up Stripe account\n        await createNotification({\n          userId: fieldOwner.id,\n          type: 'PAYOUT_PENDING',\n          title: 'Set up payment account for automatic payouts',\n          message: `You have a pending payout of £${(booking.fieldOwnerAmount || (booking.totalPrice * 0.8)).toFixed(2)} from a booking that's ready for payment. Please set up your payment account to receive funds automatically.`,\n          data: { \n            bookingId,\n            amount: booking.fieldOwnerAmount || (booking.totalPrice * 0.8),\n            fieldName: field.name\n          }\n        });\n        \n        // Mark payout as pending account setup\n        await prisma.booking.update({\n          where: { id: bookingId },\n          data: { payoutStatus: 'PENDING_ACCOUNT' }\n        });\n        \n        return null;\n      }\n\n      // Check if Stripe account is fully onboarded\n      if (!stripeAccount.chargesEnabled || !stripeAccount.payoutsEnabled) {\n        console.log(`Field owner ${fieldOwner.id} Stripe account is not fully set up`);\n        \n        // Notify field owner to complete Stripe onboarding\n        await createNotification({\n          userId: fieldOwner.id,\n          type: 'PAYOUT_PENDING',\n          title: 'Complete payment account setup',\n          message: `Complete your payment account setup to receive £${(booking.fieldOwnerAmount || (booking.totalPrice * 0.8)).toFixed(2)} from a recent booking.`,\n          data: { \n            bookingId,\n            amount: booking.fieldOwnerAmount || (booking.totalPrice * 0.8),\n            fieldName: field.name\n          }\n        });\n        \n        // Mark payout as pending account setup\n        await prisma.booking.update({\n          where: { id: bookingId },\n          data: { payoutStatus: 'PENDING_ACCOUNT' }\n        });\n        \n        return null;\n      }\n\n      // Calculate payout amount (field owner's portion - already has platform fee deducted)\n      const payoutAmount = booking.fieldOwnerAmount || (booking.totalPrice * 0.8);\n      const payoutAmountInCents = Math.round(payoutAmount * 100);\n\n      // Update booking to processing\n      await prisma.booking.update({\n        where: { id: bookingId },\n        data: { payoutStatus: 'PROCESSING' }\n      });\n\n      try {\n        // Create a transfer to the connected account\n        const transfer = await stripe.transfers.create({\n          amount: payoutAmountInCents,\n          currency: 'gbp',\n          destination: stripeAccount.stripeAccountId,\n          transfer_group: `booking_${bookingId}`,\n          metadata: {\n            bookingId,\n            fieldId: field.id,\n            fieldOwnerId: fieldOwner.id,\n            type: 'automatic_booking_payout',\n            processingReason: 'cancellation_window_passed'\n          },\n          description: `Automatic payout for booking ${bookingId} - ${field.name}`\n        });\n\n        // Create payout record in database\n        const payout = await prisma.payout.create({\n          data: {\n            stripeAccountId: stripeAccount.id,\n            stripePayoutId: transfer.id,\n            amount: payoutAmount,\n            currency: 'gbp',\n            status: 'paid',\n            method: 'standard',\n            description: `Automatic payout for booking ${bookingId} - Cancellation window passed`,\n            bookingIds: [bookingId],\n            arrivalDate: new Date() // Transfers are typically instant to connected accounts\n          }\n        });\n\n        // Update booking with payout details\n        await prisma.booking.update({\n          where: { id: bookingId },\n          data: {\n            payoutStatus: 'COMPLETED',\n            payoutId: payout.id\n          }\n        });\n\n        // Generate and store invoice details\n        const invoiceData = {\n          invoiceNumber: `INV-${booking.id.slice(-8).toUpperCase()}`,\n          bookingDate: booking.date,\n          bookingTime: `${booking.startTime} - ${booking.endTime}`,\n          customerName: booking.user.name || booking.user.email,\n          fieldName: field.name,\n          totalAmount: booking.totalPrice,\n          platformFee: booking.platformCommission || (booking.totalPrice * 0.2),\n          payoutAmount: payoutAmount,\n          payoutDate: new Date()\n        };\n\n        // Send notification to field owner with invoice\n        await createNotification({\n          userId: fieldOwner.id,\n          type: 'PAYOUT_PROCESSED',\n          title: '💰 Payment Received!',\n          message: `£${payoutAmount.toFixed(2)} has been automatically transferred to your account for the ${field.name} booking.`,\n          data: {\n            bookingId,\n            payoutId: payout.id,\n            amount: payoutAmount,\n            fieldName: field.name,\n            customerName: booking.user.name || booking.user.email,\n            invoice: invoiceData\n          }\n        });\n\n        console.log(`Automatic payout processed successfully for booking ${bookingId}: £${payoutAmount}`);\n        \n        return payout;\n\n      } catch (stripeError: any) {\n        console.error('Stripe transfer error:', stripeError);\n        \n        // Update booking to failed payout\n        await prisma.booking.update({\n          where: { id: bookingId },\n          data: { payoutStatus: 'FAILED' }\n        });\n\n        // Notify admin about failed payout\n        const adminUsers = await prisma.user.findMany({\n          where: { role: 'ADMIN' }\n        });\n\n        for (const admin of adminUsers) {\n          await createNotification({\n            userId: admin.id,\n            type: 'PAYOUT_FAILED',\n            title: 'Automatic Payout Failed',\n            message: `Failed to process automatic payout for booking ${bookingId}. Error: ${stripeError.message}`,\n            data: {\n              bookingId,\n              fieldOwnerId: fieldOwner.id,\n              error: stripeError.message\n            }\n          });\n        }\n\n        throw stripeError;\n      }\n    } catch (error) {\n      console.error('Error processing automatic payout:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Handle refund with proper fee management\n   * When a refund is issued, the Stripe fee is deducted from the field owner's account\n   */\n  async processRefundWithFeeAdjustment(bookingId: string, refundReason: string) {\n    try {\n      const booking = await prisma.booking.findUnique({\n        where: { id: bookingId },\n        include: {\n          field: {\n            include: {\n              owner: true\n            }\n          },\n          payment: true,\n          user: true\n        }\n      });\n\n      if (!booking || !booking.payment) {\n        throw new Error('Booking or payment not found');\n      }\n\n      const totalAmountInCents = Math.round(booking.totalPrice * 100);\n      const stripeFee = this.calculateStripeFee(totalAmountInCents);\n      \n      // Check if payout was already made to field owner\n      if (booking.payoutStatus === 'COMPLETED' && booking.payoutId) {\n        // Need to reverse the transfer and deduct Stripe fee\n        const fieldOwnerStripeAccount = await prisma.stripeAccount.findUnique({\n          where: { userId: booking.field.owner.id }\n        });\n\n        if (fieldOwnerStripeAccount) {\n          try {\n            // Create a reverse transfer (negative transfer) to recover funds from field owner\n            // This includes the original payout amount plus the Stripe fee\n            const fieldOwnerAmount = booking.fieldOwnerAmount || (booking.totalPrice * 0.8);\n            const fieldOwnerAmountInCents = Math.round(fieldOwnerAmount * 100);\n            const totalRecoveryAmount = fieldOwnerAmountInCents + stripeFee;\n\n            const reverseTransfer = await stripe.transfers.create({\n              amount: totalRecoveryAmount,\n              currency: 'gbp',\n              destination: fieldOwnerStripeAccount.stripeAccountId,\n              reverse_transfer: true as any, // This reverses the original transfer\n              metadata: {\n                bookingId,\n                type: 'refund_reversal',\n                originalPayoutId: booking.payoutId,\n                stripeFeeIncluded: stripeFee,\n                reason: refundReason\n              },\n              description: `Refund reversal for booking ${bookingId} (includes Stripe fee)`\n            });\n\n            // Notify field owner about the reversal\n            await createNotification({\n              userId: booking.field.owner.id,\n              type: 'PAYOUT_REVERSED',\n              title: 'Payout Reversed Due to Refund',\n              message: `£${(totalRecoveryAmount / 100).toFixed(2)} has been deducted from your account due to a booking cancellation. This includes the Stripe processing fee.`,\n              data: {\n                bookingId,\n                reversalAmount: totalRecoveryAmount / 100,\n                stripeFee: stripeFee / 100,\n                refundReason\n              }\n            });\n          } catch (reversalError) {\n            console.error('Error reversing field owner payout:', reversalError);\n            // Continue with refund even if reversal fails - admin will handle manually\n          }\n        }\n      }\n\n      // Process the refund to the customer\n      const refund = await stripe.refunds.create({\n        payment_intent: booking.paymentIntentId!,\n        reason: 'requested_by_customer' as any,\n        metadata: {\n          bookingId,\n          reason: refundReason\n        }\n      });\n\n      // Update payment record\n      await prisma.payment.update({\n        where: { id: booking.payment.id },\n        data: {\n          status: 'refunded',\n          stripeRefundId: refund.id,\n          refundAmount: booking.totalPrice,\n          refundReason\n        }\n      });\n\n      // Update booking status\n      await prisma.booking.update({\n        where: { id: bookingId },\n        data: {\n          status: 'CANCELLED',\n          payoutStatus: 'REFUNDED',\n          cancellationReason: refundReason,\n          cancelledAt: new Date()\n        }\n      });\n\n      // Notify customer about refund\n      await createNotification({\n        userId: booking.userId,\n        type: 'REFUND_PROCESSED',\n        title: 'Refund Processed',\n        message: `Your refund of £${booking.totalPrice.toFixed(2)} has been initiated and will be credited to your account within 5-7 business days.`,\n        data: {\n          bookingId,\n          refundAmount: booking.totalPrice,\n          fieldName: booking.field.name\n        }\n      });\n\n      return refund;\n    } catch (error) {\n      console.error('Error processing refund with fee adjustment:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get payout summary for field owner dashboard\n   */\n  async getPayoutSummary(userId: string) {\n    try {\n      const userFields = await prisma.field.findMany({\n        where: { ownerId: userId },\n        select: { id: true }\n      });\n\n      const fieldIds = userFields.map(f => f.id);\n\n      // Get all bookings for user's fields\n      const bookings = await prisma.booking.findMany({\n        where: {\n          fieldId: { in: fieldIds },\n          paymentStatus: 'PAID'\n        }\n      });\n\n      const now = new Date();\n      const summary = {\n        totalEarnings: 0,\n        pendingPayouts: 0,\n        completedPayouts: 0,\n        upcomingPayouts: 0, // Bookings where cancellation window hasn't passed\n        bookingsInCancellationWindow: [] as any[]\n      };\n\n      for (const booking of bookings) {\n        const amount = booking.fieldOwnerAmount || (booking.totalPrice * 0.8);\n        \n        if (booking.payoutStatus === 'COMPLETED') {\n          summary.completedPayouts += amount;\n          summary.totalEarnings += amount;\n        } else if (booking.payoutStatus === 'PROCESSING') {\n          summary.pendingPayouts += amount;\n        } else if (booking.status === 'CONFIRMED') {\n          const systemSettings = await prisma.systemSettings.findFirst();\n          if (await this.shouldReleasePayout(booking, systemSettings)) {\n            summary.pendingPayouts += amount;\n          } else {\n            summary.upcomingPayouts += amount;\n            \n            // Calculate when payout will be available\n            const bookingDateTime = new Date(booking.date);\n            const [time, period] = booking.startTime.split(/(?=[AP]M)/);\n            const [hours, minutes] = time.split(':').map(Number);\n            let hour = hours;\n            \n            if (period === 'PM' && hour !== 12) hour += 12;\n            if (period === 'AM' && hour === 12) hour = 0;\n            \n            bookingDateTime.setHours(hour, minutes || 0, 0, 0);\n            const payoutAvailableAt = new Date(bookingDateTime.getTime() - 24 * 60 * 60 * 1000);\n            \n            summary.bookingsInCancellationWindow.push({\n              bookingId: booking.id,\n              amount,\n              bookingDate: booking.date,\n              bookingTime: booking.startTime,\n              payoutAvailableAt\n            });\n          }\n        }\n      }\n\n      return summary;\n    } catch (error) {\n      console.error('Error getting payout summary:', error);\n      throw error;\n    }\n  }\n}\n\nexport const automaticPayoutService = new AutomaticPayoutService();"],"names":["AutomaticPayoutService","automaticPayoutService","prisma","PrismaClient","stripe","Stripe","process","env","STRIPE_SECRET_KEY","apiVersion","STRIPE_PERCENTAGE_FEE","STRIPE_FIXED_FEE_CENTS","calculateStripeFee","amountInCents","Math","round","hasCancellationWindowPassed","booking","cancellationWindowHours","now","Date","bookingDateTime","date","time","period","startTime","split","hours","minutes","map","Number","hour","setHours","cancellationDeadline","getTime","shouldReleasePayout","settings","payoutReleaseSchedule","today","getDay","processEligiblePayouts","console","log","systemSettings","findFirst","eligibleBookings","findMany","where","status","paymentStatus","OR","payoutStatus","include","field","owner","user","length","results","processed","skipped","failed","details","id","push","bookingId","reason","payoutResult","processBookingPayoutAfterCancellationWindow","payoutId","amount","error","message","findUnique","Error","fieldOwner","stripeAccount","userId","createNotification","type","title","fieldOwnerAmount","totalPrice","toFixed","data","fieldName","name","update","chargesEnabled","payoutsEnabled","payoutAmount","payoutAmountInCents","transfer","transfers","create","currency","destination","stripeAccountId","transfer_group","metadata","fieldId","fieldOwnerId","processingReason","description","payout","stripePayoutId","method","bookingIds","arrivalDate","invoiceData","invoiceNumber","slice","toUpperCase","bookingDate","bookingTime","endTime","customerName","email","totalAmount","platformFee","platformCommission","payoutDate","invoice","stripeError","adminUsers","role","admin","processRefundWithFeeAdjustment","refundReason","payment","totalAmountInCents","stripeFee","fieldOwnerStripeAccount","fieldOwnerAmountInCents","totalRecoveryAmount","reverseTransfer","reverse_transfer","originalPayoutId","stripeFeeIncluded","reversalAmount","reversalError","refund","refunds","payment_intent","paymentIntentId","stripeRefundId","refundAmount","cancellationReason","cancelledAt","getPayoutSummary","userFields","ownerId","select","fieldIds","f","bookings","in","summary","totalEarnings","pendingPayouts","completedPayouts","upcomingPayouts","bookingsInCancellationWindow","payoutAvailableAt"],"mappings":"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"}