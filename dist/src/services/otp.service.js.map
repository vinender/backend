{"version":3,"sources":["../../../src/services/otp.service.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\nimport * as otpGenerator from 'otp-generator';\nimport { emailService } from './email.service';\n\nconst prisma = new PrismaClient();\n\nexport class OtpService {\n  private readonly OTP_LENGTH = 6;\n  private readonly OTP_EXPIRY_MINUTES = 10;\n  private readonly MAX_OTP_ATTEMPTS = 3;\n\n  // Generate a 6-digit OTP\n  generateOtp(): string {\n    return otpGenerator.generate(this.OTP_LENGTH, {\n      digits: true,\n      lowerCaseAlphabets: false,\n      upperCaseAlphabets: false,\n      specialChars: false,\n    });\n  }\n\n  // Create and save OTP to database\n  async createOtp(email: string, type: 'SIGNUP' | 'RESET_PASSWORD' | 'EMAIL_VERIFICATION'): Promise<string> {\n    try {\n      // Delete any existing OTPs for this email and type\n      await prisma.otpVerification.deleteMany({\n        where: {\n          email,\n          type,\n          verified: false,\n        },\n      });\n\n      // Generate new OTP\n      const otp = this.generateOtp();\n      \n      // Calculate expiry time\n      const expiresAt = new Date();\n      expiresAt.setMinutes(expiresAt.getMinutes() + this.OTP_EXPIRY_MINUTES);\n\n      // Save OTP to database\n      await prisma.otpVerification.create({\n        data: {\n          email,\n          otp,\n          type,\n          expiresAt,\n        },\n      });\n\n      return otp;\n    } catch (error) {\n      console.error('Error creating OTP:', error);\n      throw new Error('Failed to create OTP');\n    }\n  }\n\n  // Check if OTP is valid without marking as verified\n  async checkOtpValidity(email: string, otp: string, type: 'SIGNUP' | 'RESET_PASSWORD' | 'EMAIL_VERIFICATION'): Promise<boolean> {\n    try {\n      const otpRecord = await prisma.otpVerification.findFirst({\n        where: {\n          email,\n          otp,\n          type,\n          verified: false,\n          expiresAt: {\n            gt: new Date(), // Not expired\n          },\n        },\n      });\n\n      return !!otpRecord;\n    } catch (error) {\n      console.error('Error checking OTP:', error);\n      return false;\n    }\n  }\n\n  // Verify OTP and mark as used\n  async verifyOtp(email: string, otp: string, type: 'SIGNUP' | 'RESET_PASSWORD' | 'EMAIL_VERIFICATION'): Promise<boolean> {\n    try {\n      // Find the OTP record\n      const otpRecord = await prisma.otpVerification.findFirst({\n        where: {\n          email,\n          otp,\n          type,\n          verified: false,\n          expiresAt: {\n            gt: new Date(), // Not expired\n          },\n        },\n      });\n\n      if (!otpRecord) {\n        return false;\n      }\n\n      // Mark OTP as verified\n      await prisma.otpVerification.update({\n        where: {\n          id: otpRecord.id,\n        },\n        data: {\n          verified: true,\n        },\n      });\n\n      return true;\n    } catch (error) {\n      console.error('Error verifying OTP:', error);\n      return false;\n    }\n  }\n\n  // Send OTP via email\n  async sendOtp(email: string, type: 'SIGNUP' | 'RESET_PASSWORD' | 'EMAIL_VERIFICATION', name?: string): Promise<void> {\n    try {\n      // Create OTP\n      const otp = await this.createOtp(email, type);\n\n      // Send email with OTP\n      await emailService.sendOtpEmail(email, otp, type, name);\n    } catch (error) {\n      console.error('Error sending OTP:', error);\n      throw new Error('Failed to send OTP');\n    }\n  }\n\n  // Resend OTP\n  async resendOtp(email: string, type: 'SIGNUP' | 'RESET_PASSWORD' | 'EMAIL_VERIFICATION', name?: string): Promise<void> {\n    try {\n      // Check if there's a recent OTP (prevent spam)\n      const recentOtp = await prisma.otpVerification.findFirst({\n        where: {\n          email,\n          type,\n          verified: false,\n          createdAt: {\n            gt: new Date(Date.now() - 60 * 1000), // Within last minute\n          },\n        },\n      });\n\n      if (recentOtp) {\n        throw new Error('Please wait a minute before requesting a new OTP');\n      }\n\n      // Send new OTP\n      await this.sendOtp(email, type, name);\n    } catch (error) {\n      console.error('Error resending OTP:', error);\n      throw error;\n    }\n  }\n\n  // Clean up expired OTPs (can be run as a cron job)\n  async cleanupExpiredOtps(): Promise<void> {\n    try {\n      await prisma.otpVerification.deleteMany({\n        where: {\n          OR: [\n            {\n              expiresAt: {\n                lt: new Date(),\n              },\n            },\n            {\n              verified: true,\n              updatedAt: {\n                lt: new Date(Date.now() - 24 * 60 * 60 * 1000), // 24 hours old\n              },\n            },\n          ],\n        },\n      });\n    } catch (error) {\n      console.error('Error cleaning up expired OTPs:', error);\n    }\n  }\n\n  // Check if email has pending verification\n  async hasPendingVerification(email: string, type: 'SIGNUP' | 'RESET_PASSWORD' | 'EMAIL_VERIFICATION'): Promise<boolean> {\n    const otpRecord = await prisma.otpVerification.findFirst({\n      where: {\n        email,\n        type,\n        verified: false,\n        expiresAt: {\n          gt: new Date(),\n        },\n      },\n    });\n\n    return !!otpRecord;\n  }\n}\n\nexport const otpService = new OtpService();"],"names":["OtpService","otpService","prisma","PrismaClient","OTP_LENGTH","OTP_EXPIRY_MINUTES","MAX_OTP_ATTEMPTS","generateOtp","otpGenerator","generate","digits","lowerCaseAlphabets","upperCaseAlphabets","specialChars","createOtp","email","type","otpVerification","deleteMany","where","verified","otp","expiresAt","Date","setMinutes","getMinutes","create","data","error","console","Error","checkOtpValidity","otpRecord","findFirst","gt","verifyOtp","update","id","sendOtp","name","emailService","sendOtpEmail","resendOtp","recentOtp","createdAt","now","cleanupExpiredOtps","OR","lt","updatedAt","hasPendingVerification"],"mappings":"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"}