{"version":3,"sources":["../../../src/services/notification.service.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\ninterface NotificationData {\n  userId: string;\n  type: string;\n  title: string;\n  message: string;\n  data?: any;\n}\n\nexport class NotificationService {\n  /**\n   * Create notification for user and optionally for admin\n   */\n  static async createNotification(notificationData: NotificationData, notifyAdmin: boolean = true) {\n    try {\n      // Create notification for the user\n      const userNotification = await prisma.notification.create({\n        data: {\n          userId: notificationData.userId,\n          type: notificationData.type,\n          title: notificationData.title,\n          message: notificationData.message,\n          data: notificationData.data || {}\n        }\n      });\n\n      // If notifyAdmin is true and it's an important notification type, also notify admin\n      if (notifyAdmin && this.shouldNotifyAdmin(notificationData.type)) {\n        // Get admin users\n        const adminUsers = await prisma.user.findMany({\n          where: { role: 'ADMIN' },\n          select: { id: true }\n        });\n\n        // Create notification for each admin\n        for (const admin of adminUsers) {\n          await prisma.notification.create({\n            data: {\n              userId: admin.id,\n              type: notificationData.type,\n              title: `[Admin Alert] ${notificationData.title}`,\n              message: notificationData.message,\n              data: {\n                ...notificationData.data,\n                originalUserId: notificationData.userId,\n                isAdminNotification: true\n              }\n            }\n          });\n        }\n      }\n\n      return userNotification;\n    } catch (error) {\n      console.error('Error creating notification:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Determine if admin should be notified for this type\n   */\n  static shouldNotifyAdmin(type: string): boolean {\n    const adminNotificationTypes = [\n      'booking_received',\n      'booking_cancelled',\n      'payment_received',\n      'payment_failed',\n      'field_added',\n      'user_registered',\n      'review_posted',\n      'refund_processed',\n      'payout_failed',\n      'field_approved'\n    ];\n\n    return adminNotificationTypes.includes(type);\n  }\n\n  /**\n   * Create bulk notifications\n   */\n  static async createBulkNotifications(notifications: NotificationData[]) {\n    try {\n      const results = [];\n      for (const notification of notifications) {\n        const result = await this.createNotification(notification);\n        results.push(result);\n      }\n      return results;\n    } catch (error) {\n      console.error('Error creating bulk notifications:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Notify all admins\n   */\n  static async notifyAdmins(title: string, message: string, data?: any) {\n    try {\n      const adminUsers = await prisma.user.findMany({\n        where: { role: 'ADMIN' },\n        select: { id: true }\n      });\n\n      const notifications = [];\n      for (const admin of adminUsers) {\n        const notification = await prisma.notification.create({\n          data: {\n            userId: admin.id,\n            type: 'admin_alert',\n            title,\n            message,\n            data: data || {}\n          }\n        });\n        notifications.push(notification);\n      }\n\n      return notifications;\n    } catch (error) {\n      console.error('Error notifying admins:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get unread count for user\n   */\n  static async getUnreadCount(userId: string): Promise<number> {\n    try {\n      return await prisma.notification.count({\n        where: {\n          userId,\n          read: false\n        }\n      });\n    } catch (error) {\n      console.error('Error getting unread count:', error);\n      return 0;\n    }\n  }\n}"],"names":["NotificationService","prisma","PrismaClient","createNotification","notificationData","notifyAdmin","userNotification","notification","create","data","userId","type","title","message","shouldNotifyAdmin","adminUsers","user","findMany","where","role","select","id","admin","originalUserId","isAdminNotification","error","console","adminNotificationTypes","includes","createBulkNotifications","notifications","results","result","push","notifyAdmins","getUnreadCount","count","read"],"mappings":"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"}