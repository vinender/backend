{"version":3,"sources":["../../../src/services/held-payout.service.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\nimport { createNotification } from '../controllers/notification.controller';\n\nconst prisma = new PrismaClient();\n\nexport class HeldPayoutService {\n  /**\n   * Release held payouts for a field owner who just connected their Stripe account\n   */\n  async releaseHeldPayouts(userId: string): Promise<void> {\n    try {\n      // Check if user has a properly connected Stripe account\n      const stripeAccount = await prisma.stripeAccount.findUnique({\n        where: { userId }\n      });\n\n      if (!stripeAccount || !stripeAccount.chargesEnabled || !stripeAccount.payoutsEnabled) {\n        console.log(`User ${userId} does not have a fully connected Stripe account yet`);\n        return;\n      }\n\n      // Find all fields owned by this user\n      const fields = await prisma.field.findMany({\n        where: { ownerId: userId },\n        select: { id: true, name: true }\n      });\n\n      if (fields.length === 0) {\n        console.log(`User ${userId} has no fields`);\n        return;\n      }\n\n      const fieldIds = fields.map(f => f.id);\n\n      // Find all held bookings for these fields\n      const heldBookings = await prisma.booking.findMany({\n        where: {\n          fieldId: { in: fieldIds },\n          payoutStatus: 'HELD',\n          payoutHeldReason: 'NO_STRIPE_ACCOUNT',\n          status: { in: ['CONFIRMED', 'COMPLETED'] },\n          paymentStatus: 'PAID'\n        }\n      });\n\n      if (heldBookings.length === 0) {\n        console.log(`No held bookings found for user ${userId}`);\n        return;\n      }\n\n      console.log(`Found ${heldBookings.length} held bookings for user ${userId}`);\n\n      // Get system settings for payout release schedule\n      const systemSettings = await prisma.systemSettings.findFirst();\n      const payoutReleaseSchedule = systemSettings?.payoutReleaseSchedule || 'after_cancellation_window';\n\n      // Update bookings based on payout release schedule\n      for (const booking of heldBookings) {\n        let newPayoutStatus = 'PENDING';\n        \n        // Check payout release schedule\n        if (payoutReleaseSchedule === 'immediate') {\n          // Release immediately\n          newPayoutStatus = 'PENDING';\n        } else if (payoutReleaseSchedule === 'on_weekend') {\n          // Will be processed on weekend\n          newPayoutStatus = 'PENDING';\n        } else if (payoutReleaseSchedule === 'after_cancellation_window') {\n          // Check if cancellation window has expired\n          const cancellationWindowHours = systemSettings?.cancellationWindowHours || 24;\n          const bookingDateTime = new Date(booking.date);\n          const [startHourStr] = booking.startTime.split(':');\n          bookingDateTime.setHours(parseInt(startHourStr));\n          \n          const hoursUntilBooking = (bookingDateTime.getTime() - Date.now()) / (1000 * 60 * 60);\n          \n          if (hoursUntilBooking < cancellationWindowHours) {\n            // Cancellation window has passed, can release\n            newPayoutStatus = 'PENDING';\n          } else {\n            // Still within cancellation window, keep held but update reason\n            console.log(`Booking ${booking.id} still within cancellation window`);\n            continue;\n          }\n        }\n\n        // Update booking payout status\n        await prisma.booking.update({\n          where: { id: booking.id },\n          data: {\n            payoutStatus: newPayoutStatus,\n            payoutHeldReason: null,\n            payoutReleasedAt: new Date()\n          }\n        });\n\n        console.log(`Released held payout for booking ${booking.id}`);\n      }\n\n      // Notify field owner about released payouts\n      const releasedCount = heldBookings.filter(b => {\n        if (payoutReleaseSchedule !== 'after_cancellation_window') return true;\n        \n        const cancellationWindowHours = systemSettings?.cancellationWindowHours || 24;\n        const bookingDateTime = new Date(b.date);\n        const [startHourStr] = b.startTime.split(':');\n        bookingDateTime.setHours(parseInt(startHourStr));\n        const hoursUntilBooking = (bookingDateTime.getTime() - Date.now()) / (1000 * 60 * 60);\n        \n        return hoursUntilBooking < cancellationWindowHours;\n      }).length;\n\n      if (releasedCount > 0) {\n        await createNotification({\n          userId,\n          type: 'PAYOUT_RELEASED',\n          title: 'Held Payments Released',\n          message: `Great news! ${releasedCount} held payment(s) have been released now that your Stripe account is connected. They will be processed according to your payout schedule.`,\n          data: { count: releasedCount }\n        });\n      }\n\n    } catch (error) {\n      console.error('Error releasing held payouts:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check and release held payouts that have passed their hold period\n   * This should be run periodically (e.g., daily)\n   */\n  async processScheduledReleases(): Promise<void> {\n    try {\n      const systemSettings = await prisma.systemSettings.findFirst();\n      const payoutReleaseSchedule = systemSettings?.payoutReleaseSchedule || 'after_cancellation_window';\n      const cancellationWindowHours = systemSettings?.cancellationWindowHours || 24;\n\n      // Find all held bookings\n      const heldBookings = await prisma.booking.findMany({\n        where: {\n          payoutStatus: 'HELD',\n          status: { in: ['CONFIRMED', 'COMPLETED'] },\n          paymentStatus: 'PAID'\n        },\n        include: {\n          field: {\n            include: {\n              owner: true\n            }\n          }\n        }\n      });\n\n      for (const booking of heldBookings) {\n        let shouldRelease = false;\n\n        // Check if field owner now has a Stripe account\n        const stripeAccount = await prisma.stripeAccount.findUnique({\n          where: { userId: booking.field.ownerId }\n        });\n\n        if (!stripeAccount || !stripeAccount.chargesEnabled || !stripeAccount.payoutsEnabled) {\n          // Still no Stripe account, keep held\n          continue;\n        }\n\n        // Field owner has Stripe account, check release schedule\n        if (payoutReleaseSchedule === 'immediate') {\n          shouldRelease = true;\n        } else if (payoutReleaseSchedule === 'on_weekend') {\n          // Check if today is Friday-Sunday\n          const today = new Date().getDay();\n          if (today >= 5 || today === 0) { // Friday = 5, Saturday = 6, Sunday = 0\n            shouldRelease = true;\n          }\n        } else if (payoutReleaseSchedule === 'after_cancellation_window') {\n          // Check if cancellation window has expired\n          const bookingDateTime = new Date(booking.date);\n          const [startHourStr] = booking.startTime.split(':');\n          bookingDateTime.setHours(parseInt(startHourStr));\n          \n          const hoursUntilBooking = (bookingDateTime.getTime() - Date.now()) / (1000 * 60 * 60);\n          \n          if (hoursUntilBooking < cancellationWindowHours || bookingDateTime < new Date()) {\n            // Cancellation window has passed or booking already happened\n            shouldRelease = true;\n          }\n        }\n\n        if (shouldRelease) {\n          await prisma.booking.update({\n            where: { id: booking.id },\n            data: {\n              payoutStatus: 'PENDING',\n              payoutHeldReason: null,\n              payoutReleasedAt: new Date()\n            }\n          });\n\n          console.log(`Released held payout for booking ${booking.id}`);\n\n          // Notify field owner\n          await createNotification({\n            userId: booking.field.ownerId,\n            type: 'PAYOUT_RELEASED',\n            title: 'Payment Released',\n            message: `A payment of $${booking.fieldOwnerAmount} for booking on ${booking.date.toLocaleDateString()} has been released and will be processed soon.`,\n            data: { \n              bookingId: booking.id,\n              amount: booking.fieldOwnerAmount\n            }\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Error processing scheduled payout releases:', error);\n      throw error;\n    }\n  }\n}\n\nexport const heldPayoutService = new HeldPayoutService();"],"names":["HeldPayoutService","heldPayoutService","prisma","PrismaClient","releaseHeldPayouts","userId","stripeAccount","findUnique","where","chargesEnabled","payoutsEnabled","console","log","fields","field","findMany","ownerId","select","id","name","length","fieldIds","map","f","heldBookings","booking","fieldId","in","payoutStatus","payoutHeldReason","status","paymentStatus","systemSettings","findFirst","payoutReleaseSchedule","newPayoutStatus","cancellationWindowHours","bookingDateTime","Date","date","startHourStr","startTime","split","setHours","parseInt","hoursUntilBooking","getTime","now","update","data","payoutReleasedAt","releasedCount","filter","b","createNotification","type","title","message","count","error","processScheduledReleases","include","owner","shouldRelease","today","getDay","fieldOwnerAmount","toLocaleDateString","bookingId","amount"],"mappings":"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"}