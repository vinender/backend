{"version":3,"sources":["../../../src/services/payout.service.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\nimport Stripe from 'stripe';\nimport { createNotification } from '../controllers/notification.controller';\nimport { calculatePayoutAmounts } from '../utils/commission.utils';\n\nconst prisma = new PrismaClient();\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: '2025-07-30.basil'\n});\n\nexport class PayoutService {\n  /**\n   * Process automatic payout when booking is completed\n   * This transfers the field owner's portion from the platform account to their connected account\n   */\n  async processBookingPayout(bookingId: string) {\n    try {\n      // Get booking with field and owner details\n      const booking = await prisma.booking.findUnique({\n        where: { id: bookingId },\n        include: {\n          field: {\n            include: {\n              owner: true\n            }\n          },\n          user: true\n        }\n      });\n\n      if (!booking) {\n        throw new Error('Booking not found');\n      }\n\n      // Check if payout has already been processed or is held\n      if (booking.payoutStatus === 'COMPLETED' || booking.payoutStatus === 'PROCESSING') {\n        console.log(`Payout already ${booking.payoutStatus} for booking ${bookingId}`);\n        return;\n      }\n      \n      // Check if payout is held (e.g., no Stripe account)\n      if (booking.payoutStatus === 'HELD') {\n        console.log(`Payout is held for booking ${bookingId}. Reason: ${booking.payoutHeldReason}`);\n        return;\n      }\n\n      // Check if booking is completed and payment was successful\n      if (booking.status !== 'COMPLETED' || booking.paymentStatus !== 'PAID') {\n        console.log(`Booking ${bookingId} is not eligible for payout. Status: ${booking.status}, Payment: ${booking.paymentStatus}`);\n        return;\n      }\n\n      const field = booking.field;\n      const fieldOwner = field.owner;\n\n      if (!fieldOwner) {\n        throw new Error('Field owner not found');\n      }\n\n      // Check if field owner has a connected Stripe account\n      const stripeAccount = await prisma.stripeAccount.findUnique({\n        where: { userId: fieldOwner.id }\n      });\n\n      if (!stripeAccount) {\n        console.log(`Field owner ${fieldOwner.id} does not have a Stripe account`);\n        \n        // Notify field owner to set up Stripe account\n        await createNotification({\n          userId: fieldOwner.id,\n          type: 'PAYOUT_PENDING',\n          title: 'Set up payment account',\n          message: 'You have pending payouts. Please set up your payment account to receive funds.',\n          data: { \n            bookingId,\n            amount: booking.fieldOwnerAmount || (booking.totalPrice * 0.8)\n          }\n        });\n        \n        // Mark payout as pending account setup\n        await prisma.booking.update({\n          where: { id: bookingId },\n          data: { payoutStatus: 'PENDING_ACCOUNT' }\n        });\n        \n        return;\n      }\n\n      // Check if Stripe account is fully onboarded\n      if (!stripeAccount.chargesEnabled || !stripeAccount.payoutsEnabled) {\n        console.log(`Field owner ${fieldOwner.id} Stripe account is not fully set up`);\n        \n        // Notify field owner to complete Stripe onboarding\n        await createNotification({\n          userId: fieldOwner.id,\n          type: 'PAYOUT_PENDING',\n          title: 'Complete payment account setup',\n          message: 'Please complete your payment account setup to receive pending payouts.',\n          data: { \n            bookingId,\n            amount: booking.fieldOwnerAmount || (booking.totalPrice * 0.8)\n          }\n        });\n        \n        // Mark payout as pending account setup\n        await prisma.booking.update({\n          where: { id: bookingId },\n          data: { payoutStatus: 'PENDING_ACCOUNT' }\n        });\n        \n        return;\n      }\n\n      // Calculate payout amount using commission rates\n      const { fieldOwnerAmount, platformFeeAmount, commissionRate } = \n        await calculatePayoutAmounts(booking.totalPrice, fieldOwner.id);\n      \n      const payoutAmount = booking.fieldOwnerAmount || fieldOwnerAmount;\n      const payoutAmountInCents = Math.round(payoutAmount * 100);\n\n      // Update booking to processing\n      await prisma.booking.update({\n        where: { id: bookingId },\n        data: { payoutStatus: 'PROCESSING' }\n      }); \n\n      try {\n        // Create a transfer to the connected account\n        const transfer = await stripe.transfers.create({\n          amount: payoutAmountInCents,\n          currency: 'usd',\n          destination: stripeAccount.stripeAccountId,\n          transfer_group: `booking_${bookingId}`,\n          metadata: {\n            bookingId,\n            fieldId: field.id,\n            fieldOwnerId: fieldOwner.id,\n            type: 'booking_payout'\n          },\n          description: `Payout for booking ${bookingId} - ${field.name}`\n        });\n\n        // Create payout record in database\n        const payout = await prisma.payout.create({\n          data: {\n            stripeAccountId: stripeAccount.id,\n            stripePayoutId: transfer.id,\n            amount: payoutAmount,\n            currency: 'usd',\n            status: 'paid',\n            method: 'standard',\n            description: `Payout for booking ${bookingId}`,\n            bookingIds: [bookingId],\n            arrivalDate: new Date() // Transfers are typically instant to connected accounts\n          }\n        });\n\n        // Update booking with payout details and commission amounts\n        await prisma.booking.update({\n          where: { id: bookingId },\n          data: {\n            payoutStatus: 'COMPLETED',\n            payoutId: payout.id,\n            fieldOwnerAmount: payoutAmount,\n            platformFeeAmount: platformFeeAmount\n          }\n        });\n\n        // Send notification to field owner\n        await createNotification({\n          userId: fieldOwner.id,\n          type: 'PAYOUT_PROCESSED',\n          title: 'Payment Received!',\n          message: `£${payoutAmount.toFixed(2)} has been transferred to your account for ${field.name} booking.`,\n          data: {\n            bookingId,\n            payoutId: payout.id,\n            amount: payoutAmount,\n            fieldName: field.name,\n            customerName: booking.user.name || booking.user.email\n          }\n        });\n\n        console.log(`Payout processed successfully for booking ${bookingId}: £${payoutAmount}`);\n        \n        return payout;\n\n      } catch (stripeError: any) {\n        console.error('Stripe transfer error:', stripeError);\n        \n        // Update booking to failed payout\n        await prisma.booking.update({\n          where: { id: bookingId },\n          data: { payoutStatus: 'FAILED' }\n        });\n\n        // Notify admin about failed payout\n        const adminUsers = await prisma.user.findMany({\n          where: { role: 'ADMIN' }\n        });\n\n        for (const admin of adminUsers) {\n          await createNotification({\n            userId: admin.id,\n            type: 'PAYOUT_FAILED',\n            title: 'Payout Failed',\n            message: `Failed to process payout for booking ${bookingId}. Error: ${stripeError.message}`,\n            data: {\n              bookingId,\n              fieldOwnerId: fieldOwner.id,\n              error: stripeError.message\n            }\n          });\n        }\n\n        throw stripeError;\n      }\n    } catch (error) {\n      console.error('Error processing payout:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Process pending payouts for field owners who have completed Stripe onboarding\n   */\n  async processPendingPayouts(userId: string) {\n    try {\n      // Get all bookings pending payout for this user's fields\n      const userFields = await prisma.field.findMany({\n        where: { ownerId: userId },\n        select: { id: true }\n      });\n\n      const fieldIds = userFields.map(f => f.id);\n\n      const pendingBookings = await prisma.booking.findMany({\n        where: {\n          fieldId: { in: fieldIds },\n          status: 'COMPLETED',\n          paymentStatus: 'PAID',\n          payoutStatus: { in: ['PENDING', 'PENDING_ACCOUNT'] }\n        }\n      });\n\n      console.log(`Processing ${pendingBookings.length} pending payouts for user ${userId}`);\n\n      const results = [];\n      for (const booking of pendingBookings) {\n        try {\n          const payout = await this.processBookingPayout(booking.id);\n          results.push({ bookingId: booking.id, success: true, payout });\n        } catch (error) {\n          console.error(`Failed to process payout for booking ${booking.id}:`, error);\n          results.push({ bookingId: booking.id, success: false, error });\n        }\n      }\n\n      return results;\n    } catch (error) {\n      console.error('Error processing pending payouts:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get payout history for a field owner\n   */\n  async getPayoutHistory(userId: string, page = 1, limit = 10) {\n    try {\n      // Get Stripe account for this user\n      const stripeAccount = await prisma.stripeAccount.findUnique({\n        where: { userId }\n      });\n\n      if (!stripeAccount) {\n        return {\n          payouts: [],\n          total: 0,\n          page,\n          limit,\n          totalPages: 0\n        };\n      }\n\n      const skip = (page - 1) * limit;\n\n      const [payouts, total] = await Promise.all([\n        prisma.payout.findMany({\n          where: { stripeAccountId: stripeAccount.id },\n          orderBy: { createdAt: 'desc' },\n          skip,\n          take: limit\n        }),\n        prisma.payout.count({\n          where: { stripeAccountId: stripeAccount.id }\n        })\n      ]);\n\n      // Enhance payouts with booking details\n      const enhancedPayouts = await Promise.all(\n        payouts.map(async (payout) => {\n          const bookings = await prisma.booking.findMany({\n            where: { id: { in: payout.bookingIds } },\n            include: {\n              field: { select: { name: true } },\n              user: { select: { name: true, email: true } }\n            }\n          });\n\n          return {\n            ...payout,\n            bookings: bookings.map(b => ({\n              id: b.id,\n              fieldName: b.field.name,\n              customerName: b.user.name || b.user.email,\n              date: b.date,\n              amount: b.fieldOwnerAmount || b.totalPrice * 0.8\n            }))\n          };\n        })\n      );\n\n      return {\n        payouts: enhancedPayouts,\n        total,\n        page,\n        limit,\n        totalPages: Math.ceil(total / limit)\n      };\n    } catch (error) {\n      console.error('Error fetching payout history:', error);\n      throw error;\n    }\n  }\n}\n\nexport const payoutService = new PayoutService();"],"names":["PayoutService","payoutService","prisma","PrismaClient","stripe","Stripe","process","env","STRIPE_SECRET_KEY","apiVersion","processBookingPayout","bookingId","booking","findUnique","where","id","include","field","owner","user","Error","payoutStatus","console","log","payoutHeldReason","status","paymentStatus","fieldOwner","stripeAccount","userId","createNotification","type","title","message","data","amount","fieldOwnerAmount","totalPrice","update","chargesEnabled","payoutsEnabled","platformFeeAmount","commissionRate","calculatePayoutAmounts","payoutAmount","payoutAmountInCents","Math","round","transfer","transfers","create","currency","destination","stripeAccountId","transfer_group","metadata","fieldId","fieldOwnerId","description","name","payout","stripePayoutId","method","bookingIds","arrivalDate","Date","payoutId","toFixed","fieldName","customerName","email","stripeError","error","adminUsers","findMany","role","admin","processPendingPayouts","userFields","ownerId","select","fieldIds","map","f","pendingBookings","in","length","results","push","success","getPayoutHistory","page","limit","payouts","total","totalPages","skip","Promise","all","orderBy","createdAt","take","count","enhancedPayouts","bookings","b","date","ceil"],"mappings":";;;;;;;;;;;QAWaA;eAAAA;;QAuUAC;eAAAA;;;wBAlVgB;+DACV;wCACgB;iCACI;;;;;;AAEvC,MAAMC,SAAS,IAAIC,oBAAY;AAE/B,MAAMC,SAAS,IAAIC,eAAM,CAACC,QAAQC,GAAG,CAACC,iBAAiB,EAAG;IACxDC,YAAY;AACd;AAEO,MAAMT;IACX;;;GAGC,GACD,MAAMU,qBAAqBC,SAAiB,EAAE;QAC5C,IAAI;YACF,2CAA2C;YAC3C,MAAMC,UAAU,MAAMV,OAAOU,OAAO,CAACC,UAAU,CAAC;gBAC9CC,OAAO;oBAAEC,IAAIJ;gBAAU;gBACvBK,SAAS;oBACPC,OAAO;wBACLD,SAAS;4BACPE,OAAO;wBACT;oBACF;oBACAC,MAAM;gBACR;YACF;YAEA,IAAI,CAACP,SAAS;gBACZ,MAAM,IAAIQ,MAAM;YAClB;YAEA,wDAAwD;YACxD,IAAIR,QAAQS,YAAY,KAAK,eAAeT,QAAQS,YAAY,KAAK,cAAc;gBACjFC,QAAQC,GAAG,CAAC,CAAC,eAAe,EAAEX,QAAQS,YAAY,CAAC,aAAa,EAAEV,WAAW;gBAC7E;YACF;YAEA,oDAAoD;YACpD,IAAIC,QAAQS,YAAY,KAAK,QAAQ;gBACnCC,QAAQC,GAAG,CAAC,CAAC,2BAA2B,EAAEZ,UAAU,UAAU,EAAEC,QAAQY,gBAAgB,EAAE;gBAC1F;YACF;YAEA,2DAA2D;YAC3D,IAAIZ,QAAQa,MAAM,KAAK,eAAeb,QAAQc,aAAa,KAAK,QAAQ;gBACtEJ,QAAQC,GAAG,CAAC,CAAC,QAAQ,EAAEZ,UAAU,qCAAqC,EAAEC,QAAQa,MAAM,CAAC,WAAW,EAAEb,QAAQc,aAAa,EAAE;gBAC3H;YACF;YAEA,MAAMT,QAAQL,QAAQK,KAAK;YAC3B,MAAMU,aAAaV,MAAMC,KAAK;YAE9B,IAAI,CAACS,YAAY;gBACf,MAAM,IAAIP,MAAM;YAClB;YAEA,sDAAsD;YACtD,MAAMQ,gBAAgB,MAAM1B,OAAO0B,aAAa,CAACf,UAAU,CAAC;gBAC1DC,OAAO;oBAAEe,QAAQF,WAAWZ,EAAE;gBAAC;YACjC;YAEA,IAAI,CAACa,eAAe;gBAClBN,QAAQC,GAAG,CAAC,CAAC,YAAY,EAAEI,WAAWZ,EAAE,CAAC,+BAA+B,CAAC;gBAEzE,8CAA8C;gBAC9C,MAAMe,IAAAA,0CAAkB,EAAC;oBACvBD,QAAQF,WAAWZ,EAAE;oBACrBgB,MAAM;oBACNC,OAAO;oBACPC,SAAS;oBACTC,MAAM;wBACJvB;wBACAwB,QAAQvB,QAAQwB,gBAAgB,IAAKxB,QAAQyB,UAAU,GAAG;oBAC5D;gBACF;gBAEA,uCAAuC;gBACvC,MAAMnC,OAAOU,OAAO,CAAC0B,MAAM,CAAC;oBAC1BxB,OAAO;wBAAEC,IAAIJ;oBAAU;oBACvBuB,MAAM;wBAAEb,cAAc;oBAAkB;gBAC1C;gBAEA;YACF;YAEA,6CAA6C;YAC7C,IAAI,CAACO,cAAcW,cAAc,IAAI,CAACX,cAAcY,cAAc,EAAE;gBAClElB,QAAQC,GAAG,CAAC,CAAC,YAAY,EAAEI,WAAWZ,EAAE,CAAC,mCAAmC,CAAC;gBAE7E,mDAAmD;gBACnD,MAAMe,IAAAA,0CAAkB,EAAC;oBACvBD,QAAQF,WAAWZ,EAAE;oBACrBgB,MAAM;oBACNC,OAAO;oBACPC,SAAS;oBACTC,MAAM;wBACJvB;wBACAwB,QAAQvB,QAAQwB,gBAAgB,IAAKxB,QAAQyB,UAAU,GAAG;oBAC5D;gBACF;gBAEA,uCAAuC;gBACvC,MAAMnC,OAAOU,OAAO,CAAC0B,MAAM,CAAC;oBAC1BxB,OAAO;wBAAEC,IAAIJ;oBAAU;oBACvBuB,MAAM;wBAAEb,cAAc;oBAAkB;gBAC1C;gBAEA;YACF;YAEA,iDAAiD;YACjD,MAAM,EAAEe,gBAAgB,EAAEK,iBAAiB,EAAEC,cAAc,EAAE,GAC3D,MAAMC,IAAAA,uCAAsB,EAAC/B,QAAQyB,UAAU,EAAEV,WAAWZ,EAAE;YAEhE,MAAM6B,eAAehC,QAAQwB,gBAAgB,IAAIA;YACjD,MAAMS,sBAAsBC,KAAKC,KAAK,CAACH,eAAe;YAEtD,+BAA+B;YAC/B,MAAM1C,OAAOU,OAAO,CAAC0B,MAAM,CAAC;gBAC1BxB,OAAO;oBAAEC,IAAIJ;gBAAU;gBACvBuB,MAAM;oBAAEb,cAAc;gBAAa;YACrC;YAEA,IAAI;gBACF,6CAA6C;gBAC7C,MAAM2B,WAAW,MAAM5C,OAAO6C,SAAS,CAACC,MAAM,CAAC;oBAC7Cf,QAAQU;oBACRM,UAAU;oBACVC,aAAaxB,cAAcyB,eAAe;oBAC1CC,gBAAgB,CAAC,QAAQ,EAAE3C,WAAW;oBACtC4C,UAAU;wBACR5C;wBACA6C,SAASvC,MAAMF,EAAE;wBACjB0C,cAAc9B,WAAWZ,EAAE;wBAC3BgB,MAAM;oBACR;oBACA2B,aAAa,CAAC,mBAAmB,EAAE/C,UAAU,GAAG,EAAEM,MAAM0C,IAAI,EAAE;gBAChE;gBAEA,mCAAmC;gBACnC,MAAMC,SAAS,MAAM1D,OAAO0D,MAAM,CAACV,MAAM,CAAC;oBACxChB,MAAM;wBACJmB,iBAAiBzB,cAAcb,EAAE;wBACjC8C,gBAAgBb,SAASjC,EAAE;wBAC3BoB,QAAQS;wBACRO,UAAU;wBACV1B,QAAQ;wBACRqC,QAAQ;wBACRJ,aAAa,CAAC,mBAAmB,EAAE/C,WAAW;wBAC9CoD,YAAY;4BAACpD;yBAAU;wBACvBqD,aAAa,IAAIC,OAAO,wDAAwD;oBAClF;gBACF;gBAEA,4DAA4D;gBAC5D,MAAM/D,OAAOU,OAAO,CAAC0B,MAAM,CAAC;oBAC1BxB,OAAO;wBAAEC,IAAIJ;oBAAU;oBACvBuB,MAAM;wBACJb,cAAc;wBACd6C,UAAUN,OAAO7C,EAAE;wBACnBqB,kBAAkBQ;wBAClBH,mBAAmBA;oBACrB;gBACF;gBAEA,mCAAmC;gBACnC,MAAMX,IAAAA,0CAAkB,EAAC;oBACvBD,QAAQF,WAAWZ,EAAE;oBACrBgB,MAAM;oBACNC,OAAO;oBACPC,SAAS,CAAC,CAAC,EAAEW,aAAauB,OAAO,CAAC,GAAG,0CAA0C,EAAElD,MAAM0C,IAAI,CAAC,SAAS,CAAC;oBACtGzB,MAAM;wBACJvB;wBACAuD,UAAUN,OAAO7C,EAAE;wBACnBoB,QAAQS;wBACRwB,WAAWnD,MAAM0C,IAAI;wBACrBU,cAAczD,QAAQO,IAAI,CAACwC,IAAI,IAAI/C,QAAQO,IAAI,CAACmD,KAAK;oBACvD;gBACF;gBAEAhD,QAAQC,GAAG,CAAC,CAAC,0CAA0C,EAAEZ,UAAU,GAAG,EAAEiC,cAAc;gBAEtF,OAAOgB;YAET,EAAE,OAAOW,aAAkB;gBACzBjD,QAAQkD,KAAK,CAAC,0BAA0BD;gBAExC,kCAAkC;gBAClC,MAAMrE,OAAOU,OAAO,CAAC0B,MAAM,CAAC;oBAC1BxB,OAAO;wBAAEC,IAAIJ;oBAAU;oBACvBuB,MAAM;wBAAEb,cAAc;oBAAS;gBACjC;gBAEA,mCAAmC;gBACnC,MAAMoD,aAAa,MAAMvE,OAAOiB,IAAI,CAACuD,QAAQ,CAAC;oBAC5C5D,OAAO;wBAAE6D,MAAM;oBAAQ;gBACzB;gBAEA,KAAK,MAAMC,SAASH,WAAY;oBAC9B,MAAM3C,IAAAA,0CAAkB,EAAC;wBACvBD,QAAQ+C,MAAM7D,EAAE;wBAChBgB,MAAM;wBACNC,OAAO;wBACPC,SAAS,CAAC,qCAAqC,EAAEtB,UAAU,SAAS,EAAE4D,YAAYtC,OAAO,EAAE;wBAC3FC,MAAM;4BACJvB;4BACA8C,cAAc9B,WAAWZ,EAAE;4BAC3ByD,OAAOD,YAAYtC,OAAO;wBAC5B;oBACF;gBACF;gBAEA,MAAMsC;YACR;QACF,EAAE,OAAOC,OAAO;YACdlD,QAAQkD,KAAK,CAAC,4BAA4BA;YAC1C,MAAMA;QACR;IACF;IAEA;;GAEC,GACD,MAAMK,sBAAsBhD,MAAc,EAAE;QAC1C,IAAI;YACF,yDAAyD;YACzD,MAAMiD,aAAa,MAAM5E,OAAOe,KAAK,CAACyD,QAAQ,CAAC;gBAC7C5D,OAAO;oBAAEiE,SAASlD;gBAAO;gBACzBmD,QAAQ;oBAAEjE,IAAI;gBAAK;YACrB;YAEA,MAAMkE,WAAWH,WAAWI,GAAG,CAACC,CAAAA,IAAKA,EAAEpE,EAAE;YAEzC,MAAMqE,kBAAkB,MAAMlF,OAAOU,OAAO,CAAC8D,QAAQ,CAAC;gBACpD5D,OAAO;oBACL0C,SAAS;wBAAE6B,IAAIJ;oBAAS;oBACxBxD,QAAQ;oBACRC,eAAe;oBACfL,cAAc;wBAAEgE,IAAI;4BAAC;4BAAW;yBAAkB;oBAAC;gBACrD;YACF;YAEA/D,QAAQC,GAAG,CAAC,CAAC,WAAW,EAAE6D,gBAAgBE,MAAM,CAAC,0BAA0B,EAAEzD,QAAQ;YAErF,MAAM0D,UAAU,EAAE;YAClB,KAAK,MAAM3E,WAAWwE,gBAAiB;gBACrC,IAAI;oBACF,MAAMxB,SAAS,MAAM,IAAI,CAAClD,oBAAoB,CAACE,QAAQG,EAAE;oBACzDwE,QAAQC,IAAI,CAAC;wBAAE7E,WAAWC,QAAQG,EAAE;wBAAE0E,SAAS;wBAAM7B;oBAAO;gBAC9D,EAAE,OAAOY,OAAO;oBACdlD,QAAQkD,KAAK,CAAC,CAAC,qCAAqC,EAAE5D,QAAQG,EAAE,CAAC,CAAC,CAAC,EAAEyD;oBACrEe,QAAQC,IAAI,CAAC;wBAAE7E,WAAWC,QAAQG,EAAE;wBAAE0E,SAAS;wBAAOjB;oBAAM;gBAC9D;YACF;YAEA,OAAOe;QACT,EAAE,OAAOf,OAAO;YACdlD,QAAQkD,KAAK,CAAC,qCAAqCA;YACnD,MAAMA;QACR;IACF;IAEA;;GAEC,GACD,MAAMkB,iBAAiB7D,MAAc,EAAE8D,OAAO,CAAC,EAAEC,QAAQ,EAAE,EAAE;QAC3D,IAAI;YACF,mCAAmC;YACnC,MAAMhE,gBAAgB,MAAM1B,OAAO0B,aAAa,CAACf,UAAU,CAAC;gBAC1DC,OAAO;oBAAEe;gBAAO;YAClB;YAEA,IAAI,CAACD,eAAe;gBAClB,OAAO;oBACLiE,SAAS,EAAE;oBACXC,OAAO;oBACPH;oBACAC;oBACAG,YAAY;gBACd;YACF;YAEA,MAAMC,OAAO,AAACL,CAAAA,OAAO,CAAA,IAAKC;YAE1B,MAAM,CAACC,SAASC,MAAM,GAAG,MAAMG,QAAQC,GAAG,CAAC;gBACzChG,OAAO0D,MAAM,CAACc,QAAQ,CAAC;oBACrB5D,OAAO;wBAAEuC,iBAAiBzB,cAAcb,EAAE;oBAAC;oBAC3CoF,SAAS;wBAAEC,WAAW;oBAAO;oBAC7BJ;oBACAK,MAAMT;gBACR;gBACA1F,OAAO0D,MAAM,CAAC0C,KAAK,CAAC;oBAClBxF,OAAO;wBAAEuC,iBAAiBzB,cAAcb,EAAE;oBAAC;gBAC7C;aACD;YAED,uCAAuC;YACvC,MAAMwF,kBAAkB,MAAMN,QAAQC,GAAG,CACvCL,QAAQX,GAAG,CAAC,OAAOtB;gBACjB,MAAM4C,WAAW,MAAMtG,OAAOU,OAAO,CAAC8D,QAAQ,CAAC;oBAC7C5D,OAAO;wBAAEC,IAAI;4BAAEsE,IAAIzB,OAAOG,UAAU;wBAAC;oBAAE;oBACvC/C,SAAS;wBACPC,OAAO;4BAAE+D,QAAQ;gCAAErB,MAAM;4BAAK;wBAAE;wBAChCxC,MAAM;4BAAE6D,QAAQ;gCAAErB,MAAM;gCAAMW,OAAO;4BAAK;wBAAE;oBAC9C;gBACF;gBAEA,OAAO;oBACL,GAAGV,MAAM;oBACT4C,UAAUA,SAAStB,GAAG,CAACuB,CAAAA,IAAM,CAAA;4BAC3B1F,IAAI0F,EAAE1F,EAAE;4BACRqD,WAAWqC,EAAExF,KAAK,CAAC0C,IAAI;4BACvBU,cAAcoC,EAAEtF,IAAI,CAACwC,IAAI,IAAI8C,EAAEtF,IAAI,CAACmD,KAAK;4BACzCoC,MAAMD,EAAEC,IAAI;4BACZvE,QAAQsE,EAAErE,gBAAgB,IAAIqE,EAAEpE,UAAU,GAAG;wBAC/C,CAAA;gBACF;YACF;YAGF,OAAO;gBACLwD,SAASU;gBACTT;gBACAH;gBACAC;gBACAG,YAAYjD,KAAK6D,IAAI,CAACb,QAAQF;YAChC;QACF,EAAE,OAAOpB,OAAO;YACdlD,QAAQkD,KAAK,CAAC,kCAAkCA;YAChD,MAAMA;QACR;IACF;AACF;AAEO,MAAMvE,gBAAgB,IAAID"}