{"version":3,"sources":["../../../src/services/refund.service.ts"],"sourcesContent":["import { stripe } from '../config/stripe.config';\nimport prisma from '../config/database';\nimport { createNotification } from '../controllers/notification.controller';\n\nexport class RefundService {\n  /**\n   * Get cancellation window hours from system settings\n   */\n  private async getCancellationWindowHours(): Promise<number> {\n    const settings = await prisma.systemSettings.findFirst();\n    return settings?.cancellationWindowHours || 24; // Default to 24 hours if not set\n  }\n\n  /**\n   * Process immediate refund for cancelled booking\n   */\n  async processRefund(bookingId: string, reason: string = 'requested_by_customer'): Promise<any> {\n    try {\n      // Get cancellation window from settings\n      const cancellationWindowHours = await this.getCancellationWindowHours();\n      // Get booking with payment details\n      const booking = await prisma.booking.findUnique({\n        where: { id: bookingId },\n        include: {\n          payment: true,\n          user: true,\n          field: {\n            include: {\n              owner: true\n            }\n          }\n        }\n      });\n\n      if (!booking) {\n        throw new Error('Booking not found');\n      }\n\n      if (!booking.payment) {\n        throw new Error('No payment found for this booking');\n      }\n\n      // Check if already refunded\n      if (booking.payment.status === 'refunded') {\n        return {\n          success: false,\n          message: 'Booking already refunded'\n        };\n      }\n\n      // Check if payment was successful\n      if (booking.payment.status !== 'completed') {\n        return {\n          success: false,\n          message: 'Cannot refund incomplete payment'\n        };\n      }\n\n      // Calculate refund amount based on cancellation timing\n      const bookingDate = new Date(booking.date);\n      const bookingTime = booking.startTime.split(':');\n      bookingDate.setHours(parseInt(bookingTime[0]), parseInt(bookingTime[1]));\n      \n      const now = new Date();\n      const hoursUntilBooking = (bookingDate.getTime() - now.getTime()) / (1000 * 60 * 60);\n      \n      let refundAmount = 0;\n      let refundPercentage = 0;\n      \n      if (hoursUntilBooking >= cancellationWindowHours) {\n        // Full refund if cancelled at least cancellationWindowHours before\n        refundAmount = booking.payment.amount;\n        refundPercentage = 100;\n      } else if (hoursUntilBooking >= cancellationWindowHours / 2) {\n        // 50% refund if cancelled between half and full cancellation window\n        refundAmount = booking.payment.amount * 0.5;\n        refundPercentage = 50;\n      } else {\n        // No refund if cancelled less than half the cancellation window\n        refundAmount = 0;\n        refundPercentage = 0;\n      }\n\n      // Process refund through Stripe if amount > 0\n      let stripeRefund = null;\n      if (refundAmount > 0 && booking.payment.stripePaymentId) {\n        try {\n          // Create refund in Stripe\n          stripeRefund = await stripe.refunds.create({\n            payment_intent: booking.payment.stripePaymentId,\n            amount: Math.round(refundAmount * 100), // Convert to cents\n            reason: reason as any,\n            metadata: {\n              bookingId: booking.id,\n              userId: booking.userId,\n              fieldId: booking.fieldId\n            }\n          });\n\n          // Update payment record\n          await prisma.payment.update({\n            where: { id: booking.payment.id },\n            data: {\n              status: 'refunded',\n              stripeRefundId: stripeRefund.id,\n              refundAmount: refundAmount,\n              refundReason: reason,\n              processedAt: new Date()\n            }\n          });\n\n          // Create transaction record for refund\n          await prisma.transaction.create({\n            data: {\n              bookingId: booking.id,\n              userId: booking.userId,\n              amount: -refundAmount, // Negative amount for refund\n              type: 'REFUND',\n              status: 'COMPLETED',\n              stripeRefundId: stripeRefund.id,\n              description: `Refund for booking cancellation (${refundPercentage}%)`\n            }\n          });\n\n          // Send refund notification to user\n          await createNotification({\n            userId: booking.userId,\n            type: 'refund_processed',\n            title: 'Refund Processed',\n            message: `Your refund of $${refundAmount.toFixed(2)} for ${booking.field.name} has been processed. It will appear in your account within 5-7 business days.`,\n            data: {\n              bookingId: booking.id,\n              refundAmount,\n              refundPercentage,\n              stripeRefundId: stripeRefund.id\n            }\n          });\n\n          // If partial refund, transfer remaining amount to field owner immediately\n          if (refundPercentage < 100) {\n            await this.processFieldOwnerPayout(booking, refundAmount);\n          }\n\n          return {\n            success: true,\n            refundAmount,\n            refundPercentage,\n            stripeRefundId: stripeRefund.id,\n            message: `Refund of $${refundAmount.toFixed(2)} processed successfully`\n          };\n        } catch (stripeError: any) {\n          console.error('Stripe refund error:', stripeError);\n          throw new Error(`Failed to process refund: ${stripeError.message}`);\n        }\n      } else {\n        // No refund but transfer full amount to field owner\n        await this.processFieldOwnerPayout(booking, 0);\n        \n        return {\n          success: true,\n          refundAmount: 0,\n          refundPercentage: 0,\n          message: 'No refund eligible, full amount will be transferred to field owner'\n        };\n      }\n    } catch (error: any) {\n      console.error('Refund processing error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Process payout to field owner after cancellation period\n   */\n  async processFieldOwnerPayout(booking: any, refundedAmount: number): Promise<void> {\n    try {\n      const totalAmount = booking.payment.amount;\n      const fieldOwnerShare = totalAmount - refundedAmount;\n      \n      // Calculate platform commission (20%)\n      const platformCommission = fieldOwnerShare * 0.2;\n      const netPayoutAmount = fieldOwnerShare - platformCommission;\n\n      if (netPayoutAmount <= 0) {\n        return; // No payout if amount is 0 or negative\n      }\n\n      // Check if field owner has Stripe Connect account\n      const stripeAccount = await prisma.stripeAccount.findUnique({\n        where: { userId: booking.field.ownerId }\n      });\n\n      if (!stripeAccount || !stripeAccount.payoutsEnabled) {\n        // Queue payout for later when account is ready\n        await prisma.payout.create({\n          data: {\n            stripeAccountId: stripeAccount?.id || '',\n            amount: netPayoutAmount,\n            currency: 'usd',\n            status: 'pending',\n            description: `Payout for cancelled booking ${booking.id}`,\n            bookingIds: [booking.id]\n          }\n        });\n\n        await createNotification({\n          userId: booking.field.ownerId,\n          type: 'payout_pending',\n          title: 'Payout Pending',\n          message: `A payout of $${netPayoutAmount.toFixed(2)} is pending. Please complete your Stripe account setup to receive payments.`,\n          data: {\n            bookingId: booking.id,\n            amount: netPayoutAmount\n          }\n        });\n        \n        return;\n      }\n\n      // Create transfer to connected account\n      try {\n        const transfer = await stripe.transfers.create({\n          amount: Math.round(netPayoutAmount * 100), // Convert to cents\n          currency: 'usd',\n          destination: stripeAccount.stripeAccountId,\n          description: `Payout for booking ${booking.id}`,\n          metadata: {\n            bookingId: booking.id,\n            fieldId: booking.fieldId,\n            platformCommission: platformCommission.toString(),\n            refundedAmount: refundedAmount.toString()\n          }\n        });\n\n        // Create payout record\n        const payout = await prisma.payout.create({\n          data: {\n            stripeAccountId: stripeAccount.id,\n            stripePayoutId: transfer.id,\n            amount: netPayoutAmount,\n            currency: 'usd',\n            status: 'paid',\n            description: `Payout for booking ${booking.id}`,\n            bookingIds: [booking.id],\n            arrivalDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000) // 2 days from now\n          }\n        });\n\n        // Update booking with payout reference\n        await prisma.booking.update({\n          where: { id: booking.id },\n          data: {\n            payoutStatus: 'COMPLETED',\n            payoutId: payout.id\n          }\n        });\n\n        // Send notification to field owner\n        await createNotification({\n          userId: booking.field.ownerId,\n          type: 'payout_processed',\n          title: 'Payout Processed',\n          message: `A payout of $${netPayoutAmount.toFixed(2)} has been sent to your account for the cancelled booking.`,\n          data: {\n            bookingId: booking.id,\n            payoutId: payout.id,\n            amount: netPayoutAmount,\n            arrivalDate: payout.arrivalDate\n          }\n        });\n      } catch (transferError: any) {\n        console.error('Transfer error:', transferError);\n        \n        // Queue payout for retry\n        await prisma.payout.create({\n          data: {\n            stripeAccountId: stripeAccount.id,\n            amount: netPayoutAmount,\n            currency: 'usd',\n            status: 'failed',\n            description: `Failed payout for booking ${booking.id}`,\n            bookingIds: [booking.id],\n            failureCode: transferError.code,\n            failureMessage: transferError.message\n          }\n        });\n        \n        throw transferError;\n      }\n    } catch (error) {\n      console.error('Field owner payout error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Process payouts for completed bookings after cancellation period expires\n   */\n  async processCompletedBookingPayouts(): Promise<void> {\n    try {\n      // Find all completed bookings that are past their cancellation period (24 hours after completion)\n      const eligibleBookings = await prisma.booking.findMany({\n        where: {\n          status: 'COMPLETED',\n          payoutStatus: null, // Not yet processed for payout\n          createdAt: {\n            lte: new Date(Date.now() - 24 * 60 * 60 * 1000) // At least 24 hours old\n          }\n        },\n        include: {\n          payment: true,\n          field: {\n            include: {\n              owner: true\n            }\n          }\n        }\n      });\n\n      for (const booking of eligibleBookings) {\n        if (!booking.payment || booking.payment.status !== 'completed') {\n          continue; // Skip if no valid payment\n        }\n\n        // Process payout for this booking\n        await this.processFieldOwnerPayout(booking, 0);\n        \n        // Mark booking as processed\n        await prisma.booking.update({\n          where: { id: booking.id },\n          data: {\n            payoutStatus: 'PROCESSING'\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Batch payout processing error:', error);\n      throw error;\n    }\n  }\n}\n\nexport default new RefundService();"],"names":["RefundService","getCancellationWindowHours","settings","prisma","systemSettings","findFirst","cancellationWindowHours","processRefund","bookingId","reason","booking","findUnique","where","id","include","payment","user","field","owner","Error","status","success","message","bookingDate","Date","date","bookingTime","startTime","split","setHours","parseInt","now","hoursUntilBooking","getTime","refundAmount","refundPercentage","amount","stripeRefund","stripePaymentId","stripe","refunds","create","payment_intent","Math","round","metadata","userId","fieldId","update","data","stripeRefundId","refundReason","processedAt","transaction","type","description","createNotification","title","toFixed","name","processFieldOwnerPayout","stripeError","console","error","refundedAmount","totalAmount","fieldOwnerShare","platformCommission","netPayoutAmount","stripeAccount","ownerId","payoutsEnabled","payout","stripeAccountId","currency","bookingIds","transfer","transfers","destination","toString","stripePayoutId","arrivalDate","payoutStatus","payoutId","transferError","failureCode","code","failureMessage","processCompletedBookingPayouts","eligibleBookings","findMany","createdAt","lte"],"mappings":"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"}