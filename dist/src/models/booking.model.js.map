{"version":3,"sources":["../../../src/models/booking.model.ts"],"sourcesContent":["import { PrismaClient, Booking, BookingStatus, Prisma } from '@prisma/client';\nimport prisma from '../config/database';\n\ninterface CreateBookingInput {\n  dogOwnerId: string;\n  fieldId: string;\n  date: Date;\n  startTime: string;\n  endTime: string;\n  timeSlot?: string;\n  totalPrice: number;\n  numberOfDogs?: number;\n  notes?: string;\n}\n\ninterface BookingFilters {\n  dogOwnerId?: string;\n  fieldId?: string;\n  status?: BookingStatus;\n  date?: Date;\n  startDate?: Date;\n  endDate?: Date;\n  skip?: number;\n  take?: number;\n}\n\nclass BookingModel {\n  // Create a new booking\n  async create(data: CreateBookingInput): Promise<Booking> {\n    const { dogOwnerId, ...rest } = data;\n    return prisma.booking.create({\n      data: {\n        ...rest,\n        userId: dogOwnerId,\n        status: 'PENDING',\n      },\n      include: {\n        field: {\n          include: {\n            owner: {\n              select: {\n                id: true,\n                name: true,\n                email: true,\n              },\n            },\n          },\n        },\n        user: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n            phone: true,\n          },\n        },\n      },\n    });\n  }\n\n  // Find booking by ID\n  async findById(id: string): Promise<Booking | null> {\n    return prisma.booking.findUnique({\n      where: { id },\n      include: {\n        field: {\n          include: {\n            owner: {\n              select: {\n                id: true,\n                name: true,\n                email: true,\n              },\n            },\n          },\n        },\n        user: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n            phone: true,\n          },\n        },\n      },\n    });\n  }\n\n  // Find all bookings with filters\n  async findAll(filters: BookingFilters = {}): Promise<Booking[]> {\n    const where: Prisma.BookingWhereInput = {};\n\n    if (filters.dogOwnerId) {\n      where.userId = filters.dogOwnerId;\n    }\n\n    if (filters.fieldId) {\n      where.fieldId = filters.fieldId;\n    }\n\n    if (filters.status) {\n      where.status = filters.status;\n    }\n\n    if (filters.date) {\n      const startOfDay = new Date(filters.date);\n      startOfDay.setHours(0, 0, 0, 0);\n      const endOfDay = new Date(filters.date);\n      endOfDay.setHours(23, 59, 59, 999);\n\n      where.date = {\n        gte: startOfDay,\n        lte: endOfDay,\n      };\n    }\n\n    if (filters.startDate && filters.endDate) {\n      where.date = {\n        gte: filters.startDate,\n        lte: filters.endDate,\n      };\n    }\n\n    return prisma.booking.findMany({\n      where,\n      skip: filters.skip,\n      take: filters.take,\n      orderBy: {\n        date: 'desc',\n      },\n      include: {\n        field: {\n          include: {\n            owner: {\n              select: {\n                id: true,\n                name: true,\n                email: true,\n              },\n            },\n          },\n        },\n        user: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n            phone: true,\n          },\n        },\n      },\n    });\n  }\n\n  // Find bookings by dog owner\n  async findByDogOwner(dogOwnerId: string): Promise<Booking[]> {\n    return this.findAll({ dogOwnerId });\n  }\n\n  // Find bookings by field\n  async findByField(fieldId: string): Promise<Booking[]> {\n    return this.findAll({ fieldId });\n  }\n\n  // Find bookings by field owner\n  async findByFieldOwner(ownerId: string): Promise<Booking[]> {\n    return prisma.booking.findMany({\n      where: {\n        field: {\n          ownerId,\n        },\n      },\n      orderBy: {\n        date: 'desc',\n      },\n      include: {\n        field: true,\n        user: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n            phone: true,\n          },\n        },\n      },\n    });\n  }\n\n  // Update booking status\n  async updateStatus(id: string, status: BookingStatus): Promise<Booking> {\n    return prisma.booking.update({\n      where: { id },\n      data: { status },\n      include: {\n        field: true,\n        user: true,\n      },\n    });\n  }\n\n  // Update booking\n  async update(id: string, data: Partial<CreateBookingInput>): Promise<Booking> {\n    return prisma.booking.update({\n      where: { id },\n      data,\n      include: {\n        field: true,\n        user: true,\n      },\n    });\n  }\n\n  // Cancel booking\n  async cancel(id: string, reason?: string): Promise<Booking> {\n    return prisma.booking.update({\n      where: { id },\n      data: {\n        status: 'CANCELLED',\n        cancellationReason: reason,\n        cancelledAt: new Date(),\n      },\n      include: {\n        field: {\n          include: {\n            owner: {\n              select: {\n                id: true,\n                name: true,\n                email: true,\n              },\n            },\n          },\n        },\n        user: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n            phone: true,\n          },\n        },\n      },\n    });\n  }\n\n  // Complete booking\n  async complete(id: string): Promise<Booking> {\n    return this.updateStatus(id, 'COMPLETED');\n  }\n\n  // Delete booking\n  async delete(id: string): Promise<void> {\n    await prisma.booking.delete({\n      where: { id },\n    });\n  }\n\n  // Check availability for a field on a specific date and time\n  async checkAvailability(\n    fieldId: string,\n    date: Date,\n    startTime: string,\n    endTime: string,\n    excludeBookingId?: string\n  ): Promise<boolean> {\n    const where: Prisma.BookingWhereInput = {\n      fieldId,\n      date,\n      status: {\n        notIn: ['CANCELLED', 'COMPLETED'],\n      },\n    };\n\n    if (excludeBookingId) {\n      where.id = {\n        not: excludeBookingId,\n      };\n    }\n\n    const conflictingBookings = await prisma.booking.findMany({\n      where,\n    });\n\n    // Check for time conflicts\n    for (const booking of conflictingBookings) {\n      const bookingStart = this.timeToMinutes(booking.startTime);\n      const bookingEnd = this.timeToMinutes(booking.endTime);\n      const requestedStart = this.timeToMinutes(startTime);\n      const requestedEnd = this.timeToMinutes(endTime);\n\n      // Check if times overlap\n      if (\n        (requestedStart >= bookingStart && requestedStart < bookingEnd) ||\n        (requestedEnd > bookingStart && requestedEnd <= bookingEnd) ||\n        (requestedStart <= bookingStart && requestedEnd >= bookingEnd)\n      ) {\n        return false; // Time conflict found\n      }\n    }\n\n    return true; // No conflicts\n  }\n\n  // Helper function to convert time string to minutes\n  private timeToMinutes(time: string): number {\n    const [hours, minutes] = time.split(':').map(Number);\n    return hours * 60 + minutes;\n  }\n\n  // Get booking statistics for a field owner\n  async getFieldOwnerStats(ownerId: string) {\n    const bookings = await this.findByFieldOwner(ownerId);\n    \n    const stats = {\n      total: bookings.length,\n      pending: bookings.filter(b => b.status === 'PENDING').length,\n      confirmed: bookings.filter(b => b.status === 'CONFIRMED').length,\n      completed: bookings.filter(b => b.status === 'COMPLETED').length,\n      cancelled: bookings.filter(b => b.status === 'CANCELLED').length,\n      totalRevenue: bookings\n        .filter(b => b.status === 'COMPLETED')\n        .reduce((sum, b) => sum + b.totalPrice, 0),\n    };\n\n    return stats;\n  }\n\n  // Get booking statistics for a dog owner\n  async getDogOwnerStats(dogOwnerId: string) {\n    const bookings = await this.findByDogOwner(dogOwnerId);\n    \n    const stats = {\n      total: bookings.length,\n      upcoming: bookings.filter(b => \n        b.status === 'CONFIRMED' && new Date(b.date) >= new Date()\n      ).length,\n      completed: bookings.filter(b => b.status === 'COMPLETED').length,\n      cancelled: bookings.filter(b => b.status === 'CANCELLED').length,\n      totalSpent: bookings\n        .filter(b => b.status === 'COMPLETED')\n        .reduce((sum, b) => sum + b.totalPrice, 0),\n    };\n\n    return stats;\n  }\n}\n\nexport default new BookingModel();"],"names":["BookingModel","create","data","dogOwnerId","rest","prisma","booking","userId","status","include","field","owner","select","id","name","email","user","phone","findById","findUnique","where","findAll","filters","fieldId","date","startOfDay","Date","setHours","endOfDay","gte","lte","startDate","endDate","findMany","skip","take","orderBy","findByDogOwner","findByField","findByFieldOwner","ownerId","updateStatus","update","cancel","reason","cancellationReason","cancelledAt","complete","delete","checkAvailability","startTime","endTime","excludeBookingId","notIn","not","conflictingBookings","bookingStart","timeToMinutes","bookingEnd","requestedStart","requestedEnd","time","hours","minutes","split","map","Number","getFieldOwnerStats","bookings","stats","total","length","pending","filter","b","confirmed","completed","cancelled","totalRevenue","reduce","sum","totalPrice","getDogOwnerStats","upcoming","totalSpent"],"mappings":"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"}