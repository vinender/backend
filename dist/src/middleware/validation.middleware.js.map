{"version":3,"sources":["../../../src/middleware/validation.middleware.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { AnyZodObject, ZodError } from 'zod';\nimport { AppError } from '../utils/AppError';\n\n/**\n * Middleware to validate request body using Zod schemas\n */\nexport const validateRequest = (schema: AnyZodObject) => {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      await schema.parseAsync({\n        body: req.body,\n        query: req.query,\n        params: req.params,\n      });\n      next();\n    } catch (error) {\n      if (error instanceof ZodError) {\n        const errorMessages = error.errors.map((issue: any) => ({\n          field: issue.path.join('.'),\n          message: issue.message,\n        }));\n        \n        res.status(400).json({\n          success: false,\n          status: 'fail',\n          message: 'Validation error',\n          errors: errorMessages,\n        });\n      } else {\n        next(error);\n      }\n    }\n  };\n};"],"names":["validateRequest","schema","req","res","next","parseAsync","body","query","params","error","ZodError","errorMessages","errors","map","issue","field","path","join","message","status","json","success"],"mappings":";;;;+BAOaA;;;eAAAA;;;qBAN0B;AAMhC,MAAMA,kBAAkB,CAACC;IAC9B,OAAO,OAAOC,KAAcC,KAAeC;QACzC,IAAI;YACF,MAAMH,OAAOI,UAAU,CAAC;gBACtBC,MAAMJ,IAAII,IAAI;gBACdC,OAAOL,IAAIK,KAAK;gBAChBC,QAAQN,IAAIM,MAAM;YACpB;YACAJ;QACF,EAAE,OAAOK,OAAO;YACd,IAAIA,iBAAiBC,aAAQ,EAAE;gBAC7B,MAAMC,gBAAgBF,MAAMG,MAAM,CAACC,GAAG,CAAC,CAACC,QAAgB,CAAA;wBACtDC,OAAOD,MAAME,IAAI,CAACC,IAAI,CAAC;wBACvBC,SAASJ,MAAMI,OAAO;oBACxB,CAAA;gBAEAf,IAAIgB,MAAM,CAAC,KAAKC,IAAI,CAAC;oBACnBC,SAAS;oBACTF,QAAQ;oBACRD,SAAS;oBACTN,QAAQD;gBACV;YACF,OAAO;gBACLP,KAAKK;YACP;QACF;IACF;AACF"}