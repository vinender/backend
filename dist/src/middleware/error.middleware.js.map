{"version":3,"sources":["../../../src/middleware/error.middleware.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { AppError } from '../utils/AppError';\n\n/**\n * Global error handling middleware\n */\nexport const errorHandler = (\n  err: Error | AppError,\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  let error = { ...err } as any;\n  error.message = err.message;\n\n  // Log error to console in development\n  if (process.env.NODE_ENV === 'development') {\n    console.error('ERROR ðŸ’¥', err);\n  }\n\n  // Mongoose bad ObjectId\n  if (err.name === 'CastError') {\n    const message = 'Invalid ID format';\n    error = new AppError(message, 400);\n  }\n\n  // Mongoose duplicate key\n  if ((err as any).code === 11000) {\n    const value = (err as any).errmsg.match(/([\"'])(\\\\?.)*?\\1/)[0];\n    const message = `Duplicate field value: ${value}. Please use another value!`;\n    error = new AppError(message, 400);\n  }\n\n  // Mongoose validation error\n  if (err.name === 'ValidationError') {\n    const errors = Object.values((err as any).errors).map((el: any) => el.message);\n    const message = `Invalid input data. ${errors.join('. ')}`;\n    error = new AppError(message, 400);\n  }\n\n  // JWT errors\n  if (err.name === 'JsonWebTokenError') {\n    error = new AppError('Invalid token. Please log in again!', 401);\n  }\n\n  if (err.name === 'TokenExpiredError') {\n    error = new AppError('Your token has expired! Please log in again.', 401);\n  }\n\n  // Send error response\n  const statusCode = error.statusCode || 500;\n  const status = error.status || 'error';\n\n  res.status(statusCode).json({\n    success: false,\n    status,\n    message: error.message || 'Internal Server Error',\n    ...(process.env.NODE_ENV === 'development' && {\n      error: err,\n      stack: err.stack,\n    }),\n  });\n};\n\n/**\n * Handle 404 errors\n */\nexport const notFound = (req: Request, res: Response, next: NextFunction) => {\n  const error = new AppError(`Route ${req.originalUrl} not found`, 404);\n  next(error);\n};"],"names":["errorHandler","notFound","err","req","res","next","error","message","process","env","NODE_ENV","console","name","AppError","code","value","errmsg","match","errors","Object","values","map","el","join","statusCode","status","json","success","stack","originalUrl"],"mappings":";;;;;;;;;;;QAMaA;eAAAA;;QA6DAC;eAAAA;;;0BAlEY;AAKlB,MAAMD,eAAe,CAC1BE,KACAC,KACAC,KACAC;IAEA,IAAIC,QAAQ;QAAE,GAAGJ,GAAG;IAAC;IACrBI,MAAMC,OAAO,GAAGL,IAAIK,OAAO;IAE3B,sCAAsC;IACtC,IAAIC,QAAQC,GAAG,CAACC,QAAQ,KAAK,eAAe;QAC1CC,QAAQL,KAAK,CAAC,YAAYJ;IAC5B;IAEA,wBAAwB;IACxB,IAAIA,IAAIU,IAAI,KAAK,aAAa;QAC5B,MAAML,UAAU;QAChBD,QAAQ,IAAIO,kBAAQ,CAACN,SAAS;IAChC;IAEA,yBAAyB;IACzB,IAAI,AAACL,IAAYY,IAAI,KAAK,OAAO;QAC/B,MAAMC,QAAQ,AAACb,IAAYc,MAAM,CAACC,KAAK,CAAC,mBAAmB,CAAC,EAAE;QAC9D,MAAMV,UAAU,CAAC,uBAAuB,EAAEQ,MAAM,2BAA2B,CAAC;QAC5ET,QAAQ,IAAIO,kBAAQ,CAACN,SAAS;IAChC;IAEA,4BAA4B;IAC5B,IAAIL,IAAIU,IAAI,KAAK,mBAAmB;QAClC,MAAMM,SAASC,OAAOC,MAAM,CAAC,AAAClB,IAAYgB,MAAM,EAAEG,GAAG,CAAC,CAACC,KAAYA,GAAGf,OAAO;QAC7E,MAAMA,UAAU,CAAC,oBAAoB,EAAEW,OAAOK,IAAI,CAAC,OAAO;QAC1DjB,QAAQ,IAAIO,kBAAQ,CAACN,SAAS;IAChC;IAEA,aAAa;IACb,IAAIL,IAAIU,IAAI,KAAK,qBAAqB;QACpCN,QAAQ,IAAIO,kBAAQ,CAAC,uCAAuC;IAC9D;IAEA,IAAIX,IAAIU,IAAI,KAAK,qBAAqB;QACpCN,QAAQ,IAAIO,kBAAQ,CAAC,gDAAgD;IACvE;IAEA,sBAAsB;IACtB,MAAMW,aAAalB,MAAMkB,UAAU,IAAI;IACvC,MAAMC,SAASnB,MAAMmB,MAAM,IAAI;IAE/BrB,IAAIqB,MAAM,CAACD,YAAYE,IAAI,CAAC;QAC1BC,SAAS;QACTF;QACAlB,SAASD,MAAMC,OAAO,IAAI;QAC1B,GAAIC,QAAQC,GAAG,CAACC,QAAQ,KAAK,iBAAiB;YAC5CJ,OAAOJ;YACP0B,OAAO1B,IAAI0B,KAAK;QAClB,CAAC;IACH;AACF;AAKO,MAAM3B,WAAW,CAACE,KAAcC,KAAeC;IACpD,MAAMC,QAAQ,IAAIO,kBAAQ,CAAC,CAAC,MAAM,EAAEV,IAAI0B,WAAW,CAAC,UAAU,CAAC,EAAE;IACjExB,KAAKC;AACP"}