{"version":3,"sources":["../../../src/middleware/admin.middleware.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport jwt from 'jsonwebtoken';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nexport const authenticateAdmin = async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const token = req.headers.authorization?.split(' ')[1];\n    \n    if (!token) {\n      return res.status(401).json({ error: 'Authentication required' });\n    }\n\n    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key') as any;\n    const admin = await prisma.user.findUnique({\n      where: { id: decoded.userId }\n    });\n    \n    if (!admin || admin.role !== 'ADMIN') {\n      return res.status(403).json({ error: 'Admin access required' });\n    }\n    \n    (req as any).userId = admin.id;\n    (req as any).admin = admin;\n    next();\n  } catch (error) {\n    return res.status(401).json({ error: 'Invalid token' });\n  }\n};  "],"names":["authenticateAdmin","prisma","PrismaClient","req","res","next","token","headers","authorization","split","status","json","error","decoded","jwt","verify","process","env","JWT_SECRET","admin","user","findUnique","where","id","userId","role"],"mappings":";;;;+BAMaA;;;eAAAA;;;qEALG;wBACa;;;;;;AAE7B,MAAMC,SAAS,IAAIC,oBAAY;AAExB,MAAMF,oBAAoB,OAAOG,KAAcC,KAAeC;IACnE,IAAI;QACF,MAAMC,QAAQH,IAAII,OAAO,CAACC,aAAa,EAAEC,MAAM,IAAI,CAAC,EAAE;QAEtD,IAAI,CAACH,OAAO;YACV,OAAOF,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,OAAO;YAA0B;QACjE;QAEA,MAAMC,UAAUC,qBAAG,CAACC,MAAM,CAACT,OAAOU,QAAQC,GAAG,CAACC,UAAU,IAAI;QAC5D,MAAMC,QAAQ,MAAMlB,OAAOmB,IAAI,CAACC,UAAU,CAAC;YACzCC,OAAO;gBAAEC,IAAIV,QAAQW,MAAM;YAAC;QAC9B;QAEA,IAAI,CAACL,SAASA,MAAMM,IAAI,KAAK,SAAS;YACpC,OAAOrB,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,OAAO;YAAwB;QAC/D;QAECT,IAAYqB,MAAM,GAAGL,MAAMI,EAAE;QAC7BpB,IAAYgB,KAAK,GAAGA;QACrBd;IACF,EAAE,OAAOO,OAAO;QACd,OAAOR,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,OAAO;QAAgB;IACvD;AACF"}