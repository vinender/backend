{"version":3,"sources":["../../../src/utils/websocket.ts"],"sourcesContent":["import { Server } from 'socket.io';\nimport { Server as HTTPServer } from 'http';\nimport jwt from 'jsonwebtoken';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nexport function setupWebSocket(server: HTTPServer) {\n  const io = new Server(server, {\n    cors: {\n      origin: process.env.FRONTEND_URL || 'http://localhost:3000',\n      credentials: true,\n    },\n  });\n\n  // Store io instance globally for use in other modules\n  (global as any).io = io;\n\n  // Authentication middleware\n  io.use(async (socket, next) => {\n    try {\n      const token = socket.handshake.auth.token;\n      \n      if (!token) {\n        return next(new Error('Authentication error'));\n      }\n\n      const decoded = jwt.verify(token, process.env.JWT_SECRET!) as any;\n      console.log('WebSocket Auth - Decoded token:', { \n        id: decoded.id, \n        userId: decoded.userId,\n        email: decoded.email,\n        role: decoded.role \n      });\n      \n      // The token uses 'id' not 'userId'\n      const userId = decoded.id || decoded.userId;\n      \n      const user = await prisma.user.findUnique({\n        where: { id: userId },\n        select: { id: true, role: true, email: true, name: true },\n      });\n\n      if (!user) {\n        return next(new Error('User not found'));\n      }\n\n      // Attach user to socket\n      (socket as any).userId = user.id;\n      (socket as any).userRole = user.role;\n      (socket as any).user = user;\n\n      next();\n    } catch (error) {\n      next(new Error('Authentication error'));\n    }\n  });\n\n  io.on('connection', async (socket) => {\n    const userId = (socket as any).userId;\n    const userRole = (socket as any).userRole;\n    const userEmail = (socket as any).user?.email;\n    \n    console.log('=== WebSocket Connection (websocket.ts) ===');\n    console.log(`User connected:`);\n    console.log(`  - ID (ObjectId): ${userId}`);\n    console.log(`  - Email: ${userEmail}`);\n    console.log(`  - Role: ${userRole}`);\n    console.log(`  - Socket ID: ${socket.id}`);\n\n    // Leave all rooms first (except the socket's own room)\n    const rooms = Array.from(socket.rooms);\n    for (const room of rooms) {\n      if (room !== socket.id) {\n        socket.leave(room);\n      }\n    }\n\n    // Join user-specific room based on ObjectId\n    const userRoom = `user-${userId}`;\n    socket.join(userRoom);\n    console.log(`  - Joined room: ${userRoom}`);\n    \n    // Auto-join all conversation rooms for this user\n    try {\n      const conversations = await prisma.conversation.findMany({\n        where: {\n          participants: {\n            has: userId\n          }\n        },\n        select: { id: true }\n      });\n\n      conversations.forEach(conv => {\n        const convRoom = `conversation:${conv.id}`;\n        socket.join(convRoom);\n        console.log(`  - Auto-joined conversation: ${convRoom}`);\n      });\n      \n      console.log(`  - Total conversations joined: ${conversations.length}`);\n    } catch (error) {\n      console.error('Error auto-joining conversations:', error);\n    }\n    \n    // Verify room membership\n    const roomsAfterJoin = Array.from(socket.rooms);\n    console.log(`  - Socket is in rooms:`, roomsAfterJoin);\n    \n    // Check how many sockets are in this user's room\n    const socketsInRoom = await io.in(userRoom).fetchSockets();\n    console.log(`  - Total sockets in ${userRoom}: ${socketsInRoom.length}`);\n\n    // Send initial unread count\n    sendUnreadCount(userId);\n\n    // Handle disconnect\n    socket.on('disconnect', () => {\n      console.log(`User ${userId} disconnected`);\n    });\n\n    // Handle marking notifications as read\n    socket.on('markAsRead', async (notificationId: string) => {\n      try {\n        await prisma.notification.update({\n          where: { id: notificationId },\n          data: { read: true, readAt: new Date() },\n        });\n        \n        // Send updated unread count\n        sendUnreadCount(userId);\n      } catch (error) {\n        console.error('Error marking notification as read:', error);\n      }\n    });\n\n    // Handle marking all as read\n    socket.on('markAllAsRead', async () => {\n      try {\n        await prisma.notification.updateMany({\n          where: { userId, read: false },\n          data: { read: true, readAt: new Date() },\n        });\n        \n        // Send updated unread count\n        sendUnreadCount(userId);\n      } catch (error) {\n        console.error('Error marking all notifications as read:', error);\n      }\n    });\n  });\n\n  // Helper function to send unread count\n  async function sendUnreadCount(userId: string) {\n    try {\n      const unreadCount = await prisma.notification.count({\n        where: { userId, read: false },\n      });\n      \n      io.to(`user-${userId}`).emit('unreadCount', unreadCount);\n    } catch (error) {\n      console.error('Error sending unread count:', error);\n    }\n  }\n\n  return io;\n}"],"names":["setupWebSocket","prisma","PrismaClient","server","io","Server","cors","origin","process","env","FRONTEND_URL","credentials","global","use","socket","next","token","handshake","auth","Error","decoded","jwt","verify","JWT_SECRET","console","log","id","userId","email","role","user","findUnique","where","select","name","userRole","error","on","userEmail","rooms","Array","from","room","leave","userRoom","join","conversations","conversation","findMany","participants","has","forEach","conv","convRoom","length","roomsAfterJoin","socketsInRoom","in","fetchSockets","sendUnreadCount","notificationId","notification","update","data","read","readAt","Date","updateMany","unreadCount","count","to","emit"],"mappings":"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"}