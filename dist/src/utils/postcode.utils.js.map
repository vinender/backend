{"version":3,"sources":["../../../src/utils/postcode.utils.ts"],"sourcesContent":["/**\n * UK Postcode validation and formatting utilities\n */\n\n/**\n * UK postcode regex patterns\n * Supports formats like: SW1A 1AA, SW1A1AA, W1A 0AX, M1 1AE, B33 8TH, CR2 6XH\n */\nconst UK_POSTCODE_REGEX = /^([A-Z]{1,2}[0-9][0-9A-Z]?)\\s?([0-9][A-Z]{2})$/i;\nconst UK_POSTCODE_AREA_REGEX = /^[A-Z]{1,2}[0-9][0-9A-Z]?$/i;\n\n/**\n * Validates if a string is a valid UK postcode\n */\nexport function isValidUKPostcode(postcode: string): boolean {\n  if (!postcode) return false;\n  const cleaned = postcode.trim().toUpperCase();\n  return UK_POSTCODE_REGEX.test(cleaned);\n}\n\n/**\n * Formats a UK postcode to standard format (with space)\n * e.g., \"sw1a1aa\" -> \"SW1A 1AA\"\n */\nexport function formatUKPostcode(postcode: string): string | null {\n  if (!postcode) return null;\n  \n  const cleaned = postcode.trim().toUpperCase().replace(/\\s+/g, '');\n  const match = cleaned.match(/^([A-Z]{1,2}[0-9][0-9A-Z]?)([0-9][A-Z]{2})$/);\n  \n  if (match) {\n    return `${match[1]} ${match[2]}`;\n  }\n  \n  return null;\n}\n\n/**\n * Extracts the outward code (area) from a UK postcode\n * e.g., \"SW1A 1AA\" -> \"SW1A\"\n */\nexport function getPostcodeOutwardCode(postcode: string): string | null {\n  const formatted = formatUKPostcode(postcode);\n  if (!formatted) return null;\n  \n  const parts = formatted.split(' ');\n  return parts[0];\n}\n\n/**\n * Extracts the district from a UK postcode\n * e.g., \"SW1A 1AA\" -> \"SW1\"\n */\nexport function getPostcodeDistrict(postcode: string): string | null {\n  const outwardCode = getPostcodeOutwardCode(postcode);\n  if (!outwardCode) return null;\n  \n  // Extract letters and first number(s)\n  const match = outwardCode.match(/^([A-Z]{1,2}[0-9]{1,2})/);\n  return match ? match[1] : null;\n}\n\n/**\n * Extracts the area from a UK postcode\n * e.g., \"SW1A 1AA\" -> \"SW\"\n */\nexport function getPostcodeArea(postcode: string): string | null {\n  const outwardCode = getPostcodeOutwardCode(postcode);\n  if (!outwardCode) return null;\n  \n  // Extract just the letters\n  const match = outwardCode.match(/^([A-Z]{1,2})/);\n  return match ? match[1] : null;\n}\n\n/**\n * Checks if a postcode string might be a partial postcode\n * (just the outward code or district)\n */\nexport function isPartialPostcode(postcode: string): boolean {\n  if (!postcode) return false;\n  const cleaned = postcode.trim().toUpperCase();\n  return UK_POSTCODE_AREA_REGEX.test(cleaned);\n}\n\n/**\n * Generates search patterns for postcode-based queries\n * Returns an array of patterns to match against\n */\nexport function generatePostcodeSearchPatterns(input: string): string[] {\n  const patterns: string[] = [];\n  const cleaned = input.trim().toUpperCase();\n  \n  // Full postcode format\n  const formatted = formatUKPostcode(cleaned);\n  if (formatted) {\n    patterns.push(formatted);\n    patterns.push(formatted.replace(' ', '')); // Without space\n  }\n  \n  // Outward code (e.g., \"SW1A\")\n  const outwardCode = getPostcodeOutwardCode(cleaned);\n  if (outwardCode) {\n    patterns.push(outwardCode);\n  }\n  \n  // District (e.g., \"SW1\")\n  const district = getPostcodeDistrict(cleaned);\n  if (district && district !== outwardCode) {\n    patterns.push(district);\n  }\n  \n  // Area (e.g., \"SW\")\n  const area = getPostcodeArea(cleaned);\n  if (area && area !== district && area !== outwardCode) {\n    patterns.push(area);\n  }\n  \n  // If it's a partial postcode, add it as is\n  if (isPartialPostcode(cleaned) && !patterns.includes(cleaned)) {\n    patterns.push(cleaned);\n  }\n  \n  return Array.from(new Set(patterns)); // Remove duplicates\n}\n\n/**\n * Determines if a field's postcode matches a search postcode\n * Supports partial matching (e.g., \"SW1\" matches \"SW1A 1AA\")\n */\nexport function postcodeMatches(fieldPostcode: string, searchPostcode: string): boolean {\n  if (!fieldPostcode || !searchPostcode) return false;\n  \n  const fieldFormatted = formatUKPostcode(fieldPostcode);\n  const searchFormatted = formatUKPostcode(searchPostcode);\n  \n  // Exact match\n  if (fieldFormatted && searchFormatted && fieldFormatted === searchFormatted) {\n    return true;\n  }\n  \n  // Check if search is a partial postcode\n  if (isPartialPostcode(searchPostcode)) {\n    const searchCleaned = searchPostcode.trim().toUpperCase();\n    const fieldCleaned = fieldPostcode.trim().toUpperCase();\n    \n    // Check if field postcode starts with the partial search\n    if (fieldCleaned.startsWith(searchCleaned)) {\n      return true;\n    }\n    \n    // Check against field's outward code\n    const fieldOutward = getPostcodeOutwardCode(fieldPostcode);\n    if (fieldOutward && fieldOutward.startsWith(searchCleaned)) {\n      return true;\n    }\n    \n    // Check against field's district\n    const fieldDistrict = getPostcodeDistrict(fieldPostcode);\n    if (fieldDistrict && fieldDistrict === searchCleaned) {\n      return true;\n    }\n    \n    // Check against field's area\n    const fieldArea = getPostcodeArea(fieldPostcode);\n    if (fieldArea && fieldArea === searchCleaned) {\n      return true;\n    }\n  }\n  \n  return false;\n}"],"names":["formatUKPostcode","generatePostcodeSearchPatterns","getPostcodeArea","getPostcodeDistrict","getPostcodeOutwardCode","isPartialPostcode","isValidUKPostcode","postcodeMatches","UK_POSTCODE_REGEX","UK_POSTCODE_AREA_REGEX","postcode","cleaned","trim","toUpperCase","test","replace","match","formatted","parts","split","outwardCode","input","patterns","push","district","area","includes","Array","from","Set","fieldPostcode","searchPostcode","fieldFormatted","searchFormatted","searchCleaned","fieldCleaned","startsWith","fieldOutward","fieldDistrict","fieldArea"],"mappings":"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"}