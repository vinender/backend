{"version":3,"sources":["../../src/server.ts"],"sourcesContent":["import express, { Application, Request, Response, NextFunction } from 'express';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport morgan from 'morgan';\nimport compression from 'compression';\nimport cookieParser from 'cookie-parser';\nimport dotenv from 'dotenv';\nimport { rateLimit } from 'express-rate-limit';\nimport mongoSanitize from 'express-mongo-sanitize';\nimport { createServer } from 'http';\nimport { setupWebSocket } from './utils/websocket';\nimport { initializeKafka } from './config/kafka';\n\n// Load environment variables\ndotenv.config();\n\n// Import configuration\nimport { PORT, NODE_ENV, FRONTEND_URL } from './config/constants';\nimport './config/database'; // Initialize database connection\n\n// Import routes\nimport authRoutes from './routes/auth.routes';\nimport authOtpRoutes from './routes/auth.otp.routes';\nimport userRoutes from './routes/user.routes';\nimport fieldRoutes from './routes/field.routes';\nimport bookingRoutes from './routes/booking.routes';\nimport reviewRoutes from './routes/review.routes';\nimport notificationRoutes from './routes/notification.routes';\nimport paymentRoutes from './routes/payment.routes';\nimport stripeRoutes from './routes/stripe.routes';\nimport favoriteRoutes from './routes/favorite.routes';\nimport chatRoutes from './routes/chat.routes';\nimport payoutRoutes from './routes/payout.routes';\nimport claimRoutes from './routes/claim.routes';\nimport stripeConnectRoutes from './routes/stripe-connect.routes';\nimport userReportRoutes from './routes/user-report.routes';\nimport userBlockRoutes from './routes/user-block.routes';\nimport paymentMethodRoutes from './routes/payment-method.routes';\nimport adminRoutes from './routes/admin.routes';\nimport adminPayoutRoutes from './routes/admin-payout.routes';\nimport autoPayoutRoutes from './routes/auto-payout.routes';\nimport earningsRoutes from './routes/earnings.routes';\nimport commissionRoutes from './routes/commission.routes';\nimport settingsRoutes from './routes/settings.routes';\nimport faqRoutes from './routes/faq.routes';\nimport uploadRoutes from './routes/upload.routes';\nimport aboutPageRoutes from './routes/about-page.routes';\n\n// Import middleware\nimport { errorHandler, notFound } from './middleware/error.middleware';\n\n// Import API documentation\nimport { apiDocumentation } from './utils/api-documentation';\nimport { generateApiDocsHTML } from './utils/api-docs-template';\n\n// Import scheduled jobs\nimport { initPayoutJobs } from './jobs/payout.job';\nimport { startHeldPayoutReleaseJobs } from './jobs/held-payout-release.job';\n\nclass Server {\n  private app: Application;\n  private httpServer: any;\n  private io: any;\n\n  constructor() {\n    this.app = express();\n    this.httpServer = createServer(this.app);\n    this.configureMiddleware();\n    this.configureRoutes();\n    this.configureErrorHandling();\n    this.configureSocketAndKafka();\n  }\n\n  private configureMiddleware(): void {\n    // CORS configuration - MUST come before other middleware\n    this.app.use(cors({\n      origin: (origin, callback) => {\n        // Allow requests from these origins\n        const allowedOrigins = [\n          'http://localhost:3000',\n          'http://localhost:3001', \n          'http://localhost:3002',\n          'http://localhost:3003', // Admin dashboard\n          'https://fieldsy.indiitserver.in', // Production frontend\n          'https://fieldsy-admin.indiitserver.in', // Production admin\n          'http://fieldsy.indiitserver.in', // Allow HTTP as fallback\n          'http://fieldsy-admin.indiitserver.in', // Allow HTTP as fallback\n          FRONTEND_URL\n        ];\n        \n        // Allow requests with no origin (like mobile apps or Postman)\n        if (!origin || allowedOrigins.includes(origin)) {\n          callback(null, true);\n        } else {\n          callback(new Error('Not allowed by CORS'));\n        }\n      },\n      credentials: true,\n      methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'],\n      allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],\n      optionsSuccessStatus: 200,\n    }));\n\n    // Security middleware - configure helmet to allow CORS\n    this.app.use(helmet({\n      crossOriginResourcePolicy: { policy: \"cross-origin\" },\n      contentSecurityPolicy: false,\n    }));\n\n    // Rate limiting - more lenient in development\n    const limiter = rateLimit({\n      windowMs: 15 * 60 * 1000, // 15 minutes\n      max: NODE_ENV === 'development' ? 10000 : 100, // Higher limit in dev\n      message: 'Too many requests from this IP, please try again later.',\n      skip: (req) => NODE_ENV === 'development' && req.ip === '::1', // Skip for localhost in dev\n    });\n    this.app.use('/api', limiter);\n\n    // Data sanitization against NoSQL query injection\n    this.app.use(mongoSanitize());\n\n    // Stripe webhook endpoint (raw body needed, must be before JSON parser)\n    this.app.use('/api/stripe', express.raw({ type: 'application/json' }));\n    this.app.use('/api/payments/webhook', express.raw({ type: 'application/json' }));\n\n    // Body parsing middleware\n    this.app.use(express.json({ limit: '10mb' }));\n    this.app.use(express.urlencoded({ extended: true, limit: '10mb' }));\n    this.app.use(cookieParser());\n\n    // Compression middleware\n    this.app.use(compression());\n\n    // Logging middleware\n    if (NODE_ENV === 'development') {\n      this.app.use(morgan('dev'));\n    } else {\n      this.app.use(morgan('combined'));\n    }\n\n    // Request timestamp\n    this.app.use((req, res, next) => {\n      req.requestTime = new Date().toISOString();\n      next();\n    });\n  }\n\n  private configureRoutes(): void {\n    // Health check endpoint\n    this.app.get('/health', (req, res) => {\n      res.status(200).json({\n        success: true,\n        status: 'OK',\n        timestamp: new Date().toISOString(),\n        environment: NODE_ENV,\n        uptime: process.uptime(),\n      });\n    });\n\n    // API documentation - Root route for production\n    this.app.get('/', (req, res) => {\n      // Check if client accepts HTML\n      const acceptHeader = req.headers.accept || '';\n      \n      if (acceptHeader.includes('text/html')) {\n        // Serve HTML documentation\n        res.setHeader('Content-Type', 'text/html');\n        res.send(generateApiDocsHTML(apiDocumentation));\n      } else {\n        // Serve JSON for API clients\n        res.json({\n          success: true,\n          message: 'Fieldsy API',\n          version: '1.0.0',\n          documentation: 'Visit this URL in a browser for interactive documentation',\n          endpoints: {\n            auth: '/api/auth',\n            users: '/api/users',\n            fields: '/api/fields',\n            bookings: '/api/bookings',\n            reviews: '/api/reviews',\n            notifications: '/api/notifications',\n            payments: '/api/payments',\n            chat: '/api/chat',\n          },\n        });\n      }\n    });\n\n    // API documentation endpoint (also available at /api)\n    this.app.get('/api', (req, res) => {\n      // Check if client accepts HTML\n      const acceptHeader = req.headers.accept || '';\n      \n      if (acceptHeader.includes('text/html')) {\n        // Serve HTML documentation\n        res.setHeader('Content-Type', 'text/html');\n        res.send(generateApiDocsHTML(apiDocumentation));\n      } else {\n        // Serve JSON for API clients\n        res.json({\n          success: true,\n          message: 'Fieldsy API',\n          version: '1.0.0',\n          documentation: '/api (view in browser for interactive docs)',\n          endpoints: {\n            auth: '/api/auth',\n            users: '/api/users',\n            fields: '/api/fields',\n            bookings: '/api/bookings',\n            reviews: '/api/reviews',\n            notifications: '/api/notifications',\n            payments: '/api/payments',\n            chat: '/api/chat',\n          },\n        });\n      }\n    });\n\n    // Stripe webhook route (must be before other routes due to raw body requirement)\n    this.app.use('/api/stripe', stripeRoutes);\n    \n    // Mount API routes\n    this.app.use('/api/auth', authRoutes);\n    this.app.use('/api/auth/otp', authOtpRoutes);\n    this.app.use('/api/users', userRoutes);\n    this.app.use('/api/fields', fieldRoutes);\n    this.app.use('/api/bookings', bookingRoutes);\n    this.app.use('/api/reviews', reviewRoutes);\n    this.app.use('/api/notifications', notificationRoutes);\n    this.app.use('/api/payments', paymentRoutes);\n    this.app.use('/api/favorites', favoriteRoutes);\n    this.app.use('/api/chat', chatRoutes);\n    this.app.use('/api/payouts', payoutRoutes);\n    this.app.use('/api/claims', claimRoutes);\n    this.app.use('/api/stripe-connect', stripeConnectRoutes);\n    this.app.use('/api/user-reports', userReportRoutes);\n    this.app.use('/api/user-blocks', userBlockRoutes);\n    this.app.use('/api/payment-methods', paymentMethodRoutes);\n    this.app.use('/api/admin', adminRoutes);\n    this.app.use('/api/admin/payouts', adminPayoutRoutes);\n    this.app.use('/api/auto-payouts', autoPayoutRoutes);\n    this.app.use('/api/earnings', earningsRoutes);\n    this.app.use('/api/commission', commissionRoutes);\n    this.app.use('/api/settings', settingsRoutes);\n    this.app.use('/api/faqs', faqRoutes);\n    this.app.use('/api/upload', uploadRoutes);\n    this.app.use('/api/about-page', aboutPageRoutes);\n\n    // Serve static files (if any)\n    // this.app.use('/uploads', express.static('uploads'));\n  }\n\n  private configureSocketAndKafka(): void {\n    // Socket.io is initialized in start() method via setupWebSocket\n    // We'll get the io instance from there\n  }\n\n  private configureErrorHandling(): void {\n    // Handle 404 errors\n    this.app.use((req: Request, res: Response, next: NextFunction) => {\n      console.log(`404 - Route not found: ${req.method} ${req.path}`);\n      res.status(404).json({\n        message: 'Route not found',\n        path: req.path,\n        method: req.method,\n      });\n    });\n\n    // Global error handler\n    this.app.use((err: any, req: Request, res: Response, next: NextFunction) => {\n      console.error('Error caught:', err.message);\n      console.error('Stack:', err.stack);\n      \n      const statusCode = err.statusCode || 500;\n      res.status(statusCode).json({\n        message: err.message || 'Internal Server Error',\n        error: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong',\n      });\n    });\n  }\n\n  public start(): void {\n    // Setup WebSocket and get io instance\n    const io = setupWebSocket(this.httpServer);\n    this.io = io;\n    \n    // Make io globally available for notifications and Kafka\n    (global as any).io = io;\n    \n    // Initialize Kafka with the io instance\n    initializeKafka(io).catch(error => {\n      console.log('Kafka initialization skipped - messages will be handled directly through Socket.io');\n    });\n    \n    // Initialize scheduled jobs\n    initPayoutJobs();\n    startHeldPayoutReleaseJobs();\n    console.log('✅ Scheduled jobs initialized');\n    \n    // Enhanced error handling for port conflicts\n    this.httpServer.on('error', (error: any) => {\n      if (error.code === 'EADDRINUSE') {\n        console.error(`❌ Port ${PORT} is already in use!`);\n        console.log(`💡 Please try one of the following:`);\n        console.log(`   1. Run: kill -9 $(lsof -ti:${PORT})`);\n        console.log(`   2. Use a different port: PORT=5001 npm run dev`);\n        console.log(`   3. Wait a moment for the port to be released`);\n        process.exit(1);\n      } else {\n        console.error('Server error:', error);\n        process.exit(1);\n      }\n    });\n    \n    this.httpServer.listen(PORT, () => {\n      console.log(`\n╔════════════════════════════════════════════════════╗\n║                                                    ║\n║   🚀 Server is running successfully!               ║\n║                                                    ║\n║   Mode: ${NODE_ENV.padEnd(43)}║\n║   Port: ${String(PORT).padEnd(43)}║\n║   Time: ${new Date().toLocaleString().padEnd(43)}║\n║                                                    ║\n║   API: http://localhost:${PORT}/api                ║\n║   Health: http://localhost:${PORT}/health          ║\n║   WebSocket: ws://localhost:${PORT}                ║\n║                                                    ║\n╚════════════════════════════════════════════════════╝\n      `);\n    });\n    \n    const server = this.httpServer;\n\n    // Graceful shutdown\n    process.on('SIGTERM', () => {\n      console.log('SIGTERM signal received: closing HTTP server');\n      server.close(() => {\n        console.log('HTTP server closed');\n        process.exit(0);\n      });\n    });\n\n    process.on('SIGINT', () => {\n      console.log('SIGINT signal received: closing HTTP server');\n      server.close(() => {\n        console.log('HTTP server closed');\n        process.exit(0);\n      });\n    });\n\n    // Handle uncaught exceptions\n    process.on('uncaughtException', (err) => {\n      console.error('UNCAUGHT EXCEPTION! 💥 Shutting down...');\n      console.error(err.name, err.message);\n      process.exit(1);\n    });\n\n    process.on('unhandledRejection', (err: any) => {\n      console.error('UNHANDLED REJECTION! 💥 Shutting down...');\n      console.error(err.name, err.message);\n      server.close(() => {\n        process.exit(1);\n      });\n    });\n  }\n}\n\n// Create and start server\nconst server = new Server();\nserver.start();\n\n// Export app for testing\nexport default server;"],"names":["dotenv","config","Server","app","httpServer","io","express","createServer","configureMiddleware","configureRoutes","configureErrorHandling","configureSocketAndKafka","use","cors","origin","callback","allowedOrigins","FRONTEND_URL","includes","Error","credentials","methods","allowedHeaders","optionsSuccessStatus","helmet","crossOriginResourcePolicy","policy","contentSecurityPolicy","limiter","rateLimit","windowMs","max","NODE_ENV","message","skip","req","ip","mongoSanitize","raw","type","json","limit","urlencoded","extended","cookieParser","compression","morgan","res","next","requestTime","Date","toISOString","get","status","success","timestamp","environment","uptime","process","acceptHeader","headers","accept","setHeader","send","generateApiDocsHTML","apiDocumentation","version","documentation","endpoints","auth","users","fields","bookings","reviews","notifications","payments","chat","stripeRoutes","authRoutes","authOtpRoutes","userRoutes","fieldRoutes","bookingRoutes","reviewRoutes","notificationRoutes","paymentRoutes","favoriteRoutes","chatRoutes","payoutRoutes","claimRoutes","stripeConnectRoutes","userReportRoutes","userBlockRoutes","paymentMethodRoutes","adminRoutes","adminPayoutRoutes","autoPayoutRoutes","earningsRoutes","commissionRoutes","settingsRoutes","faqRoutes","uploadRoutes","aboutPageRoutes","console","log","method","path","err","error","stack","statusCode","env","start","setupWebSocket","global","initializeKafka","catch","initPayoutJobs","startHeldPayoutReleaseJobs","on","code","PORT","exit","listen","padEnd","String","toLocaleString","server","close","name"],"mappings":"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"}